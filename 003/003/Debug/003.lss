
003.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  0000235c  000023f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000235c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004bc  008001b4  008001b4  000024a4  2**0
                  ALLOC
  3 .stab         00001e54  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006fb  00000000  00000000  000042f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  000049f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000065e  00000000  00000000  00004ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d71  00000000  00000000  00005131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008b6  00000000  00000000  00006ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000025f8  00000000  00000000  00007758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004e0  00000000  00000000  00009d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007d0  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018bb  00000000  00000000  0000aa00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000014e  00000000  00000000  0000c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000f0  00000000  00000000  0000c409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 95 03 	jmp	0x72a	; 0x72a <__ctors_end>
       4:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
       8:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
       c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      10:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      14:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      18:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      1c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      20:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      24:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_9>
      28:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      2c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      30:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      34:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      38:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      3c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      40:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      44:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      48:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      4c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      50:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__vector_20>
      54:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      58:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__vector_22>
      5c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      60:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      64:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      68:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      6c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      70:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_28>
      74:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      78:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__vector_30>
      7c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      80:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      84:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>
      88:	0c 94 b4 03 	jmp	0x768	; 0x768 <__bad_interrupt>

0000008c <__c.1901>:
      8c:	20 20 20 20 20 20 4b 48 7a 00                             KHz.

00000096 <__c.1899>:
      96:	54 68 65 20 46 72 65 71 75 65 6e 63 65 20 69 73     The Frequence is
      a6:	74 20 20 20 0d 0a 0a 00                             t   ....

000000ae <__c.1866>:
      ae:	66 72 65 71 75 65 6e 63 65 20 69 6e 20 4b 48 7a     frequence in KHz
      be:	20 00                                                .

000000c0 <__c.1864>:
      c0:	70 6c 65 61 73 65 20 69 6e 70 75 74 20 74 68 65     please input the
      d0:	20 00                                                .

000000d2 <__c.1847>:
      d2:	57 61 6e 67 20 53 68 69 68 61 6e 67 0d 0a 00        Wang Shihang...

000000e1 <__c.1845>:
      e1:	5a 68 61 6e 67 20 59 75 65 0d 0a 00                 Zhang Yue...

000000ed <__c.1843>:
      ed:	4c 69 20 58 75 65 6a 69 6e 67 0d 0a 00              Li Xuejing...

000000fa <__c.1841>:
      fa:	4d 65 6d 62 65 72 73 3a 0d 0a 00                    Members:...

00000105 <__c.1839>:
     105:	44 44 53 2d 53 69 67 6e 61 6c 67 65 6e 65 72 61     DDS-Signalgenera
     115:	74 6f 72 0d 0a 00                                   tor...

0000011b <__c.1837>:
     11b:	50 72 6f 6a 65 63 74 20 30 34 3a 0d 0a 00           Project 04:...

00000129 <font>:
     129:	00 00 00 00 00 00 00 3e 45 51 45 3e 00 3e 6b 6f     .......>EQE>.>ko
     139:	6b 3e 00 1c 3e 7c 3e 1c 00 18 3c 7e 3c 18 00 30     k>..>|>...<~<..0
     149:	36 7f 36 30 00 18 5c 7e 5c 18 00 00 00 00 00 00     6.60..\~\.......
	...
     169:	00 00 00 30 48 4a 36 0e 00 06 29 79 29 06 00 00     ...0HJ6...)y)...
     179:	00 00 00 00 00 60 7e 0a 35 3f 00 2a 1c 36 1c 2a     .....`~.5?.*.6.*
     189:	00 00 7f 3e 1c 08 00 08 1c 3e 7f 00 00 14 36 7f     ...>.....>....6.
     199:	36 14 00 00 5f 00 5f 00 00 06 09 7f 01 7f 00 22     6..._._........"
     1a9:	4d 55 59 22 00 60 60 60 60 00 00 14 b6 ff b6 14     MUY".````.......
     1b9:	00 04 06 7f 06 04 00 10 30 7f 30 10 00 08 08 3e     ........0.0....>
     1c9:	1c 08 00 08 1c 3e 08 08 00 78 40 40 40 40 00 08     .....>...x@@@@..
     1d9:	3e 08 3e 08 00 30 3c 3f 3c 30 00 03 0f 3f 0f 03     >.>..0<?<0...?..
	...
     1f1:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     201:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     211:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     221:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     231:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     241:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     251:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     261:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     271:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     281:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     291:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     2a1:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     2b1:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     2c1:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     2d1:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     2e1:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     2f1:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     301:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     311:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     321:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     331:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     341:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     351:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     361:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     371:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     381:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     391:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     3a1:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     3b1:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     3c1:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     3d1:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     3e1:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     3f1:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     401:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     411:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     421:	01 00 00 3c 26 23 26 3c 00 1e a1 e1 21 12 00 3d     ...<&#&<....!..=
     431:	40 20 7d 00 00 38 54 54 55 09 00 20 55 55 55 78     @ }..8TTU.. UUUx
     441:	00 20 55 54 55 78 00 20 55 55 54 78 00 20 57 55     . UTUx. UUTx. WU
     451:	57 78 00 1c a2 e2 22 14 00 38 55 55 55 08 00 38     Wx...."..8UUU..8
     461:	55 54 55 08 00 38 55 55 54 08 00 00 01 7c 41 00     UTU..8UUT....|A.
     471:	00 00 01 7d 41 00 00 00 01 7c 40 00 00 70 29 24     ...}A....|@..p)$
     481:	29 70 00 78 2f 25 2f 78 00 7c 54 54 55 45 00 34     )p.x/%/x.|TTUE.4
     491:	54 7c 54 58 00 7e 09 7f 49 49 00 38 45 45 39 00     T|TX.~..II.8EE9.
     4a1:	00 38 45 44 39 00 00 39 45 44 38 00 00 3c 41 21     .8ED9..9ED8..<A!
     4b1:	7d 00 00 3d 41 20 7c 00 00 9c a1 60 3d 00 00 3d     }..=A |....`=..=
     4c1:	42 42 3d 00 00 3c 41 40 3d 00 80 70 68 58 38 04     BB=..<A@=..phX8.
     4d1:	00 48 3e 49 49 62 00 7e 61 5d 43 3f 00 22 14 08     .H>IIb.~a]C?."..
     4e1:	14 22 00 40 88 7e 09 02 00 20 54 55 55 78 00 00     .".@.~... TUUx..
     4f1:	00 7d 41 00 00 38 44 45 39 00 00 3c 40 21 7d 00     .}A..8DE9..<@!}.
     501:	00 7a 09 0a 71 00 00 7a 11 22 79 00 00 08 55 55     .z..q..z."y...UU
     511:	55 5e 00 4e 51 51 4e 00 00 30 48 4d 40 20 3e 41     U^.NQQN..0HM@ >A
     521:	5d 4b 55 3e 04 04 04 04 04 1c 00 17 08 4c 6a 50     ]KU>.........LjP
     531:	00 17 08 34 2a 78 00 00 30 7d 30 00 00 08 14 00     ...4*x..0}0.....
     541:	08 14 00 14 08 00 14 08 44 11 44 11 44 11 aa 55     ........D.D.D..U
     551:	aa 55 aa 55 bb ee bb ee bb ee 00 00 00 ff 00 00     .U.U............
     561:	08 08 08 ff 00 00 00 70 28 25 29 70 00 70 29 25     .......p(%)p.p)%
     571:	29 70 00 70 29 25 28 70 3e 41 5d 55 41 3e 0a fb     )p.p)%(p>A]UA>..
     581:	00 ff 00 00 00 ff 00 ff 00 00 0a fa 02 fe 00 00     ................
     591:	0a 0b 08 0f 00 00 00 18 24 66 24 00 00 29 2a 7c     ........$f$..)*|
     5a1:	2a 29 08 08 08 f8 00 00 00 00 00 0f 08 08 08 08     *)..............
     5b1:	08 0f 08 08 08 08 08 f8 08 08 00 00 00 ff 08 08     ................
     5c1:	08 08 08 08 08 08 08 08 08 ff 08 08 00 20 56 55     ............. VU
     5d1:	56 79 00 70 2a 25 2a 71 00 0f 08 0b 0a 0a 00 fe     Vy.p*%*q........
     5e1:	02 fa 0a 0a 0a 0b 08 0b 0a 0a 0a fa 02 fa 0a 0a     ................
     5f1:	00 ff 00 fb 0a 0a 0a 0a 0a 0a 0a 0a 0a fb 00 fb     ................
     601:	0a 0a 00 5d 22 22 22 5d 00 22 55 59 30 00 00 08     ...]"""]."UY0...
     611:	7f 49 41 3e 00 7c 55 55 55 44 00 7c 55 54 55 44     .IA>.|UUUD.|UTUD
     621:	00 7c 55 55 54 44 00 00 00 07 00 00 00 00 44 7d     .|UUTD........D}
     631:	45 00 00 00 45 7d 45 00 00 00 45 7c 45 00 08 08     E...E}E...E|E...
     641:	08 0f 00 00 00 00 00 f8 08 08 ff ff ff ff ff ff     ................
     651:	f0 f0 f0 f0 f0 f0 00 00 00 77 00 00 00 00 45 7d     .........w....E}
     661:	44 00 0f 0f 0f 0f 0f 0f 00 3c 42 43 3d 00 00 fe     D........<BC=...
     671:	4a 4a 34 00 00 3c 43 43 3d 00 00 3d 43 42 3c 00     JJ4..<CC=..=CB<.
     681:	00 32 49 4a 31 00 00 3a 45 46 39 00 00 fc 20 20     .2IJ1..:EF9...  
     691:	1c 00 00 fe aa 28 10 00 00 ff a5 24 18 00 00 3c     .....(.....$...<
     6a1:	40 41 3d 00 00 3c 41 41 3d 00 00 3d 41 40 3c 00     @A=..<AA=..=A@<.
     6b1:	00 9c a0 61 3d 00 00 04 08 71 09 04 00 00 02 02     ...a=....q......
     6c1:	02 00 00 00 07 03 00 00 00 00 08 08 08 00 00 00     ................
     6d1:	24 2e 24 00 00 24 24 24 24 24 05 17 0a 34 2a 78     $.$..$$$$$...4*x
     6e1:	00 06 09 7f 01 7f 00 22 4d 55 59 22 00 08 08 2a     ......."MUY"...*
     6f1:	08 08 00 00 08 18 18 00 00 06 09 09 06 00 00 00     ................
     701:	08 00 08 00 00 00 08 00 00 00 00 02 0f 00 00 00     ................
     711:	00 09 0f 05 00 00 00 09 0d 0a 00 00 00 3c 3c 3c     .............<<<
     721:	3c 00 00 00 00 00 00 00 00                          <........

0000072a <__ctors_end>:
     72a:	11 24       	eor	r1, r1
     72c:	1f be       	out	0x3f, r1	; 63
     72e:	cf ef       	ldi	r28, 0xFF	; 255
     730:	d0 e4       	ldi	r29, 0x40	; 64
     732:	de bf       	out	0x3e, r29	; 62
     734:	cd bf       	out	0x3d, r28	; 61

00000736 <__do_copy_data>:
     736:	11 e0       	ldi	r17, 0x01	; 1
     738:	a0 e0       	ldi	r26, 0x00	; 0
     73a:	b1 e0       	ldi	r27, 0x01	; 1
     73c:	ec e5       	ldi	r30, 0x5C	; 92
     73e:	f3 e2       	ldi	r31, 0x23	; 35
     740:	00 e0       	ldi	r16, 0x00	; 0
     742:	0b bf       	out	0x3b, r16	; 59
     744:	02 c0       	rjmp	.+4      	; 0x74a <__do_copy_data+0x14>
     746:	07 90       	elpm	r0, Z+
     748:	0d 92       	st	X+, r0
     74a:	a4 3b       	cpi	r26, 0xB4	; 180
     74c:	b1 07       	cpc	r27, r17
     74e:	d9 f7       	brne	.-10     	; 0x746 <__do_copy_data+0x10>

00000750 <__do_clear_bss>:
     750:	16 e0       	ldi	r17, 0x06	; 6
     752:	a4 eb       	ldi	r26, 0xB4	; 180
     754:	b1 e0       	ldi	r27, 0x01	; 1
     756:	01 c0       	rjmp	.+2      	; 0x75a <.do_clear_bss_start>

00000758 <.do_clear_bss_loop>:
     758:	1d 92       	st	X+, r1

0000075a <.do_clear_bss_start>:
     75a:	a0 37       	cpi	r26, 0x70	; 112
     75c:	b1 07       	cpc	r27, r17
     75e:	e1 f7       	brne	.-8      	; 0x758 <.do_clear_bss_loop>
     760:	0e 94 0a 05 	call	0xa14	; 0xa14 <main>
     764:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <_exit>

00000768 <__bad_interrupt>:
     768:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000076c <get_frequence>:
	_delay_us(5);
	// chip ist reset now
}

void get_frequence()
{	
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
   // uart_init1();
    //uart_init0();
	LCD_Clear();
     774:	0e 94 66 07 	call	0xecc	; 0xecc <LCD_Clear>
	LCD_GotoXY(0,0);
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	0e 94 3a 09 	call	0x1274	; 0x1274 <LCD_GotoXY>
	LCD_PutString_P(PSTR("please input the "));
     780:	80 ec       	ldi	r24, 0xC0	; 192
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	LCD_GotoXY(0,2);
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	62 e0       	ldi	r22, 0x02	; 2
     78c:	0e 94 3a 09 	call	0x1274	; 0x1274 <LCD_GotoXY>
	LCD_PutString_P(PSTR("frequence in KHz "));
     790:	8e ea       	ldi	r24, 0xAE	; 174
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	LCD_GotoXY(20,7);
     798:	84 e1       	ldi	r24, 0x14	; 20
     79a:	67 e0       	ldi	r22, 0x07	; 7
     79c:	0e 94 3a 09 	call	0x1274	; 0x1274 <LCD_GotoXY>
    LCD_PutChar(0x10);
     7a0:	80 e1       	ldi	r24, 0x10	; 16
     7a2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_PutChar>
	LCD_Update();
     7a6:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_Update>
	
    sei();
     7aa:	78 94       	sei
        {
			static uint8_t cnt = 0;
			//AD_freq = data_frame_in[2];
			LCD_Clear();
			LCD_GotoXY(0,2);
			LCD_PutString(data_frame_in[2]);
     7ac:	c2 ed       	ldi	r28, 0xD2	; 210
     7ae:	d5 e0       	ldi	r29, 0x05	; 5
			LCD_GotoXY(0,4);
			LCD_PutString("test");
     7b0:	00 e0       	ldi	r16, 0x00	; 0
     7b2:	11 e0       	ldi	r17, 0x01	; 1
	
    sei();
    while(1)
    {
		//uart0_tx_frame();
        if(data_ok == 1)
     7b4:	80 91 bf 01 	lds	r24, 0x01BF
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	e1 f7       	brne	.-8      	; 0x7b4 <get_frequence+0x48>
        {
			static uint8_t cnt = 0;
			//AD_freq = data_frame_in[2];
			LCD_Clear();
     7bc:	0e 94 66 07 	call	0xecc	; 0xecc <LCD_Clear>
			LCD_GotoXY(0,2);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	62 e0       	ldi	r22, 0x02	; 2
     7c4:	0e 94 3a 09 	call	0x1274	; 0x1274 <LCD_GotoXY>
			LCD_PutString(data_frame_in[2]);
     7c8:	88 81       	ld	r24, Y
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_PutString>
			LCD_GotoXY(0,4);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	64 e0       	ldi	r22, 0x04	; 4
     7d4:	0e 94 3a 09 	call	0x1274	; 0x1274 <LCD_GotoXY>
			LCD_PutString("test");
     7d8:	c8 01       	movw	r24, r16
     7da:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_PutString>
			LCD_Update();
     7de:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_Update>
			cnt++;
     7e2:	80 91 b8 01 	lds	r24, 0x01B8
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	80 93 b8 01 	sts	0x01B8, r24
			uart0_tx_frame();
     7ec:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <uart0_tx_frame>
            data_ok = 0;
     7f0:	10 92 bf 01 	sts	0x01BF, r1
     7f4:	df cf       	rjmp	.-66     	; 0x7b4 <get_frequence+0x48>

000007f6 <start>:
	}
}

void start ()
{
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);
     7f6:	85 e1       	ldi	r24, 0x15	; 21
     7f8:	0e 94 ac 09 	call	0x1358	; 0x1358 <Backlight_LED>
	LCD_PutString_P(PSTR("Project 04:\r\n"));
     7fc:	8b e1       	ldi	r24, 0x1B	; 27
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	LCD_PutString_P(PSTR("DDS-Signalgenerator\r\n"));
     804:	85 e0       	ldi	r24, 0x05	; 5
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	LCD_PutString_P(PSTR("Members:\r\n"));
     80c:	8a ef       	ldi	r24, 0xFA	; 250
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	LCD_PutString_P(PSTR("Li Xuejing\r\n"));
     814:	8d ee       	ldi	r24, 0xED	; 237
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	LCD_PutString_P(PSTR("Zhang Yue\r\n"));
     81c:	81 ee       	ldi	r24, 0xE1	; 225
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	LCD_PutString_P(PSTR("Wang Shihang\r\n"));
     824:	82 ed       	ldi	r24, 0xD2	; 210
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	LCD_Update();
     82c:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_Update>
	wait_joy_button();
     830:	84 e1       	ldi	r24, 0x14	; 20
     832:	67 e0       	ldi	r22, 0x07	; 7
     834:	0e 94 3a 09 	call	0x1274	; 0x1274 <LCD_GotoXY>
     838:	80 e1       	ldi	r24, 0x10	; 16
     83a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_PutChar>
     83e:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_Update>
     842:	03 99       	sbic	0x00, 3	; 0
     844:	fe cf       	rjmp	.-4      	; 0x842 <start+0x4c>
     846:	03 9b       	sbis	0x00, 3	; 0
     848:	fe cf       	rjmp	.-4      	; 0x846 <start+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	99 ef       	ldi	r25, 0xF9	; 249
     84e:	a0 e0       	ldi	r26, 0x00	; 0
     850:	81 50       	subi	r24, 0x01	; 1
     852:	90 40       	sbci	r25, 0x00	; 0
     854:	a0 40       	sbci	r26, 0x00	; 0
     856:	e1 f7       	brne	.-8      	; 0x850 <start+0x5a>
     858:	00 c0       	rjmp	.+0      	; 0x85a <start+0x64>
     85a:	00 00       	nop
     85c:	03 99       	sbic	0x00, 3	; 0
     85e:	fe cf       	rjmp	.-4      	; 0x85c <start+0x66>
}
     860:	08 95       	ret

00000862 <AD9850_setup>:

void AD9850_setup()
{
	DDRD |= ((1<<DATA)|(1<<WCLK)|(1<<FQUP)|(1<<RESET));		//???AD9850?????????
     862:	8a b1       	in	r24, 0x0a	; 10
     864:	8c 65       	ori	r24, 0x5C	; 92
     866:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<DATA)|(1<<WCLK)|(1<<FQUP)|(1<<RESET));	//????????????
     868:	8b b1       	in	r24, 0x0b	; 11
     86a:	83 7a       	andi	r24, 0xA3	; 163
     86c:	8b b9       	out	0x0b, r24	; 11
}
     86e:	08 95       	ret

00000870 <AD9850_reset>:

void AD9850_reset()
{
	PORTD &= ~((1<<WCLK)|(1<<FQUP));
     870:	8b b1       	in	r24, 0x0b	; 11
     872:	87 7e       	andi	r24, 0xE7	; 231
     874:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<RESET);									//pulse RESET
     876:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     878:	8a e1       	ldi	r24, 0x1A	; 26
     87a:	8a 95       	dec	r24
     87c:	f1 f7       	brne	.-4      	; 0x87a <AD9850_reset+0xa>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <AD9850_reset+0x10>
	_delay_us(5);
	PORTD |= (1<<RESET);
     880:	5e 9a       	sbi	0x0b, 6	; 11
     882:	8a e1       	ldi	r24, 0x1A	; 26
     884:	8a 95       	dec	r24
     886:	f1 f7       	brne	.-4      	; 0x884 <AD9850_reset+0x14>
     888:	00 c0       	rjmp	.+0      	; 0x88a <AD9850_reset+0x1a>
	_delay_us(5);
	PORTD &= ~(1<<RESET);
     88a:	5e 98       	cbi	0x0b, 6	; 11
     88c:	8a e1       	ldi	r24, 0x1A	; 26
     88e:	8a 95       	dec	r24
     890:	f1 f7       	brne	.-4      	; 0x88e <AD9850_reset+0x1e>
     892:	00 c0       	rjmp	.+0      	; 0x894 <AD9850_reset+0x24>
	_delay_us(5);
	
	PORTD &= ~(1<<WCLK);									//pulse WCLK
     894:	5b 98       	cbi	0x0b, 3	; 11
     896:	8a e1       	ldi	r24, 0x1A	; 26
     898:	8a 95       	dec	r24
     89a:	f1 f7       	brne	.-4      	; 0x898 <AD9850_reset+0x28>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <AD9850_reset+0x2e>
	_delay_us(5);
	PORTD |= (1<<WCLK);
     89e:	5b 9a       	sbi	0x0b, 3	; 11
     8a0:	8a e1       	ldi	r24, 0x1A	; 26
     8a2:	8a 95       	dec	r24
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <AD9850_reset+0x32>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <AD9850_reset+0x38>
	_delay_us(5);
	PORTD &= ~(1<<WCLK);
     8a8:	5b 98       	cbi	0x0b, 3	; 11
     8aa:	8a e1       	ldi	r24, 0x1A	; 26
     8ac:	8a 95       	dec	r24
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <AD9850_reset+0x3c>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <AD9850_reset+0x42>
	_delay_us(5);
	
	PORTD &= ~(1<<DATA);									//make sure DATA pin is LOW
     8b2:	5a 98       	cbi	0x0b, 2	; 11
	
	PORTD &= ~(1<<FQUP);									//pulse FQUP
     8b4:	5c 98       	cbi	0x0b, 4	; 11
     8b6:	8a e1       	ldi	r24, 0x1A	; 26
     8b8:	8a 95       	dec	r24
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <AD9850_reset+0x48>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <AD9850_reset+0x4e>
	_delay_us(5);
	PORTD |= (1<<FQUP);
     8be:	5c 9a       	sbi	0x0b, 4	; 11
     8c0:	8a e1       	ldi	r24, 0x1A	; 26
     8c2:	8a 95       	dec	r24
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <AD9850_reset+0x52>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <AD9850_reset+0x58>
	_delay_us(5);
	PORTD &= ~(1<<FQUP);
     8c8:	5c 98       	cbi	0x0b, 4	; 11
     8ca:	8a e1       	ldi	r24, 0x1A	; 26
     8cc:	8a 95       	dec	r24
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <AD9850_reset+0x5c>
     8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <AD9850_reset+0x62>
	_delay_us(5);
	// chip ist reset now
}
     8d2:	08 95       	ret

000008d4 <AD9850_Setfrequency>:
void AD9850_Setfrequency(double freq)
{
	int i;
	double x;
	x =  pow(2,32)/125;
	freq = freq/1000;
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	4a e7       	ldi	r20, 0x7A	; 122
     8da:	54 e4       	ldi	r21, 0x44	; 68
     8dc:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__divsf3>
	uint32_t tuning_word = freq * x;
     8e0:	2f e6       	ldi	r18, 0x6F	; 111
     8e2:	32 e1       	ldi	r19, 0x12	; 18
     8e4:	43 e0       	ldi	r20, 0x03	; 3
     8e6:	5c e4       	ldi	r21, 0x4C	; 76
     8e8:	0e 94 04 11 	call	0x2208	; 0x2208 <__mulsf3>
     8ec:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
     8f0:	26 2f       	mov	r18, r22
     8f2:	57 2f       	mov	r21, r23
     8f4:	48 2f       	mov	r20, r24
	PORTD &= ~(1<<FQUP);
     8f6:	5c 98       	cbi	0x0b, 4	; 11
	
	//write W0
	uint8_t W0 = tuning_word;
     8f8:	82 2f       	mov	r24, r18
     8fa:	28 e0       	ldi	r18, 0x08	; 8
     8fc:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W0&0x01)
     8fe:	80 ff       	sbrs	r24, 0
     900:	02 c0       	rjmp	.+4      	; 0x906 <AD9850_Setfrequency+0x32>
		{
			PORTD |= (1<<DATA);
     902:	5a 9a       	sbi	0x0b, 2	; 11
     904:	01 c0       	rjmp	.+2      	; 0x908 <AD9850_Setfrequency+0x34>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     906:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     908:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     90a:	5b 98       	cbi	0x0b, 3	; 11
     90c:	21 50       	subi	r18, 0x01	; 1
     90e:	30 40       	sbci	r19, 0x00	; 0
	uint32_t tuning_word = freq * x;
	PORTD &= ~(1<<FQUP);
	
	//write W0
	uint8_t W0 = tuning_word;
	for(i=0; i<8; i++ )
     910:	11 f0       	breq	.+4      	; 0x916 <AD9850_Setfrequency+0x42>
		{
			PORTD &= ~(1<<DATA);
		}
		PORTD |= (1<<WCLK);
		PORTD &= ~(1<<WCLK);
		W0 = W0>>1;
     912:	86 95       	lsr	r24
     914:	f4 cf       	rjmp	.-24     	; 0x8fe <AD9850_Setfrequency+0x2a>
	}
	
	//write W1
	uint8_t W1 = tuning_word>>8;
     916:	28 e0       	ldi	r18, 0x08	; 8
     918:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W1&0x01)
     91a:	50 ff       	sbrs	r21, 0
     91c:	02 c0       	rjmp	.+4      	; 0x922 <AD9850_Setfrequency+0x4e>
		{
			PORTD |= (1<<DATA);
     91e:	5a 9a       	sbi	0x0b, 2	; 11
     920:	01 c0       	rjmp	.+2      	; 0x924 <AD9850_Setfrequency+0x50>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     922:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     924:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     926:	5b 98       	cbi	0x0b, 3	; 11
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
		W0 = W0>>1;
	}
	
	//write W1
	uint8_t W1 = tuning_word>>8;
	for(i=0; i<8; i++ )
     92c:	11 f0       	breq	.+4      	; 0x932 <AD9850_Setfrequency+0x5e>
		{
			PORTD &= ~(1<<DATA);
		}
		PORTD |= (1<<WCLK);
		PORTD &= ~(1<<WCLK);
		W1 = W1>>1;
     92e:	56 95       	lsr	r21
     930:	f4 cf       	rjmp	.-24     	; 0x91a <AD9850_Setfrequency+0x46>
	}
	
	//write W2
	uint8_t W2 = tuning_word>>16;
	for(i=0; i<8; i++ )
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(W2&0x01)
     936:	40 ff       	sbrs	r20, 0
     938:	02 c0       	rjmp	.+4      	; 0x93e <AD9850_Setfrequency+0x6a>
		{
			PORTD |= (1<<DATA);
     93a:	5a 9a       	sbi	0x0b, 2	; 11
     93c:	01 c0       	rjmp	.+2      	; 0x940 <AD9850_Setfrequency+0x6c>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     93e:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     940:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     942:	5b 98       	cbi	0x0b, 3	; 11
		W1 = W1>>1;
	}
	
	//write W2
	uint8_t W2 = tuning_word>>16;
	for(i=0; i<8; i++ )
     944:	2f 5f       	subi	r18, 0xFF	; 255
     946:	3f 4f       	sbci	r19, 0xFF	; 255
     948:	28 30       	cpi	r18, 0x08	; 8
     94a:	31 05       	cpc	r19, r1
     94c:	19 f0       	breq	.+6      	; 0x954 <AD9850_Setfrequency+0x80>
		{
			PORTD &= ~(1<<DATA);
		}
		PORTD |= (1<<WCLK);
		PORTD &= ~(1<<WCLK);
		W2 = W2>>2;
     94e:	46 95       	lsr	r20
     950:	46 95       	lsr	r20
     952:	f1 cf       	rjmp	.-30     	; 0x936 <AD9850_Setfrequency+0x62>
	}
	
	//write W3
	uint8_t W3 = tuning_word>>24;
     954:	39 2f       	mov	r19, r25
     956:	88 e0       	ldi	r24, 0x08	; 8
     958:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W3&0x01)
     95a:	30 ff       	sbrs	r19, 0
     95c:	02 c0       	rjmp	.+4      	; 0x962 <AD9850_Setfrequency+0x8e>
		{
			PORTD |= (1<<DATA);
     95e:	5a 9a       	sbi	0x0b, 2	; 11
     960:	01 c0       	rjmp	.+2      	; 0x964 <AD9850_Setfrequency+0x90>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     962:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     964:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     966:	5b 98       	cbi	0x0b, 3	; 11
     968:	01 97       	sbiw	r24, 0x01	; 1
		W2 = W2>>2;
	}
	
	//write W3
	uint8_t W3 = tuning_word>>24;
	for(i=0; i<8; i++ )
     96a:	11 f0       	breq	.+4      	; 0x970 <AD9850_Setfrequency+0x9c>
		{
			PORTD &= ~(1<<DATA);
		}
		PORTD |= (1<<WCLK);
		PORTD &= ~(1<<WCLK);
		W3 = W3>>1;
     96c:	36 95       	lsr	r19
     96e:	f5 cf       	rjmp	.-22     	; 0x95a <AD9850_Setfrequency+0x86>
		W2 = W2>>2;
	}
	
	//write W3
	uint8_t W3 = tuning_word>>24;
	for(i=0; i<8; i++ )
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
	
	//write W4
	uint8_t W4 = 0x00;
	for(i=0; i<8; i++ )
	{
		PORTD &= ~(1<<DATA);
     974:	5a 98       	cbi	0x0b, 2	; 11
		PORTD |= (1<<WCLK);
     976:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     978:	5b 98       	cbi	0x0b, 3	; 11
		W3 = W3>>1;
	}
	
	//write W4
	uint8_t W4 = 0x00;
	for(i=0; i<8; i++ )
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	88 30       	cpi	r24, 0x08	; 8
     97e:	91 05       	cpc	r25, r1
     980:	c9 f7       	brne	.-14     	; 0x974 <AD9850_Setfrequency+0xa0>
		PORTD |= (1<<WCLK);
		PORTD &= ~(1<<WCLK);
		W4 = W4>>1;
	}
	
	PORTD |= (1<<FQUP);
     982:	5c 9a       	sbi	0x0b, 4	; 11
     984:	8a e1       	ldi	r24, 0x1A	; 26
     986:	8a 95       	dec	r24
     988:	f1 f7       	brne	.-4      	; 0x986 <AD9850_Setfrequency+0xb2>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <AD9850_Setfrequency+0xb8>
	_delay_us(5);
	PORTD &= ~(1<<FQUP);
     98c:	5c 98       	cbi	0x0b, 4	; 11
}
     98e:	08 95       	ret

00000990 <frequence_display>:

void frequence_display()
{
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	df 93       	push	r29
     996:	cf 93       	push	r28
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	a0 97       	sbiw	r28, 0x20	; 32
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
	char getfrequency_buffer[32];
	LCD_Clear();
     9a8:	0e 94 66 07 	call	0xecc	; 0xecc <LCD_Clear>
	Backlight_LED(BL_BLUE_ON);
     9ac:	80 e1       	ldi	r24, 0x10	; 16
     9ae:	0e 94 ac 09 	call	0x1358	; 0x1358 <Backlight_LED>
	// initialize adc and lcd
	
	LCD_GotoXY(0,0);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	0e 94 3a 09 	call	0x1274	; 0x1274 <LCD_GotoXY>
	// display the labels on LCD
	LCD_PutString_P(PSTR("The Frequence ist   \r\n\n"));
     9ba:	86 e9       	ldi	r24, 0x96	; 150
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	itoa(AD_freq, getfrequency_buffer, 10);
     9c2:	80 91 cc 01 	lds	r24, 0x01CC
     9c6:	90 91 cd 01 	lds	r25, 0x01CD
     9ca:	8e 01       	movw	r16, r28
     9cc:	0f 5f       	subi	r16, 0xFF	; 255
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	b8 01       	movw	r22, r16
     9d2:	4a e0       	ldi	r20, 0x0A	; 10
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	0e 94 67 11 	call	0x22ce	; 0x22ce <itoa>
	LCD_PutString(getfrequency_buffer);
     9da:	c8 01       	movw	r24, r16
     9dc:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_PutString>
	LCD_PutString_P(PSTR("      KHz"));
     9e0:	8c e8       	ldi	r24, 0x8C	; 140
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 28 09 	call	0x1250	; 0x1250 <LCD_PutString_P>
	LCD_PutChar(0x10);
     9e8:	80 e1       	ldi	r24, 0x10	; 16
     9ea:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_PutChar>
	LCD_Update();
     9ee:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9f2:	8f e3       	ldi	r24, 0x3F	; 63
     9f4:	9c e9       	ldi	r25, 0x9C	; 156
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <frequence_display+0x66>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <frequence_display+0x6c>
     9fc:	00 00       	nop
	_delay_ms(10);
}
     9fe:	a0 96       	adiw	r28, 0x20	; 32
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	cf 91       	pop	r28
     a0c:	df 91       	pop	r29
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <main>:

void frequence_display();


int main(void)
{
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
	// set PA3-PA7 as input and activated internal Pull-Up
	DDRA &= ~((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     a18:	81 b1       	in	r24, 0x01	; 1
     a1a:	87 70       	andi	r24, 0x07	; 7
     a1c:	81 b9       	out	0x01, r24	; 1
	PORTA |= ((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     a1e:	82 b1       	in	r24, 0x02	; 2
     a20:	88 6f       	ori	r24, 0xF8	; 248
     a22:	82 b9       	out	0x02, r24	; 2
	
	// set PB0-PB3 as output
	DDRB = 0x0F;
     a24:	8f e0       	ldi	r24, 0x0F	; 15
     a26:	84 b9       	out	0x04, r24	; 4
	// set PB0-PB3 on high-level
	PORTB |= 0x0F;		// Required for DMM Board DMM Board 2013
     a28:	85 b1       	in	r24, 0x05	; 5
     a2a:	8f 60       	ori	r24, 0x0F	; 15
     a2c:	85 b9       	out	0x05, r24	; 5
	
	void(*get_frequence_p)(void) = get_frequence;			//define a function pointer, point to function get_frequence
     a2e:	c6 eb       	ldi	r28, 0xB6	; 182
     a30:	d3 e0       	ldi	r29, 0x03	; 3

	LCD_Init();
     a32:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCD_Init>
    uart_init0();
     a36:	0e 94 14 0c 	call	0x1828	; 0x1828 <uart_init0>
	start ();
     a3a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <start>
	
	AD9850_setup();
     a3e:	0e 94 31 04 	call	0x862	; 0x862 <AD9850_setup>
	AD9850_reset();
     a42:	0e 94 38 04 	call	0x870	; 0x870 <AD9850_reset>

	get_frequence();
     a46:	0e 94 b6 03 	call	0x76c	; 0x76c <get_frequence>
	
	for(;;)
	{
		if(~PINA&(1<<PINA7))
     a4a:	07 99       	sbic	0x00, 7	; 0
     a4c:	14 c0       	rjmp	.+40     	; 0xa76 <main+0x62>
			AD_freq +=1000;
     a4e:	80 91 cc 01 	lds	r24, 0x01CC
     a52:	90 91 cd 01 	lds	r25, 0x01CD
     a56:	a0 91 ce 01 	lds	r26, 0x01CE
     a5a:	b0 91 cf 01 	lds	r27, 0x01CF
     a5e:	88 51       	subi	r24, 0x18	; 24
     a60:	9c 4f       	sbci	r25, 0xFC	; 252
     a62:	af 4f       	sbci	r26, 0xFF	; 255
     a64:	bf 4f       	sbci	r27, 0xFF	; 255
     a66:	80 93 cc 01 	sts	0x01CC, r24
     a6a:	90 93 cd 01 	sts	0x01CD, r25
     a6e:	a0 93 ce 01 	sts	0x01CE, r26
     a72:	b0 93 cf 01 	sts	0x01CF, r27
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	91 ee       	ldi	r25, 0xE1	; 225
     a7a:	a4 e0       	ldi	r26, 0x04	; 4
     a7c:	81 50       	subi	r24, 0x01	; 1
     a7e:	90 40       	sbci	r25, 0x00	; 0
     a80:	a0 40       	sbci	r26, 0x00	; 0
     a82:	e1 f7       	brne	.-8      	; 0xa7c <main+0x68>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <main+0x72>
     a86:	00 00       	nop
			_delay_ms(100);
		
		if (~PINA&(1<<PINA6))
     a88:	06 99       	sbic	0x00, 6	; 0
     a8a:	14 c0       	rjmp	.+40     	; 0xab4 <main+0xa0>
			AD_freq -=1000;
     a8c:	80 91 cc 01 	lds	r24, 0x01CC
     a90:	90 91 cd 01 	lds	r25, 0x01CD
     a94:	a0 91 ce 01 	lds	r26, 0x01CE
     a98:	b0 91 cf 01 	lds	r27, 0x01CF
     a9c:	88 5e       	subi	r24, 0xE8	; 232
     a9e:	93 40       	sbci	r25, 0x03	; 3
     aa0:	a0 40       	sbci	r26, 0x00	; 0
     aa2:	b0 40       	sbci	r27, 0x00	; 0
     aa4:	80 93 cc 01 	sts	0x01CC, r24
     aa8:	90 93 cd 01 	sts	0x01CD, r25
     aac:	a0 93 ce 01 	sts	0x01CE, r26
     ab0:	b0 93 cf 01 	sts	0x01CF, r27
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
     ab6:	91 ee       	ldi	r25, 0xE1	; 225
     ab8:	a4 e0       	ldi	r26, 0x04	; 4
     aba:	81 50       	subi	r24, 0x01	; 1
     abc:	90 40       	sbci	r25, 0x00	; 0
     abe:	a0 40       	sbci	r26, 0x00	; 0
     ac0:	e1 f7       	brne	.-8      	; 0xaba <main+0xa6>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <main+0xb0>
     ac4:	00 00       	nop
			_delay_ms(100);
		
		if (~PINA&(1<<PINA5))
     ac6:	05 99       	sbic	0x00, 5	; 0
     ac8:	14 c0       	rjmp	.+40     	; 0xaf2 <main+0xde>
			AD_freq -=100;
     aca:	80 91 cc 01 	lds	r24, 0x01CC
     ace:	90 91 cd 01 	lds	r25, 0x01CD
     ad2:	a0 91 ce 01 	lds	r26, 0x01CE
     ad6:	b0 91 cf 01 	lds	r27, 0x01CF
     ada:	84 56       	subi	r24, 0x64	; 100
     adc:	90 40       	sbci	r25, 0x00	; 0
     ade:	a0 40       	sbci	r26, 0x00	; 0
     ae0:	b0 40       	sbci	r27, 0x00	; 0
     ae2:	80 93 cc 01 	sts	0x01CC, r24
     ae6:	90 93 cd 01 	sts	0x01CD, r25
     aea:	a0 93 ce 01 	sts	0x01CE, r26
     aee:	b0 93 cf 01 	sts	0x01CF, r27
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	99 ef       	ldi	r25, 0xF9	; 249
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	81 50       	subi	r24, 0x01	; 1
     afa:	90 40       	sbci	r25, 0x00	; 0
     afc:	a0 40       	sbci	r26, 0x00	; 0
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <main+0xe4>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <main+0xee>
     b02:	00 00       	nop
			_delay_ms(20);
			
		if (~PINA&(1<<PINA4))
     b04:	04 99       	sbic	0x00, 4	; 0
     b06:	14 c0       	rjmp	.+40     	; 0xb30 <main+0x11c>
			AD_freq +=100;
     b08:	80 91 cc 01 	lds	r24, 0x01CC
     b0c:	90 91 cd 01 	lds	r25, 0x01CD
     b10:	a0 91 ce 01 	lds	r26, 0x01CE
     b14:	b0 91 cf 01 	lds	r27, 0x01CF
     b18:	8c 59       	subi	r24, 0x9C	; 156
     b1a:	9f 4f       	sbci	r25, 0xFF	; 255
     b1c:	af 4f       	sbci	r26, 0xFF	; 255
     b1e:	bf 4f       	sbci	r27, 0xFF	; 255
     b20:	80 93 cc 01 	sts	0x01CC, r24
     b24:	90 93 cd 01 	sts	0x01CD, r25
     b28:	a0 93 ce 01 	sts	0x01CE, r26
     b2c:	b0 93 cf 01 	sts	0x01CF, r27
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	91 ee       	ldi	r25, 0xE1	; 225
     b34:	a4 e0       	ldi	r26, 0x04	; 4
     b36:	81 50       	subi	r24, 0x01	; 1
     b38:	90 40       	sbci	r25, 0x00	; 0
     b3a:	a0 40       	sbci	r26, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <main+0x122>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <main+0x12c>
     b40:	00 00       	nop
			_delay_ms(100);

		if (~PINA&(1<<PINA4))
     b42:	04 99       	sbic	0x00, 4	; 0
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <main+0x136>
			(*get_frequence_p)();		//when Joystick Button is pressed, get the frequence from serial port again
     b46:	fe 01       	movw	r30, r28
     b48:	09 95       	icall
		
		AD9850_Setfrequency(AD_freq);
     b4a:	60 91 cc 01 	lds	r22, 0x01CC
     b4e:	70 91 cd 01 	lds	r23, 0x01CD
     b52:	80 91 ce 01 	lds	r24, 0x01CE
     b56:	90 91 cf 01 	lds	r25, 0x01CF
     b5a:	0e 94 76 10 	call	0x20ec	; 0x20ec <__floatunsisf>
     b5e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <AD9850_Setfrequency>
		frequence_display();
     b62:	0e 94 c8 04 	call	0x990	; 0x990 <frequence_display>
	}
     b66:	71 cf       	rjmp	.-286    	; 0xa4a <main+0x36>

00000b68 <dataflash_opcode_and_address>:
#include "spi.h"
#include "dataflash.h"

void
dataflash_opcode_and_address (unsigned char opcode, unsigned int page, unsigned int offset)
{
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	eb 01       	movw	r28, r22
     b72:	14 2f       	mov	r17, r20
     b74:	05 2f       	mov	r16, r21
  SPI_MasterTransfer(opcode);
     b76:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
  SPI_MasterTransfer((unsigned char)(page >> 7) & 0x1f);
     b7a:	ce 01       	movw	r24, r28
     b7c:	88 0f       	add	r24, r24
     b7e:	89 2f       	mov	r24, r25
     b80:	88 1f       	adc	r24, r24
     b82:	99 0b       	sbc	r25, r25
     b84:	91 95       	neg	r25
     b86:	8f 71       	andi	r24, 0x1F	; 31
     b88:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
  SPI_MasterTransfer(((unsigned char)(offset >> 8) & 0x01) | ((unsigned char)(page) << 1));
     b8c:	9e 01       	movw	r18, r28
     b8e:	22 0f       	add	r18, r18
     b90:	82 2f       	mov	r24, r18
     b92:	01 70       	andi	r16, 0x01	; 1
     b94:	80 2b       	or	r24, r16
     b96:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
  SPI_MasterTransfer((unsigned char)(offset));
     b9a:	81 2f       	mov	r24, r17
     b9c:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <dataflash_wait>:

void
dataflash_wait (void)
{
  DATAFLASH_Chip_Select;
     baa:	2c 98       	cbi	0x05, 4	; 5
  SPI_MasterTransfer(DATAFLASH_STATUS_REGISTER_READ);
     bac:	87 ed       	ldi	r24, 0xD7	; 215
     bae:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
  
  while (!(SPI_MasterTransferRead(0x00) & 0x80));
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	0e 94 47 0a 	call	0x148e	; 0x148e <SPI_MasterTransferRead>
     bb8:	88 23       	and	r24, r24
     bba:	dc f7       	brge	.-10     	; 0xbb2 <dataflash_wait+0x8>
  
  DATAFLASH_Chip_Unselect;
     bbc:	2c 9a       	sbi	0x05, 4	; 5
}
     bbe:	08 95       	ret

00000bc0 <dataflash_init>:
void
dataflash_init (void)
{
  // AT45DB081 doesn't actually need an intialization,
  // only the ChipSelect should be configured as an output.
  DDRB |= (1 << PB4);
     bc0:	24 9a       	sbi	0x04, 4	; 4
  DATAFLASH_Chip_Unselect;
     bc2:	2c 9a       	sbi	0x05, 4	; 5
  SPI_MasterInit();
     bc4:	0e 94 30 0a 	call	0x1460	; 0x1460 <SPI_MasterInit>
}
     bc8:	08 95       	ret

00000bca <dataflash_buffer_to_page>:

void
dataflash_buffer_to_page (unsigned int page, unsigned char buffer)
{
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	ec 01       	movw	r28, r24
     bd2:	16 2f       	mov	r17, r22
  dataflash_wait();
     bd4:	0e 94 d5 05 	call	0xbaa	; 0xbaa <dataflash_wait>
  DATAFLASH_Chip_Select;
     bd8:	2c 98       	cbi	0x05, 4	; 5

  switch (buffer)
     bda:	12 30       	cpi	r17, 0x02	; 2
     bdc:	39 f0       	breq	.+14     	; 0xbec <dataflash_buffer_to_page+0x22>
    {
    default:
      dataflash_opcode_and_address
        (DATAFLASH_BUFFER_1_TO_MAIN_MEMORY_PAGE_PROGRAM_WITH_BUILT_IN_ERASE,
     bde:	83 e8       	ldi	r24, 0x83	; 131
     be0:	be 01       	movw	r22, r28
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	0e 94 b4 05 	call	0xb68	; 0xb68 <dataflash_opcode_and_address>
         page, 0x00);
      break;
     bea:	06 c0       	rjmp	.+12     	; 0xbf8 <dataflash_buffer_to_page+0x2e>
    
    case 2:
      dataflash_opcode_and_address
        (DATAFLASH_BUFFER_2_TO_MAIN_MEMORY_PAGE_PROGRAM_WITH_BUILT_IN_ERASE,
     bec:	86 e8       	ldi	r24, 0x86	; 134
     bee:	be 01       	movw	r22, r28
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	0e 94 b4 05 	call	0xb68	; 0xb68 <dataflash_opcode_and_address>
         page, 0x00);
      break;
    }
  DATAFLASH_Chip_Unselect;
     bf8:	2c 9a       	sbi	0x05, 4	; 5
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	08 95       	ret

00000c02 <dataflash_page_to_buffer>:

void
dataflash_page_to_buffer (unsigned int page, unsigned char buffer)
{
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ec 01       	movw	r28, r24
     c0a:	16 2f       	mov	r17, r22
  dataflash_wait();
     c0c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <dataflash_wait>
  DATAFLASH_Chip_Select;
     c10:	2c 98       	cbi	0x05, 4	; 5

  switch (buffer)
     c12:	12 30       	cpi	r17, 0x02	; 2
     c14:	39 f0       	breq	.+14     	; 0xc24 <dataflash_page_to_buffer+0x22>
    {
    default:
      dataflash_opcode_and_address 
        (DATAFLASH_MAIN_MEMORY_PAGE_TO_BUFFER_1_TRANSFER,
     c16:	83 e5       	ldi	r24, 0x53	; 83
     c18:	be 01       	movw	r22, r28
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	0e 94 b4 05 	call	0xb68	; 0xb68 <dataflash_opcode_and_address>
         page, 0x00);
      break;
     c22:	06 c0       	rjmp	.+12     	; 0xc30 <dataflash_page_to_buffer+0x2e>
    
    case 2:
      dataflash_opcode_and_address 
        (DATAFLASH_MAIN_MEMORY_PAGE_TO_BUFFER_2_TRANSFER,
     c24:	85 e5       	ldi	r24, 0x55	; 85
     c26:	be 01       	movw	r22, r28
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	0e 94 b4 05 	call	0xb68	; 0xb68 <dataflash_opcode_and_address>
         page, 0x00);
      break;
    }
  DATAFLASH_Chip_Unselect;
     c30:	2c 9a       	sbi	0x05, 4	; 5
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	08 95       	ret

00000c3a <dataflash_buffer_read>:

void
dataflash_buffer_read (unsigned char buffer, unsigned int offset,
                       unsigned int length, unsigned char *array)
{
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	f8 2e       	mov	r15, r24
     c4a:	8b 01       	movw	r16, r22
     c4c:	ea 01       	movw	r28, r20
     c4e:	e2 2e       	mov	r14, r18
     c50:	d3 2e       	mov	r13, r19
  dataflash_wait();
     c52:	0e 94 d5 05 	call	0xbaa	; 0xbaa <dataflash_wait>
  DATAFLASH_Chip_Select;
     c56:	2c 98       	cbi	0x05, 4	; 5

  switch (buffer)
     c58:	8f 2d       	mov	r24, r15
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	39 f0       	breq	.+14     	; 0xc6c <dataflash_buffer_read+0x32>
    {
    default:
      dataflash_opcode_and_address 
        (DATAFLASH_BUFFER_1_READ_LF,
     c5e:	81 ed       	ldi	r24, 0xD1	; 209
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	a8 01       	movw	r20, r16
     c66:	0e 94 b4 05 	call	0xb68	; 0xb68 <dataflash_opcode_and_address>
         0x00, offset);
      break;
     c6a:	06 c0       	rjmp	.+12     	; 0xc78 <dataflash_buffer_read+0x3e>
    
    case 2:
      dataflash_opcode_and_address 
        (DATAFLASH_BUFFER_2_READ_LF,
     c6c:	83 ed       	ldi	r24, 0xD3	; 211
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	a8 01       	movw	r20, r16
     c74:	0e 94 b4 05 	call	0xb68	; 0xb68 <dataflash_opcode_and_address>
      break;
    }
  
  offset = 0x00;
  
  while (length--)
     c78:	20 97       	sbiw	r28, 0x00	; 0
     c7a:	51 f0       	breq	.+20     	; 0xc90 <dataflash_buffer_read+0x56>
     c7c:	0e 2d       	mov	r16, r14
     c7e:	1d 2d       	mov	r17, r13
    {
      array[offset++] = SPI_MasterTransferRead(0x00);
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	0e 94 47 0a 	call	0x148e	; 0x148e <SPI_MasterTransferRead>
     c86:	f8 01       	movw	r30, r16
     c88:	81 93       	st	Z+, r24
     c8a:	8f 01       	movw	r16, r30
     c8c:	21 97       	sbiw	r28, 0x01	; 1
      break;
    }
  
  offset = 0x00;
  
  while (length--)
     c8e:	c1 f7       	brne	.-16     	; 0xc80 <dataflash_buffer_read+0x46>
    {
      array[offset++] = SPI_MasterTransferRead(0x00);
    }

  DATAFLASH_Chip_Unselect;
     c90:	2c 9a       	sbi	0x05, 4	; 5
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	08 95       	ret

00000ca2 <dataflash_buffer_write>:

void
dataflash_buffer_write (unsigned char buffer, unsigned int offset,
                        unsigned int length, unsigned char *array)
{
     ca2:	df 92       	push	r13
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	f8 2e       	mov	r15, r24
     cb2:	8b 01       	movw	r16, r22
     cb4:	ea 01       	movw	r28, r20
     cb6:	e2 2e       	mov	r14, r18
     cb8:	d3 2e       	mov	r13, r19
  dataflash_wait();
     cba:	0e 94 d5 05 	call	0xbaa	; 0xbaa <dataflash_wait>
  DATAFLASH_Chip_Select;
     cbe:	2c 98       	cbi	0x05, 4	; 5

  switch (buffer)
     cc0:	8f 2d       	mov	r24, r15
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	39 f0       	breq	.+14     	; 0xcd4 <dataflash_buffer_write+0x32>
    {
    default:
      dataflash_opcode_and_address 
        (DATAFLASH_BUFFER_1_WRITE,
     cc6:	84 e8       	ldi	r24, 0x84	; 132
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	a8 01       	movw	r20, r16
     cce:	0e 94 b4 05 	call	0xb68	; 0xb68 <dataflash_opcode_and_address>
         0x00, offset);
      break;
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <dataflash_buffer_write+0x3e>
    
    case 2:
      dataflash_opcode_and_address 
        (DATAFLASH_BUFFER_2_WRITE,
     cd4:	87 e8       	ldi	r24, 0x87	; 135
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	a8 01       	movw	r20, r16
     cdc:	0e 94 b4 05 	call	0xb68	; 0xb68 <dataflash_opcode_and_address>
      break;
    }
  
  offset = 0x00;

  while (length--)
     ce0:	20 97       	sbiw	r28, 0x00	; 0
     ce2:	49 f0       	breq	.+18     	; 0xcf6 <dataflash_buffer_write+0x54>
     ce4:	0e 2d       	mov	r16, r14
     ce6:	1d 2d       	mov	r17, r13
    {
      SPI_MasterTransfer(array[offset++]);
     ce8:	f8 01       	movw	r30, r16
     cea:	81 91       	ld	r24, Z+
     cec:	8f 01       	movw	r16, r30
     cee:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
     cf2:	21 97       	sbiw	r28, 0x01	; 1
      break;
    }
  
  offset = 0x00;

  while (length--)
     cf4:	c9 f7       	brne	.-14     	; 0xce8 <dataflash_buffer_write+0x46>
    {
      SPI_MasterTransfer(array[offset++]);
    }

  DATAFLASH_Chip_Unselect;
     cf6:	2c 9a       	sbi	0x05, 4	; 5
}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	08 95       	ret

00000d08 <dataflash_read>:

void
dataflash_read (unsigned int page, unsigned int offset,
                unsigned int length, unsigned char *array)
{
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	8c 01       	movw	r16, r24
     d1a:	7b 01       	movw	r14, r22
     d1c:	ea 01       	movw	r28, r20
     d1e:	d2 2e       	mov	r13, r18
     d20:	c3 2e       	mov	r12, r19
  dataflash_wait();
     d22:	0e 94 d5 05 	call	0xbaa	; 0xbaa <dataflash_wait>
  DATAFLASH_Chip_Select;
     d26:	2c 98       	cbi	0x05, 4	; 5

  dataflash_opcode_and_address(DATAFLASH_CONTINUOUS_ARRAY_READ_LF, page, offset);
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	b8 01       	movw	r22, r16
     d2c:	a7 01       	movw	r20, r14
     d2e:	0e 94 b4 05 	call	0xb68	; 0xb68 <dataflash_opcode_and_address>
  
  offset = 0x00;
  
  while (length--)
     d32:	20 97       	sbiw	r28, 0x00	; 0
     d34:	51 f0       	breq	.+20     	; 0xd4a <dataflash_read+0x42>
     d36:	0d 2d       	mov	r16, r13
     d38:	1c 2d       	mov	r17, r12
    {
      array[offset++] = SPI_MasterTransferRead(0x00);
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	0e 94 47 0a 	call	0x148e	; 0x148e <SPI_MasterTransferRead>
     d40:	f8 01       	movw	r30, r16
     d42:	81 93       	st	Z+, r24
     d44:	8f 01       	movw	r16, r30
     d46:	21 97       	sbiw	r28, 0x01	; 1

  dataflash_opcode_and_address(DATAFLASH_CONTINUOUS_ARRAY_READ_LF, page, offset);
  
  offset = 0x00;
  
  while (length--)
     d48:	c1 f7       	brne	.-16     	; 0xd3a <dataflash_read+0x32>
    {
      array[offset++] = SPI_MasterTransferRead(0x00);
    }

  DATAFLASH_Chip_Unselect;
     d4a:	2c 9a       	sbi	0x05, 4	; 5
}
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	08 95       	ret

00000d5e <dataflash_chip_erase>:

void
dataflash_chip_erase (void)
{
  dataflash_wait();
     d5e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <dataflash_wait>
  DATAFLASH_Chip_Select;
     d62:	2c 98       	cbi	0x05, 4	; 5
  SPI_MasterTransfer(DATAFLASH_CHIP_ERASE_1);
     d64:	87 ec       	ldi	r24, 0xC7	; 199
     d66:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
  SPI_MasterTransfer(DATAFLASH_CHIP_ERASE_2);
     d6a:	84 e9       	ldi	r24, 0x94	; 148
     d6c:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
  SPI_MasterTransfer(DATAFLASH_CHIP_ERASE_3);
     d70:	80 e8       	ldi	r24, 0x80	; 128
     d72:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
  SPI_MasterTransfer(DATAFLASH_CHIP_ERASE_4);
     d76:	8a e9       	ldi	r24, 0x9A	; 154
     d78:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
  DATAFLASH_Chip_Unselect;
     d7c:	2c 9a       	sbi	0x05, 4	; 5
}
     d7e:	08 95       	ret

00000d80 <_fifo_get>:
  return 1;
}

static uint8_t 
_fifo_get (fifo_t* f)
{
     d80:	fc 01       	movw	r30, r24
  uint8_t* pread = f->pread;
  uint8_t data = *(pread++);
     d82:	a2 81       	ldd	r26, Z+2	; 0x02
     d84:	b3 81       	ldd	r27, Z+3	; 0x03
     d86:	8d 91       	ld	r24, X+
  uint8_t read2end = f->read2end;
     d88:	96 81       	ldd	r25, Z+6	; 0x06
  
  if (--read2end == 0)
     d8a:	91 50       	subi	r25, 0x01	; 1
     d8c:	19 f4       	brne	.+6      	; 0xd94 <_fifo_get+0x14>
    {
      read2end = f->size;
     d8e:	91 81       	ldd	r25, Z+1	; 0x01
      pread -= read2end;
     d90:	a9 1b       	sub	r26, r25
     d92:	b1 09       	sbc	r27, r1
    }
  
  f->pread = pread;
     d94:	b3 83       	std	Z+3, r27	; 0x03
     d96:	a2 83       	std	Z+2, r26	; 0x02
  f->read2end = read2end;
     d98:	96 83       	std	Z+6, r25	; 0x06
  
  uint8_t sreg = SREG;
     d9a:	9f b7       	in	r25, 0x3f	; 63
  cli();
     d9c:	f8 94       	cli
  f->count--;
     d9e:	20 81       	ld	r18, Z
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	20 83       	st	Z, r18
  SREG = sreg;
     da4:	9f bf       	out	0x3f, r25	; 63
  
  return data;
}
     da6:	08 95       	ret

00000da8 <fifo_init>:
#include "fifo.h"

static uint8_t _fifo_get (fifo_t* f);

void fifo_init (fifo_t* f, uint8_t* buffer, const uint8_t size)
{
     da8:	fc 01       	movw	r30, r24
  f->count = 0;
     daa:	10 82       	st	Z, r1
  f->pread = f->pwrite = buffer;
     dac:	75 83       	std	Z+5, r23	; 0x05
     dae:	64 83       	std	Z+4, r22	; 0x04
     db0:	73 83       	std	Z+3, r23	; 0x03
     db2:	62 83       	std	Z+2, r22	; 0x02
  f->read2end = f->write2end = f->size = size;
     db4:	41 83       	std	Z+1, r20	; 0x01
     db6:	47 83       	std	Z+7, r20	; 0x07
     db8:	46 83       	std	Z+6, r20	; 0x06
}
     dba:	08 95       	ret

00000dbc <fifo_get_wait>:

uint8_t fifo_get_wait (fifo_t* f)
{
     dbc:	fc 01       	movw	r30, r24
  while (!f->count);
     dbe:	80 81       	ld	r24, Z
     dc0:	88 23       	and	r24, r24
     dc2:	e9 f3       	breq	.-6      	; 0xdbe <fifo_get_wait+0x2>
  
  return _fifo_get(f);	
     dc4:	cf 01       	movw	r24, r30
     dc6:	0e 94 c0 06 	call	0xd80	; 0xd80 <_fifo_get>
}
     dca:	08 95       	ret

00000dcc <fifo_get_nowait>:

int16_t fifo_get_nowait (fifo_t* f)
{
  if (!f->count)
     dcc:	fc 01       	movw	r30, r24
     dce:	20 81       	ld	r18, Z
     dd0:	22 23       	and	r18, r18
     dd2:	29 f0       	breq	.+10     	; 0xdde <fifo_get_nowait+0x12>
    return -1;
    
  return (int)_fifo_get(f);	
     dd4:	0e 94 c0 06 	call	0xd80	; 0xd80 <_fifo_get>
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <fifo_get_nowait+0x16>
}

int16_t fifo_get_nowait (fifo_t* f)
{
  if (!f->count)
    return -1;
     dde:	2f ef       	ldi	r18, 0xFF	; 255
     de0:	3f ef       	ldi	r19, 0xFF	; 255
    
  return (int)_fifo_get(f);	
}
     de2:	82 2f       	mov	r24, r18
     de4:	93 2f       	mov	r25, r19
     de6:	08 95       	ret

00000de8 <fifo_put>:

uint8_t fifo_put (fifo_t* f, const uint8_t data)
{
     de8:	fc 01       	movw	r30, r24
  if (f->count >= f->size)
     dea:	90 81       	ld	r25, Z
     dec:	81 81       	ldd	r24, Z+1	; 0x01
     dee:	98 17       	cp	r25, r24
     df0:	a0 f4       	brcc	.+40     	; 0xe1a <fifo_put+0x32>
    return 0;
    
  uint8_t* pwrite = f->pwrite;
  
  *(pwrite++) = data;
     df2:	a4 81       	ldd	r26, Z+4	; 0x04
     df4:	b5 81       	ldd	r27, Z+5	; 0x05
     df6:	6d 93       	st	X+, r22
  
  uint8_t write2end = f->write2end;
     df8:	87 81       	ldd	r24, Z+7	; 0x07
  
  if (--write2end == 0)
     dfa:	81 50       	subi	r24, 0x01	; 1
     dfc:	19 f4       	brne	.+6      	; 0xe04 <fifo_put+0x1c>
    {
      write2end = f->size;
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
      pwrite -= write2end;
     e00:	a8 1b       	sub	r26, r24
     e02:	b1 09       	sbc	r27, r1
    }
  
  f->write2end = write2end;
     e04:	87 83       	std	Z+7, r24	; 0x07
  f->pwrite = pwrite;
     e06:	b5 83       	std	Z+5, r27	; 0x05
     e08:	a4 83       	std	Z+4, r26	; 0x04

  uint8_t sreg = SREG;
     e0a:	8f b7       	in	r24, 0x3f	; 63
  cli();
     e0c:	f8 94       	cli
  f->count++;
     e0e:	90 81       	ld	r25, Z
     e10:	9f 5f       	subi	r25, 0xFF	; 255
     e12:	90 83       	st	Z, r25
  SREG = sreg;
     e14:	8f bf       	out	0x3f, r24	; 63
  
  return 1;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	08 95       	ret
}

uint8_t fifo_put (fifo_t* f, const uint8_t data)
{
  if (f->count >= f->size)
    return 0;
     e1a:	80 e0       	ldi	r24, 0x00	; 0
  cli();
  f->count++;
  SREG = sreg;
  
  return 1;
}
     e1c:	08 95       	ret

00000e1e <LCD_Send>:
uint8_t lcd_texty = 0;

void
LCD_Send (uint8_t data)
{
  SPI_MasterTransfer(data);
     e1e:	0e 94 42 0a 	call	0x1484	; 0x1484 <SPI_MasterTransfer>
}
     e22:	08 95       	ret

00000e24 <LCD_Update>:
  LCD_Update();
}

void
LCD_Update (void)
{
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
  int8_t page = 7;
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
     e34:	0f b7       	in	r16, 0x3f	; 63
  cli();
     e36:	f8 94       	cli
     e38:	0f 2e       	mov	r0, r31
     e3a:	f7 e0       	ldi	r31, 0x07	; 7
     e3c:	cf 2e       	mov	r12, r31
     e3e:	dd 24       	eor	r13, r13
     e40:	f0 2d       	mov	r31, r0
          LCD_Send(LCD_COLUMN_ADDRESS_SET_L);
          
          LCD_Data_Mode;
          
          for (uint8_t x = 0; x < 128; x++)
            LCD_Send(lcd_framebuffer[page][x]);
     e42:	0f 2e       	mov	r0, r31
     e44:	f0 ed       	ldi	r31, 0xD0	; 208
     e46:	ef 2e       	mov	r14, r31
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	ff 2e       	mov	r15, r31
     e4c:	f0 2d       	mov	r31, r0
{
  int8_t page = 7;
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
  cli();
     e4e:	8c 2d       	mov	r24, r12
     e50:	e6 01       	movw	r28, r12
  
  do
    {
      if (lcd_frameupdate & (1<<page))
     e52:	20 91 b9 01 	lds	r18, 0x01B9
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	0c 2c       	mov	r0, r12
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <LCD_Update+0x3c>
     e5c:	35 95       	asr	r19
     e5e:	27 95       	ror	r18
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <LCD_Update+0x38>
     e64:	20 ff       	sbrs	r18, 0
     e66:	1e c0       	rjmp	.+60     	; 0xea4 <LCD_Update+0x80>
        {
          LCD_Chip_Select;
     e68:	46 98       	cbi	0x08, 6	; 8
          LCD_Command_Mode;
     e6a:	47 98       	cbi	0x08, 7	; 8
          
          LCD_Send(LCD_PAGE_ADDRESS_SET | page);
     e6c:	80 6b       	ori	r24, 0xB0	; 176
     e6e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
          LCD_Send(LCD_COLUMN_ADDRESS_SET_H);
     e72:	80 e1       	ldi	r24, 0x10	; 16
     e74:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
          LCD_Send(LCD_COLUMN_ADDRESS_SET_L);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
          
          LCD_Data_Mode;
     e7e:	47 9a       	sbi	0x08, 7	; 8
          
          for (uint8_t x = 0; x < 128; x++)
     e80:	10 e0       	ldi	r17, 0x00	; 0
            LCD_Send(lcd_framebuffer[page][x]);
     e82:	d6 95       	lsr	r29
     e84:	dc 2f       	mov	r29, r28
     e86:	cc 27       	eor	r28, r28
     e88:	d7 95       	ror	r29
     e8a:	c7 95       	ror	r28
     e8c:	fe 01       	movw	r30, r28
     e8e:	e1 0f       	add	r30, r17
     e90:	f1 1d       	adc	r31, r1
     e92:	ee 0d       	add	r30, r14
     e94:	ff 1d       	adc	r31, r15
     e96:	80 81       	ld	r24, Z
     e98:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
          LCD_Send(LCD_COLUMN_ADDRESS_SET_H);
          LCD_Send(LCD_COLUMN_ADDRESS_SET_L);
          
          LCD_Data_Mode;
          
          for (uint8_t x = 0; x < 128; x++)
     e9c:	1f 5f       	subi	r17, 0xFF	; 255
     e9e:	10 38       	cpi	r17, 0x80	; 128
     ea0:	a9 f7       	brne	.-22     	; 0xe8c <LCD_Update+0x68>
            LCD_Send(lcd_framebuffer[page][x]);
          
          LCD_Chip_Unselect;
     ea2:	46 9a       	sbi	0x08, 6	; 8
     ea4:	08 94       	sec
     ea6:	c1 08       	sbc	r12, r1
     ea8:	d1 08       	sbc	r13, r1
        }
    }
  while (page--);
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	c8 16       	cp	r12, r24
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	d8 06       	cpc	r13, r24
     eb2:	69 f6       	brne	.-102    	; 0xe4e <LCD_Update+0x2a>
  
  lcd_frameupdate = 0;
     eb4:	10 92 b9 01 	sts	0x01B9, r1
  
  /* Restore Status Register */
  SREG = sreg;
     eb8:	0f bf       	out	0x3f, r16	; 63
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	08 95       	ret

00000ecc <LCD_Clear>:
  dataflash_init();
}

void
LCD_Clear (void)
{
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
  uint8_t x = 0, y = 0;
  
  for (y = 0; y < 8; y++)
    for (x = 0; x < 128; x++)
      lcd_framebuffer[y][x] = 0;
     ed2:	20 ed       	ldi	r18, 0xD0	; 208
     ed4:	31 e0       	ldi	r19, 0x01	; 1
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <LCD_Clear+0x28>
     ed8:	fc 01       	movw	r30, r24
     eda:	e6 0f       	add	r30, r22
     edc:	f1 1d       	adc	r31, r1
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	10 82       	st	Z, r1
LCD_Clear (void)
{
  uint8_t x = 0, y = 0;
  
  for (y = 0; y < 8; y++)
    for (x = 0; x < 128; x++)
     ee4:	6f 5f       	subi	r22, 0xFF	; 255
     ee6:	60 38       	cpi	r22, 0x80	; 128
     ee8:	b9 f7       	brne	.-18     	; 0xed8 <LCD_Clear+0xc>
     eea:	4f 5f       	subi	r20, 0xFF	; 255
     eec:	5f 4f       	sbci	r21, 0xFF	; 255
void
LCD_Clear (void)
{
  uint8_t x = 0, y = 0;
  
  for (y = 0; y < 8; y++)
     eee:	48 30       	cpi	r20, 0x08	; 8
     ef0:	51 05       	cpc	r21, r1
     ef2:	41 f0       	breq	.+16     	; 0xf04 <LCD_Clear+0x38>
  dataflash_init();
}

void
LCD_Clear (void)
{
     ef4:	67 2f       	mov	r22, r23
  uint8_t x = 0, y = 0;
  
  for (y = 0; y < 8; y++)
    for (x = 0; x < 128; x++)
      lcd_framebuffer[y][x] = 0;
     ef6:	ca 01       	movw	r24, r20
     ef8:	96 95       	lsr	r25
     efa:	98 2f       	mov	r25, r24
     efc:	88 27       	eor	r24, r24
     efe:	97 95       	ror	r25
     f00:	87 95       	ror	r24
     f02:	ea cf       	rjmp	.-44     	; 0xed8 <LCD_Clear+0xc>
  
  // update every line (8bits height)
  lcd_frameupdate = 0xff;
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	80 93 b9 01 	sts	0x01B9, r24
  LCD_Update();
     f0a:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_Update>
}
     f0e:	08 95       	ret

00000f10 <LCD_DrawPixel>:

void
LCD_DrawPixel (uint8_t x, uint8_t y, uint8_t mode)
{
  // Check if x and y are within display coordinates
  if ((x < 128) && (y < 64))
     f10:	88 23       	and	r24, r24
     f12:	0c f4       	brge	.+2      	; 0xf16 <LCD_DrawPixel+0x6>
     f14:	4c c0       	rjmp	.+152    	; 0xfae <LCD_DrawPixel+0x9e>
     f16:	60 34       	cpi	r22, 0x40	; 64
     f18:	08 f0       	brcs	.+2      	; 0xf1c <LCD_DrawPixel+0xc>
     f1a:	49 c0       	rjmp	.+146    	; 0xfae <LCD_DrawPixel+0x9e>
    {
      // Precalculate Page and Pixel values
      uint8_t page = (y / 8);
     f1c:	56 2f       	mov	r21, r22
     f1e:	56 95       	lsr	r21
     f20:	56 95       	lsr	r21
     f22:	56 95       	lsr	r21
      uint8_t pixel = (1 << (y % 8));
     f24:	67 70       	andi	r22, 0x07	; 7
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <LCD_DrawPixel+0x1e>
     f2c:	22 0f       	add	r18, r18
     f2e:	6a 95       	dec	r22
     f30:	ea f7       	brpl	.-6      	; 0xf2c <LCD_DrawPixel+0x1c>
      
      switch (mode)
     f32:	44 23       	and	r20, r20
     f34:	19 f0       	breq	.+6      	; 0xf3c <LCD_DrawPixel+0x2c>
     f36:	42 30       	cpi	r20, 0x02	; 2
     f38:	01 f5       	brne	.+64     	; 0xf7a <LCD_DrawPixel+0x6a>
     f3a:	10 c0       	rjmp	.+32     	; 0xf5c <LCD_DrawPixel+0x4c>
        {
        case 0:
          // Clear Pixel
          lcd_framebuffer[page][x] &= ~pixel;
     f3c:	e5 2f       	mov	r30, r21
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	f6 95       	lsr	r31
     f42:	fe 2f       	mov	r31, r30
     f44:	ee 27       	eor	r30, r30
     f46:	f7 95       	ror	r31
     f48:	e7 95       	ror	r30
     f4a:	e8 0f       	add	r30, r24
     f4c:	f1 1d       	adc	r31, r1
     f4e:	e0 53       	subi	r30, 0x30	; 48
     f50:	fe 4f       	sbci	r31, 0xFE	; 254
     f52:	20 95       	com	r18
     f54:	80 81       	ld	r24, Z
     f56:	28 23       	and	r18, r24
     f58:	20 83       	st	Z, r18
          break;
     f5a:	1d c0       	rjmp	.+58     	; 0xf96 <LCD_DrawPixel+0x86>
        
        case 2:
          // Toggle Pixel
          lcd_framebuffer[page][x] ^= pixel;
     f5c:	e5 2f       	mov	r30, r21
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	f6 95       	lsr	r31
     f62:	fe 2f       	mov	r31, r30
     f64:	ee 27       	eor	r30, r30
     f66:	f7 95       	ror	r31
     f68:	e7 95       	ror	r30
     f6a:	e8 0f       	add	r30, r24
     f6c:	f1 1d       	adc	r31, r1
     f6e:	e0 53       	subi	r30, 0x30	; 48
     f70:	fe 4f       	sbci	r31, 0xFE	; 254
     f72:	80 81       	ld	r24, Z
     f74:	28 27       	eor	r18, r24
     f76:	20 83       	st	Z, r18
          break;
     f78:	0e c0       	rjmp	.+28     	; 0xf96 <LCD_DrawPixel+0x86>
        
        default:
          // Set Pixel
          lcd_framebuffer[page][x] |= pixel;
     f7a:	e5 2f       	mov	r30, r21
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	f6 95       	lsr	r31
     f80:	fe 2f       	mov	r31, r30
     f82:	ee 27       	eor	r30, r30
     f84:	f7 95       	ror	r31
     f86:	e7 95       	ror	r30
     f88:	e8 0f       	add	r30, r24
     f8a:	f1 1d       	adc	r31, r1
     f8c:	e0 53       	subi	r30, 0x30	; 48
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	80 81       	ld	r24, Z
     f92:	28 2b       	or	r18, r24
     f94:	20 83       	st	Z, r18
          break;
        }
        
      lcd_frameupdate |= (1 << page);
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <LCD_DrawPixel+0x90>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	5a 95       	dec	r21
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <LCD_DrawPixel+0x8c>
     fa4:	20 91 b9 01 	lds	r18, 0x01B9
     fa8:	82 2b       	or	r24, r18
     faa:	80 93 b9 01 	sts	0x01B9, r24
     fae:	08 95       	ret

00000fb0 <LCD_DrawLine>:
    }
}

void
LCD_DrawLine (uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t mode)
{
     fb0:	8f 92       	push	r8
     fb2:	9f 92       	push	r9
     fb4:	af 92       	push	r10
     fb6:	bf 92       	push	r11
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	18 2f       	mov	r17, r24
     fca:	f6 2e       	mov	r15, r22
     fcc:	c4 2e       	mov	r12, r20
     fce:	82 2e       	mov	r8, r18
     fd0:	d0 2e       	mov	r13, r16
  // look here: http://de.wikipedia.org/wiki/Bresenham-Algorithmus
  int8_t dx = abs(x1 - x0);
     fd2:	84 2f       	mov	r24, r20
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	81 1b       	sub	r24, r17
     fd8:	91 09       	sbc	r25, r1
     fda:	99 23       	and	r25, r25
     fdc:	1c f4       	brge	.+6      	; 0xfe4 <LCD_DrawLine+0x34>
     fde:	90 95       	com	r25
     fe0:	81 95       	neg	r24
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	b8 2e       	mov	r11, r24
  int8_t dy = abs(y1 - y0);
     fe6:	88 2d       	mov	r24, r8
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	8f 19       	sub	r24, r15
     fec:	91 09       	sbc	r25, r1
     fee:	99 23       	and	r25, r25
     ff0:	1c f4       	brge	.+6      	; 0xff8 <LCD_DrawLine+0x48>
     ff2:	90 95       	com	r25
     ff4:	81 95       	neg	r24
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	e8 2e       	mov	r14, r24
  int8_t sx = x0 < x1 ? 1 : -1;
     ffa:	1c 15       	cp	r17, r12
     ffc:	18 f4       	brcc	.+6      	; 0x1004 <LCD_DrawLine+0x54>
     ffe:	99 24       	eor	r9, r9
    1000:	93 94       	inc	r9
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <LCD_DrawLine+0x58>
    1004:	99 24       	eor	r9, r9
    1006:	9a 94       	dec	r9
  int8_t sy = y0 < y1 ? 1 : -1;
    1008:	f8 14       	cp	r15, r8
    100a:	18 f4       	brcc	.+6      	; 0x1012 <LCD_DrawLine+0x62>
    100c:	aa 24       	eor	r10, r10
    100e:	a3 94       	inc	r10
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <LCD_DrawLine+0x66>
    1012:	aa 24       	eor	r10, r10
    1014:	aa 94       	dec	r10
  int8_t err = (dx > dy ? dx : -dy) / 2;
    1016:	eb 14       	cp	r14, r11
    1018:	34 f4       	brge	.+12     	; 0x1026 <LCD_DrawLine+0x76>
    101a:	0b 2d       	mov	r16, r11
    101c:	bb 20       	and	r11, r11
    101e:	0c f4       	brge	.+2      	; 0x1022 <LCD_DrawLine+0x72>
    1020:	0f 5f       	subi	r16, 0xFF	; 255
    1022:	05 95       	asr	r16
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <LCD_DrawLine+0x94>
    1026:	8e 2d       	mov	r24, r14
    1028:	99 27       	eor	r25, r25
    102a:	87 fd       	sbrc	r24, 7
    102c:	90 95       	com	r25
    102e:	90 95       	com	r25
    1030:	81 95       	neg	r24
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	0a f4       	brpl	.+2      	; 0x1038 <LCD_DrawLine+0x88>
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	95 95       	asr	r25
    103a:	87 95       	ror	r24
    103c:	08 2f       	mov	r16, r24
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <LCD_DrawLine+0x94>
        {
          err -= dy;
          x0 += sx;
        }
      
      if (e2 < dy)
    1040:	08 2f       	mov	r16, r24
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <LCD_DrawLine+0xa2>
      if (x0 == x1 && y0 == y1)
        break;
      
      e2 = err;
      
      if (e2 > -dx)
    1044:	cb 2d       	mov	r28, r11
    1046:	dd 27       	eor	r29, r29
    1048:	c7 fd       	sbrc	r28, 7
    104a:	d0 95       	com	r29
    104c:	d0 95       	com	r29
    104e:	c1 95       	neg	r28
    1050:	df 4f       	sbci	r29, 0xFF	; 255
  int8_t err = (dx > dy ? dx : -dy) / 2;
  int8_t e2;
  
  for (;;)
    {
      LCD_DrawPixel(x0, y0, mode);
    1052:	81 2f       	mov	r24, r17
    1054:	6f 2d       	mov	r22, r15
    1056:	4d 2d       	mov	r20, r13
    1058:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
      
      if (x0 == x1 && y0 == y1)
    105c:	1c 15       	cp	r17, r12
    105e:	11 f4       	brne	.+4      	; 0x1064 <LCD_DrawLine+0xb4>
    1060:	f8 14       	cp	r15, r8
    1062:	91 f0       	breq	.+36     	; 0x1088 <LCD_DrawLine+0xd8>
        break;
      
      e2 = err;
      
      if (e2 > -dx)
    1064:	80 2f       	mov	r24, r16
    1066:	99 27       	eor	r25, r25
    1068:	87 fd       	sbrc	r24, 7
    106a:	90 95       	com	r25
    106c:	c8 17       	cp	r28, r24
    106e:	d9 07       	cpc	r29, r25
    1070:	24 f4       	brge	.+8      	; 0x107a <LCD_DrawLine+0xca>
        {
          err -= dy;
    1072:	80 2f       	mov	r24, r16
    1074:	8e 19       	sub	r24, r14
          x0 += sx;
    1076:	19 0d       	add	r17, r9
    1078:	01 c0       	rjmp	.+2      	; 0x107c <LCD_DrawLine+0xcc>
      if (x0 == x1 && y0 == y1)
        break;
      
      e2 = err;
      
      if (e2 > -dx)
    107a:	80 2f       	mov	r24, r16
        {
          err -= dy;
          x0 += sx;
        }
      
      if (e2 < dy)
    107c:	0e 15       	cp	r16, r14
    107e:	04 f7       	brge	.-64     	; 0x1040 <LCD_DrawLine+0x90>
        {
          err += dx;
    1080:	08 2f       	mov	r16, r24
    1082:	0b 0d       	add	r16, r11
          y0 += sy;
    1084:	fa 0c       	add	r15, r10
    1086:	e5 cf       	rjmp	.-54     	; 0x1052 <LCD_DrawLine+0xa2>
        }
    }
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	bf 90       	pop	r11
    109a:	af 90       	pop	r10
    109c:	9f 90       	pop	r9
    109e:	8f 90       	pop	r8
    10a0:	08 95       	ret

000010a2 <LCD_DrawCircle>:

void
LCD_DrawCircle (uint8_t x0, uint8_t y0, uint8_t radius, uint8_t mode)
{
    10a2:	7f 92       	push	r7
    10a4:	8f 92       	push	r8
    10a6:	9f 92       	push	r9
    10a8:	af 92       	push	r10
    10aa:	bf 92       	push	r11
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	d8 2e       	mov	r13, r24
    10ba:	f6 2e       	mov	r15, r22
    10bc:	74 2e       	mov	r7, r20
    10be:	12 2f       	mov	r17, r18
  // look here: http://de.wikipedia.org/wiki/Bresenham-Algorithmus
  int8_t f = 1 - radius;
  int8_t ddF_x = 0;
  int8_t ddF_y = -2 * radius;
  int8_t x = 0;
  int8_t y = radius;
    10c0:	c4 2e       	mov	r12, r20
  
  LCD_DrawPixel(x0, y0 + radius, mode);
    10c2:	64 2f       	mov	r22, r20
    10c4:	6f 0d       	add	r22, r15
    10c6:	42 2f       	mov	r20, r18
    10c8:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
  LCD_DrawPixel(x0, y0 - radius, mode);
    10cc:	6f 2d       	mov	r22, r15
    10ce:	67 19       	sub	r22, r7
    10d0:	8d 2d       	mov	r24, r13
    10d2:	41 2f       	mov	r20, r17
    10d4:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
  LCD_DrawPixel(x0 + radius, y0, mode);
    10d8:	87 2d       	mov	r24, r7
    10da:	8d 0d       	add	r24, r13
    10dc:	6f 2d       	mov	r22, r15
    10de:	41 2f       	mov	r20, r17
    10e0:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
  LCD_DrawPixel(x0 - radius, y0, mode);
    10e4:	8d 2d       	mov	r24, r13
    10e6:	87 19       	sub	r24, r7
    10e8:	6f 2d       	mov	r22, r15
    10ea:	41 2f       	mov	r20, r17
    10ec:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
  
  while (x < y)
    10f0:	17 14       	cp	r1, r7
    10f2:	0c f0       	brlt	.+2      	; 0x10f6 <LCD_DrawCircle+0x54>
    10f4:	4f c0       	rjmp	.+158    	; 0x1194 <LCD_DrawCircle+0xf2>

void
LCD_DrawCircle (uint8_t x0, uint8_t y0, uint8_t radius, uint8_t mode)
{
  // look here: http://de.wikipedia.org/wiki/Bresenham-Algorithmus
  int8_t f = 1 - radius;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	98 2e       	mov	r9, r24
    10fa:	97 18       	sub	r9, r7
  int8_t ddF_x = 0;
  int8_t ddF_y = -2 * radius;
    10fc:	71 94       	neg	r7
    10fe:	77 0c       	add	r7, r7
    1100:	0f 2e       	mov	r0, r31
    1102:	f3 e0       	ldi	r31, 0x03	; 3
    1104:	8f 2e       	mov	r8, r31
    1106:	f0 2d       	mov	r31, r0
  int8_t x = 0;
    1108:	00 e0       	ldi	r16, 0x00	; 0
  LCD_DrawPixel(x0 + radius, y0, mode);
  LCD_DrawPixel(x0 - radius, y0, mode);
  
  while (x < y)
    {
      if (f >= 0)
    110a:	99 20       	and	r9, r9
    110c:	24 f0       	brlt	.+8      	; 0x1116 <LCD_DrawCircle+0x74>
        {
          y--;
    110e:	ca 94       	dec	r12
          ddF_y += 2;
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	78 0e       	add	r7, r24
          f += ddF_y;
    1114:	97 0c       	add	r9, r7
        }
      
      x++;
    1116:	0f 5f       	subi	r16, 0xFF	; 255
        }
    }
}

void
LCD_DrawCircle (uint8_t x0, uint8_t y0, uint8_t radius, uint8_t mode)
    1118:	b0 2e       	mov	r11, r16
    111a:	bd 0c       	add	r11, r13
      
      x++;
      ddF_x += 2;
      f += ddF_x + 1;
      
      LCD_DrawPixel(x0 + x, y0 + y, mode);
    111c:	ec 2c       	mov	r14, r12
    111e:	ef 0c       	add	r14, r15
    1120:	8b 2d       	mov	r24, r11
    1122:	6e 2d       	mov	r22, r14
    1124:	41 2f       	mov	r20, r17
    1126:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
    112a:	ad 2c       	mov	r10, r13
    112c:	a0 1a       	sub	r10, r16
      LCD_DrawPixel(x0 - x, y0 + y, mode);
    112e:	8a 2d       	mov	r24, r10
    1130:	6e 2d       	mov	r22, r14
    1132:	41 2f       	mov	r20, r17
    1134:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
      LCD_DrawPixel(x0 + x, y0 - y, mode);
    1138:	ef 2c       	mov	r14, r15
    113a:	ec 18       	sub	r14, r12
    113c:	8b 2d       	mov	r24, r11
    113e:	6e 2d       	mov	r22, r14
    1140:	41 2f       	mov	r20, r17
    1142:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
      LCD_DrawPixel(x0 - x, y0 - y, mode);
    1146:	8a 2d       	mov	r24, r10
    1148:	6e 2d       	mov	r22, r14
    114a:	41 2f       	mov	r20, r17
    114c:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
      LCD_DrawPixel(x0 + y, y0 + x, mode);
    1150:	bc 2c       	mov	r11, r12
    1152:	bd 0c       	add	r11, r13
    1154:	e0 2e       	mov	r14, r16
    1156:	ef 0c       	add	r14, r15
    1158:	8b 2d       	mov	r24, r11
    115a:	6e 2d       	mov	r22, r14
    115c:	41 2f       	mov	r20, r17
    115e:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
      LCD_DrawPixel(x0 - y, y0 + x, mode);
    1162:	ad 2c       	mov	r10, r13
    1164:	ac 18       	sub	r10, r12
    1166:	8a 2d       	mov	r24, r10
    1168:	6e 2d       	mov	r22, r14
    116a:	41 2f       	mov	r20, r17
    116c:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
    1170:	ef 2c       	mov	r14, r15
    1172:	e0 1a       	sub	r14, r16
      LCD_DrawPixel(x0 + y, y0 - x, mode);
    1174:	8b 2d       	mov	r24, r11
    1176:	6e 2d       	mov	r22, r14
    1178:	41 2f       	mov	r20, r17
    117a:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
      LCD_DrawPixel(x0 - y, y0 - x, mode);
    117e:	8a 2d       	mov	r24, r10
    1180:	6e 2d       	mov	r22, r14
    1182:	41 2f       	mov	r20, r17
    1184:	0e 94 88 07 	call	0xf10	; 0xf10 <LCD_DrawPixel>
  LCD_DrawPixel(x0, y0 + radius, mode);
  LCD_DrawPixel(x0, y0 - radius, mode);
  LCD_DrawPixel(x0 + radius, y0, mode);
  LCD_DrawPixel(x0 - radius, y0, mode);
  
  while (x < y)
    1188:	0c 15       	cp	r16, r12
    118a:	24 f4       	brge	.+8      	; 0x1194 <LCD_DrawCircle+0xf2>
          f += ddF_y;
        }
      
      x++;
      ddF_x += 2;
      f += ddF_x + 1;
    118c:	98 0c       	add	r9, r8
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	88 0e       	add	r8, r24
    1192:	bb cf       	rjmp	.-138    	; 0x110a <LCD_DrawCircle+0x68>
      LCD_DrawPixel(x0 + y, y0 + x, mode);
      LCD_DrawPixel(x0 - y, y0 + x, mode);
      LCD_DrawPixel(x0 + y, y0 - x, mode);
      LCD_DrawPixel(x0 - y, y0 - x, mode);
    }
}
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	bf 90       	pop	r11
    11a2:	af 90       	pop	r10
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	7f 90       	pop	r7
    11aa:	08 95       	ret

000011ac <LCD_PutChar>:

void
LCD_PutChar (const char c)
{
  // basic support for cr und new line
  switch (c)
    11ac:	8a 30       	cpi	r24, 0x0A	; 10
    11ae:	29 f0       	breq	.+10     	; 0x11ba <LCD_PutChar+0xe>
    11b0:	8d 30       	cpi	r24, 0x0D	; 13
    11b2:	59 f4       	brne	.+22     	; 0x11ca <LCD_PutChar+0x1e>
    {
    case '\r':
      // Carriage Return
      lcd_textx = 0;
    11b4:	10 92 ba 01 	sts	0x01BA, r1
      break;
    11b8:	08 95       	ret
      
    case '\n':
      // New Line
      if (lcd_texty < 7)
    11ba:	80 91 bb 01 	lds	r24, 0x01BB
    11be:	87 30       	cpi	r24, 0x07	; 7
    11c0:	b8 f5       	brcc	.+110    	; 0x1230 <LCD_PutChar+0x84>
        lcd_texty++;
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	80 93 bb 01 	sts	0x01BB, r24
    11c8:	08 95       	ret
      break;
      
    default:
      for (uint8_t x = 0; x < 6; x++)
        lcd_framebuffer[lcd_texty][(lcd_textx * 6) + x] = pgm_read_byte(&font[(uint8_t)(c)][x]);
    11ca:	26 e0       	ldi	r18, 0x06	; 6
    11cc:	82 9f       	mul	r24, r18
    11ce:	f0 01       	movw	r30, r0
    11d0:	11 24       	eor	r1, r1
      LCD_DrawPixel(x0 - y, y0 - x, mode);
    }
}

void
LCD_PutChar (const char c)
    11d2:	e7 5d       	subi	r30, 0xD7	; 215
    11d4:	fe 4f       	sbci	r31, 0xFE	; 254
        lcd_texty++;
      break;
      
    default:
      for (uint8_t x = 0; x < 6; x++)
        lcd_framebuffer[lcd_texty][(lcd_textx * 6) + x] = pgm_read_byte(&font[(uint8_t)(c)][x]);
    11d6:	80 91 bb 01 	lds	r24, 0x01BB
    11da:	90 e0       	ldi	r25, 0x00	; 0
      LCD_DrawPixel(x0 - y, y0 - x, mode);
    }
}

void
LCD_PutChar (const char c)
    11dc:	96 95       	lsr	r25
    11de:	98 2f       	mov	r25, r24
    11e0:	88 27       	eor	r24, r24
    11e2:	97 95       	ror	r25
    11e4:	87 95       	ror	r24
        lcd_texty++;
      break;
      
    default:
      for (uint8_t x = 0; x < 6; x++)
        lcd_framebuffer[lcd_texty][(lcd_textx * 6) + x] = pgm_read_byte(&font[(uint8_t)(c)][x]);
    11e6:	a0 91 ba 01 	lds	r26, 0x01BA
    11ea:	a2 9f       	mul	r26, r18
    11ec:	d0 01       	movw	r26, r0
    11ee:	11 24       	eor	r1, r1
      LCD_DrawPixel(x0 - y, y0 - x, mode);
    }
}

void
LCD_PutChar (const char c)
    11f0:	a8 0f       	add	r26, r24
    11f2:	b9 1f       	adc	r27, r25
    11f4:	a0 53       	subi	r26, 0x30	; 48
    11f6:	be 4f       	sbci	r27, 0xFE	; 254
    11f8:	80 e0       	ldi	r24, 0x00	; 0
        lcd_texty++;
      break;
      
    default:
      for (uint8_t x = 0; x < 6; x++)
        lcd_framebuffer[lcd_texty][(lcd_textx * 6) + x] = pgm_read_byte(&font[(uint8_t)(c)][x]);
    11fa:	94 91       	lpm	r25, Z+
    11fc:	9d 93       	st	X+, r25
      if (lcd_texty < 7)
        lcd_texty++;
      break;
      
    default:
      for (uint8_t x = 0; x < 6; x++)
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	31 96       	adiw	r30, 0x01	; 1
    1202:	86 30       	cpi	r24, 0x06	; 6
    1204:	d1 f7       	brne	.-12     	; 0x11fa <LCD_PutChar+0x4e>
        lcd_framebuffer[lcd_texty][(lcd_textx * 6) + x] = pgm_read_byte(&font[(uint8_t)(c)][x]);
      
      lcd_frameupdate |= (1 << lcd_texty);
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	00 90 bb 01 	lds	r0, 0x01BB
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <LCD_PutChar+0x68>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <LCD_PutChar+0x64>
    1218:	20 91 b9 01 	lds	r18, 0x01B9
    121c:	82 2b       	or	r24, r18
    121e:	80 93 b9 01 	sts	0x01B9, r24
  
      if (lcd_textx < 20)
    1222:	80 91 ba 01 	lds	r24, 0x01BA
    1226:	84 31       	cpi	r24, 0x14	; 20
    1228:	18 f4       	brcc	.+6      	; 0x1230 <LCD_PutChar+0x84>
        lcd_textx++;
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	80 93 ba 01 	sts	0x01BA, r24
    1230:	08 95       	ret

00001232 <LCD_PutString>:
    }
}

void
LCD_PutString (const char *s)
{
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	ec 01       	movw	r28, r24
  // no empty strings allowed!
  if (*s)
    1238:	88 81       	ld	r24, Y
    123a:	88 23       	and	r24, r24
    123c:	31 f0       	breq	.+12     	; 0x124a <LCD_PutString+0x18>
    {
      do
        {
          LCD_PutChar(*s);
    123e:	89 91       	ld	r24, Y+
    1240:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_PutChar>
        }
      while (*(++s));
    1244:	88 81       	ld	r24, Y
    1246:	88 23       	and	r24, r24
    1248:	d1 f7       	brne	.-12     	; 0x123e <LCD_PutString+0xc>
    }
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <LCD_PutString_P>:

void
LCD_PutString_P (PGM_P s)
{
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	fc 01       	movw	r30, r24
  while(1)
    {
      unsigned char c = pgm_read_byte (s);
    1256:	84 91       	lpm	r24, Z+
      s++;

      if (c == '\0')
    1258:	88 23       	and	r24, r24
    125a:	49 f0       	breq	.+18     	; 0x126e <LCD_PutString_P+0x1e>
LCD_PutString_P (PGM_P s)
{
  while(1)
    {
      unsigned char c = pgm_read_byte (s);
      s++;
    125c:	ef 01       	movw	r28, r30
    125e:	21 96       	adiw	r28, 0x01	; 1

      if (c == '\0')
        break;
      
      LCD_PutChar(c);
    1260:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_PutChar>
void
LCD_PutString_P (PGM_P s)
{
  while(1)
    {
      unsigned char c = pgm_read_byte (s);
    1264:	fe 01       	movw	r30, r28
    1266:	84 91       	lpm	r24, Z+
      s++;
    1268:	21 96       	adiw	r28, 0x01	; 1

      if (c == '\0')
    126a:	88 23       	and	r24, r24
    126c:	c9 f7       	brne	.-14     	; 0x1260 <LCD_PutString_P+0x10>
        break;
      
      LCD_PutChar(c);
    }
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <LCD_GotoXY>:

void
LCD_GotoXY (uint8_t x, uint8_t y)
{
  lcd_textx = x;
    1274:	80 93 ba 01 	sts	0x01BA, r24
  lcd_texty = y;
    1278:	60 93 bb 01 	sts	0x01BB, r22
}
    127c:	08 95       	ret

0000127e <LCD_WipeLine>:
void
LCD_WipeLine (unsigned char line)
{
  unsigned char x;
  
  for (x = 0; x < 128; x++)
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    lcd_framebuffer[line][x] = 0x00;
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	60 ed       	ldi	r22, 0xD0	; 208
    1284:	71 e0       	ldi	r23, 0x01	; 1
    1286:	ac 01       	movw	r20, r24
    1288:	56 95       	lsr	r21
    128a:	54 2f       	mov	r21, r20
    128c:	44 27       	eor	r20, r20
    128e:	57 95       	ror	r21
    1290:	47 95       	ror	r20
    1292:	9c 01       	movw	r18, r24
    1294:	fa 01       	movw	r30, r20
    1296:	ea 0f       	add	r30, r26
    1298:	f1 1d       	adc	r31, r1
    129a:	e6 0f       	add	r30, r22
    129c:	f7 1f       	adc	r31, r23
    129e:	10 82       	st	Z, r1
void
LCD_WipeLine (unsigned char line)
{
  unsigned char x;
  
  for (x = 0; x < 128; x++)
    12a0:	af 5f       	subi	r26, 0xFF	; 255
    12a2:	a0 38       	cpi	r26, 0x80	; 128
    12a4:	b1 f7       	brne	.-20     	; 0x1292 <LCD_WipeLine+0x14>
    lcd_framebuffer[line][x] = 0x00;
  
  lcd_frameupdate |= (1 << line);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <LCD_WipeLine+0x32>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	2a 95       	dec	r18
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <LCD_WipeLine+0x2e>
    12b4:	20 91 b9 01 	lds	r18, 0x01B9
    12b8:	82 2b       	or	r24, r18
    12ba:	80 93 b9 01 	sts	0x01B9, r24
}
    12be:	08 95       	ret

000012c0 <Backlight_Off>:

void
Backlight_Off (void)
{
  TWI_Start();
    12c0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <TWI_Start>
  TWI_Address_RW(0xc4);
    12c4:	84 ec       	ldi	r24, 0xC4	; 196
    12c6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TWI_Address_RW>
  TWI_Write(0x11);
    12ca:	81 e1       	ldi	r24, 0x11	; 17
    12cc:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Write(0x00);
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Write(0x00);
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Write(0x00);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Write(0x00);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Write(0x00);
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Stop();
    12ee:	0e 94 bf 0a 	call	0x157e	; 0x157e <TWI_Stop>
}
    12f2:	08 95       	ret

000012f4 <LCD_Init>:
  SPI_MasterTransfer(data);
}

void
LCD_Init (void)
{
    12f4:	1f 93       	push	r17
  SPI_MasterInit();
    12f6:	0e 94 30 0a 	call	0x1460	; 0x1460 <SPI_MasterInit>

  /* Set Register Select and Chip Select as Output */
  DDRC |= (1<<PC7)|(1<<PC6);
    12fa:	87 b1       	in	r24, 0x07	; 7
    12fc:	80 6c       	ori	r24, 0xC0	; 192
    12fe:	87 b9       	out	0x07, r24	; 7
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
    1300:	1f b7       	in	r17, 0x3f	; 63
  cli();
    1302:	f8 94       	cli
  
  /* Starting Init Command Sequence */
  LCD_Command_Mode;
    1304:	47 98       	cbi	0x08, 7	; 8
  LCD_Chip_Select;
    1306:	46 98       	cbi	0x08, 6	; 8

  LCD_Send(LCD_RESET);
    1308:	82 ee       	ldi	r24, 0xE2	; 226
    130a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
  LCD_Send(LCD_BIAS_1_7);
    130e:	83 ea       	ldi	r24, 0xA3	; 163
    1310:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
  LCD_Send(LCD_ELECTRONIC_VOLUME_MODE_SET);
    1314:	81 e8       	ldi	r24, 0x81	; 129
    1316:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
  LCD_Send(0x08);
    131a:	88 e0       	ldi	r24, 0x08	; 8
    131c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
  LCD_Send(LCD_ADC_SELECT_NORMAL);
    1320:	80 ea       	ldi	r24, 0xA0	; 160
    1322:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
  LCD_Send(LCD_COMMON_OUTPUT_MODE_REVERSE);
    1326:	88 ec       	ldi	r24, 0xC8	; 200
    1328:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
  LCD_Send(LCD_V5_VOLTAGE_REGULATOR | 0x05);
    132c:	85 e2       	ldi	r24, 0x25	; 37
    132e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
  LCD_Send(LCD_POWER_CONTROLLER_SET | 0x07);
    1332:	8f e2       	ldi	r24, 0x2F	; 47
    1334:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
  LCD_Send(LCD_DISPLAY_ON);
    1338:	8f ea       	ldi	r24, 0xAF	; 175
    133a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <LCD_Send>
  
  LCD_Chip_Unselect;
    133e:	46 9a       	sbi	0x08, 6	; 8
  LCD_Data_Mode;
    1340:	47 9a       	sbi	0x08, 7	; 8
  
  LCD_Clear();
    1342:	0e 94 66 07 	call	0xecc	; 0xecc <LCD_Clear>
  
  /* Restore Status Register */
  SREG = sreg;
    1346:	1f bf       	out	0x3f, r17	; 63
  
  // Initialize TWI for Backlight Control
  TWI_Init();
    1348:	0e 94 4d 0a 	call	0x149a	; 0x149a <TWI_Init>
  Backlight_Off();
    134c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Backlight_Off>
  
  // Initialize Dataflash
  dataflash_init();
    1350:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <dataflash_init>
}
    1354:	1f 91       	pop	r17
    1356:	08 95       	ret

00001358 <Backlight_LED>:
  TWI_Stop();
}

void
Backlight_LED (uint8_t led_selector)
{
    1358:	1f 93       	push	r17
    135a:	18 2f       	mov	r17, r24
  TWI_Start();
    135c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <TWI_Start>
  TWI_Address_RW(0xc4);
    1360:	84 ec       	ldi	r24, 0xC4	; 196
    1362:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TWI_Address_RW>
  TWI_Write(0x15);
    1366:	85 e1       	ldi	r24, 0x15	; 21
    1368:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Write(led_selector);
    136c:	81 2f       	mov	r24, r17
    136e:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Stop();
    1372:	0e 94 bf 0a 	call	0x157e	; 0x157e <TWI_Stop>
}
    1376:	1f 91       	pop	r17
    1378:	08 95       	ret

0000137a <Backlight_PWM>:

void
Backlight_PWM (uint8_t pwm, uint8_t prescaler, uint8_t value)
{
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	f8 2e       	mov	r15, r24
    1382:	06 2f       	mov	r16, r22
    1384:	14 2f       	mov	r17, r20
  TWI_Start();
    1386:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <TWI_Start>
  TWI_Address_RW(0xc4);
    138a:	84 ec       	ldi	r24, 0xC4	; 196
    138c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TWI_Address_RW>
  
  if (pwm)
    1390:	ff 20       	and	r15, r15
    1392:	21 f0       	breq	.+8      	; 0x139c <Backlight_PWM+0x22>
    TWI_Write(0x13);
    1394:	83 e1       	ldi	r24, 0x13	; 19
    1396:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <Backlight_PWM+0x28>
  else
    TWI_Write(0x11);
    139c:	81 e1       	ldi	r24, 0x11	; 17
    139e:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>

  TWI_Write(prescaler);
    13a2:	80 2f       	mov	r24, r16
    13a4:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Write(value);
    13a8:	81 2f       	mov	r24, r17
    13aa:	0e 94 9f 0a 	call	0x153e	; 0x153e <TWI_Write>
  TWI_Stop();
    13ae:	0e 94 bf 0a 	call	0x157e	; 0x157e <TWI_Stop>
}
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	08 95       	ret

000013ba <LCD_SavePage>:

void
LCD_SavePage (unsigned int page)
{
    13ba:	ef 92       	push	r14
    13bc:	ff 92       	push	r15
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	8c 01       	movw	r16, r24
    13c8:	c0 ed       	ldi	r28, 0xD0	; 208
    13ca:	d1 e0       	ldi	r29, 0x01	; 1
  TWI_Write(value);
  TWI_Stop();
}

void
LCD_SavePage (unsigned int page)
    13cc:	0f 2e       	mov	r0, r31
    13ce:	f0 ed       	ldi	r31, 0xD0	; 208
    13d0:	ef 2e       	mov	r14, r31
    13d2:	f5 e0       	ldi	r31, 0x05	; 5
    13d4:	ff 2e       	mov	r15, r31
    13d6:	f0 2d       	mov	r31, r0
  // transfer framebuffer to dataflash using buffer 2
  unsigned char line = 0;
  
  for (line = 0; line < 8; line++)
    {
      dataflash_buffer_write(2, 0, 128, lcd_framebuffer[line]);
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	40 e8       	ldi	r20, 0x80	; 128
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	9e 01       	movw	r18, r28
    13e4:	0e 94 51 06 	call	0xca2	; 0xca2 <dataflash_buffer_write>
      dataflash_buffer_to_page(page + line, 2);
    13e8:	c8 01       	movw	r24, r16
    13ea:	62 e0       	ldi	r22, 0x02	; 2
    13ec:	0e 94 e5 05 	call	0xbca	; 0xbca <dataflash_buffer_to_page>
    13f0:	c0 58       	subi	r28, 0x80	; 128
    13f2:	df 4f       	sbci	r29, 0xFF	; 255
    13f4:	0f 5f       	subi	r16, 0xFF	; 255
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
LCD_SavePage (unsigned int page)
{
  // transfer framebuffer to dataflash using buffer 2
  unsigned char line = 0;
  
  for (line = 0; line < 8; line++)
    13f8:	ce 15       	cp	r28, r14
    13fa:	df 05       	cpc	r29, r15
    13fc:	69 f7       	brne	.-38     	; 0x13d8 <LCD_SavePage+0x1e>
    {
      dataflash_buffer_write(2, 0, 128, lcd_framebuffer[line]);
      dataflash_buffer_to_page(page + line, 2);
    }
}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	08 95       	ret

0000140c <LCD_LoadPage>:

void
LCD_LoadPage (unsigned int page)
{
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	8c 01       	movw	r16, r24
    141a:	c0 ed       	ldi	r28, 0xD0	; 208
    141c:	d1 e0       	ldi	r29, 0x01	; 1
      dataflash_buffer_to_page(page + line, 2);
    }
}

void
LCD_LoadPage (unsigned int page)
    141e:	0f 2e       	mov	r0, r31
    1420:	f0 ed       	ldi	r31, 0xD0	; 208
    1422:	ef 2e       	mov	r14, r31
    1424:	f5 e0       	ldi	r31, 0x05	; 5
    1426:	ff 2e       	mov	r15, r31
    1428:	f0 2d       	mov	r31, r0
  // transfer dataflash page to framebuffer
  unsigned char line = 0;

  for (line = 0; line < 8; line++)
    {
      dataflash_read(page + line, 0, 128, lcd_framebuffer[line]);
    142a:	c8 01       	movw	r24, r16
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	9e 01       	movw	r18, r28
    1436:	0e 94 84 06 	call	0xd08	; 0xd08 <dataflash_read>
    143a:	0f 5f       	subi	r16, 0xFF	; 255
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	c0 58       	subi	r28, 0x80	; 128
    1440:	df 4f       	sbci	r29, 0xFF	; 255
LCD_LoadPage (unsigned int page)
{
  // transfer dataflash page to framebuffer
  unsigned char line = 0;

  for (line = 0; line < 8; line++)
    1442:	ce 15       	cp	r28, r14
    1444:	df 05       	cpc	r29, r15
    1446:	89 f7       	brne	.-30     	; 0x142a <LCD_LoadPage+0x1e>
    {
      dataflash_read(page + line, 0, 128, lcd_framebuffer[line]);
    }

  // mark all lines to be updated
  lcd_frameupdate = 0xff;
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	80 93 b9 01 	sts	0x01B9, r24
  LCD_Update();
    144e:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_Update>
}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	08 95       	ret

00001460 <SPI_MasterInit>:

void
SPI_MasterInit (void)
{
  /* Check if already initialized */
  if (!(SPI_flag & 1))
    1460:	80 91 bc 01 	lds	r24, 0x01BC
    1464:	80 fd       	sbrc	r24, 0
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <SPI_MasterInit+0x22>
    {
      /* Set MOSI and SCK output */
      DDRB |= (1<<PB5)|(1<<PB7);
    1468:	84 b1       	in	r24, 0x04	; 4
    146a:	80 6a       	ori	r24, 0xA0	; 160
    146c:	84 b9       	out	0x04, r24	; 4
      
      /* Enable SPI, Master */
      SPCR = (1<<SPE)|(1<<MSTR);
    146e:	80 e5       	ldi	r24, 0x50	; 80
    1470:	8c bd       	out	0x2c, r24	; 44
      
      /* Set Double SPI Speed Bit, SPI clock will be fck/2 */
      SPSR = (1<<SPI2X);
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	8d bd       	out	0x2d, r24	; 45
      
      /* Set SPI Init Flag */
      SPI_flag = 1;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	90 93 bd 01 	sts	0x01BD, r25
    147e:	80 93 bc 01 	sts	0x01BC, r24
    1482:	08 95       	ret

00001484 <SPI_MasterTransfer>:

void
SPI_MasterTransfer (unsigned char c)
{
  /* Start transmission */
  SPDR = c;
    1484:	8e bd       	out	0x2e, r24	; 46
  
  /* Wait for transmission complete */
  while (!(SPSR & (1<<SPIF)));
    1486:	0d b4       	in	r0, 0x2d	; 45
    1488:	07 fe       	sbrs	r0, 7
    148a:	fd cf       	rjmp	.-6      	; 0x1486 <SPI_MasterTransfer+0x2>
}
    148c:	08 95       	ret

0000148e <SPI_MasterTransferRead>:

unsigned char
SPI_MasterTransferRead (unsigned char c)
{
  /* Start transmission */
  SPDR = c;
    148e:	8e bd       	out	0x2e, r24	; 46
  
  /* Wait for transmission complete */
  while (!(SPSR & (1<<SPIF)));
    1490:	0d b4       	in	r0, 0x2d	; 45
    1492:	07 fe       	sbrs	r0, 7
    1494:	fd cf       	rjmp	.-6      	; 0x1490 <SPI_MasterTransferRead+0x2>
  
  /* Return incoming character */
  return SPDR;
    1496:	8e b5       	in	r24, 0x2e	; 46
}
    1498:	08 95       	ret

0000149a <TWI_Init>:

void
TWI_Init (void)
{
  // Port Setup
  DDRC &= ~((1 << PC0)|(1 << PC1));
    149a:	87 b1       	in	r24, 0x07	; 7
    149c:	8c 7f       	andi	r24, 0xFC	; 252
    149e:	87 b9       	out	0x07, r24	; 7
  PORTC |= (1 << PC0)|(1 << PC1);
    14a0:	88 b1       	in	r24, 0x08	; 8
    14a2:	83 60       	ori	r24, 0x03	; 3
    14a4:	88 b9       	out	0x08, r24	; 8
  
  // Setup TWI Speed to 400kHZ (TWPS = 1)
  TWBR = 3;
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	80 93 b8 00 	sts	0x00B8, r24
  
  // Using TIMER2 to detect timeout
  TCCR2B = (7 << CS20);
    14ac:	87 e0       	ldi	r24, 0x07	; 7
    14ae:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = (1 << OCIE2A);
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	80 93 70 00 	sts	0x0070, r24
  
  OCR2A = 125;
    14b8:	8d e7       	ldi	r24, 0x7D	; 125
    14ba:	80 93 b3 00 	sts	0x00B3, r24
  
  // Interrupts REQUIRED!
  sei();
    14be:	78 94       	sei
}
    14c0:	08 95       	ret

000014c2 <TWI_Start>:

int16_t
TWI_Start (void)
{
  twi_timeout = 10;
    14c2:	8a e0       	ldi	r24, 0x0A	; 10
    14c4:	80 93 be 01 	sts	0x01BE, r24
  
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
    14c8:	84 ea       	ldi	r24, 0xA4	; 164
    14ca:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    14ce:	ec eb       	ldi	r30, 0xBC	; 188
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 91 be 01 	lds	r24, 0x01BE
    14d6:	88 23       	and	r24, r24
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <TWI_Start+0x1e>
    14da:	80 81       	ld	r24, Z
    14dc:	88 23       	and	r24, r24
    14de:	cc f7       	brge	.-14     	; 0x14d2 <TWI_Start+0x10>
  
  if (twi_timeout)
    14e0:	80 91 be 01 	lds	r24, 0x01BE
    14e4:	88 23       	and	r24, r24
    14e6:	31 f0       	breq	.+12     	; 0x14f4 <TWI_Start+0x32>
    return (int16_t) (TWSR & 0xf8);
    14e8:	20 91 b9 00 	lds	r18, 0x00B9
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	28 7f       	andi	r18, 0xF8	; 248
    14f0:	30 70       	andi	r19, 0x00	; 0
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <TWI_Start+0x36>
  else
    return -1;
    14f4:	2f ef       	ldi	r18, 0xFF	; 255
    14f6:	3f ef       	ldi	r19, 0xFF	; 255
}
    14f8:	82 2f       	mov	r24, r18
    14fa:	93 2f       	mov	r25, r19
    14fc:	08 95       	ret

000014fe <TWI_Address_RW>:

int16_t
TWI_Address_RW (uint8_t address)
{
  twi_timeout = 10;
    14fe:	9a e0       	ldi	r25, 0x0A	; 10
    1500:	90 93 be 01 	sts	0x01BE, r25
  
  TWDR = address;
    1504:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
    1508:	84 e8       	ldi	r24, 0x84	; 132
    150a:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    150e:	ec eb       	ldi	r30, 0xBC	; 188
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 91 be 01 	lds	r24, 0x01BE
    1516:	88 23       	and	r24, r24
    1518:	19 f0       	breq	.+6      	; 0x1520 <TWI_Address_RW+0x22>
    151a:	80 81       	ld	r24, Z
    151c:	88 23       	and	r24, r24
    151e:	cc f7       	brge	.-14     	; 0x1512 <TWI_Address_RW+0x14>
  
  if (twi_timeout)
    1520:	80 91 be 01 	lds	r24, 0x01BE
    1524:	88 23       	and	r24, r24
    1526:	31 f0       	breq	.+12     	; 0x1534 <TWI_Address_RW+0x36>
    return (int16_t) (TWSR & 0xf8);
    1528:	20 91 b9 00 	lds	r18, 0x00B9
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	28 7f       	andi	r18, 0xF8	; 248
    1530:	30 70       	andi	r19, 0x00	; 0
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <TWI_Address_RW+0x3a>
  else
    return -1;
    1534:	2f ef       	ldi	r18, 0xFF	; 255
    1536:	3f ef       	ldi	r19, 0xFF	; 255
}
    1538:	82 2f       	mov	r24, r18
    153a:	93 2f       	mov	r25, r19
    153c:	08 95       	ret

0000153e <TWI_Write>:

int16_t
TWI_Write (uint8_t data)
{
  twi_timeout = 10;
    153e:	9a e0       	ldi	r25, 0x0A	; 10
    1540:	90 93 be 01 	sts	0x01BE, r25
  
  TWDR = data;
    1544:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
    1548:	84 e8       	ldi	r24, 0x84	; 132
    154a:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    154e:	ec eb       	ldi	r30, 0xBC	; 188
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 91 be 01 	lds	r24, 0x01BE
    1556:	88 23       	and	r24, r24
    1558:	19 f0       	breq	.+6      	; 0x1560 <TWI_Write+0x22>
    155a:	80 81       	ld	r24, Z
    155c:	88 23       	and	r24, r24
    155e:	cc f7       	brge	.-14     	; 0x1552 <TWI_Write+0x14>
  
  if (twi_timeout)
    1560:	80 91 be 01 	lds	r24, 0x01BE
    1564:	88 23       	and	r24, r24
    1566:	31 f0       	breq	.+12     	; 0x1574 <TWI_Write+0x36>
    return (int16_t) (TWSR & 0xf8);
    1568:	20 91 b9 00 	lds	r18, 0x00B9
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	28 7f       	andi	r18, 0xF8	; 248
    1570:	30 70       	andi	r19, 0x00	; 0
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <TWI_Write+0x3a>
  else
    return -1;
    1574:	2f ef       	ldi	r18, 0xFF	; 255
    1576:	3f ef       	ldi	r19, 0xFF	; 255
}
    1578:	82 2f       	mov	r24, r18
    157a:	93 2f       	mov	r25, r19
    157c:	08 95       	ret

0000157e <TWI_Stop>:

void
TWI_Stop (void)
{
  twi_timeout = 10;
    157e:	8a e0       	ldi	r24, 0x0A	; 10
    1580:	80 93 be 01 	sts	0x01BE, r24
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
    1584:	84 e9       	ldi	r24, 0x94	; 148
    1586:	80 93 bc 00 	sts	0x00BC, r24
}
    158a:	08 95       	ret

0000158c <__vector_9>:

// ISR will be called every 8ms to decrease twi_timeout if > 0
ISR (TIMER2_COMPA_vect)
{
    158c:	1f 92       	push	r1
    158e:	0f 92       	push	r0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	0f 92       	push	r0
    1594:	0b b6       	in	r0, 0x3b	; 59
    1596:	0f 92       	push	r0
    1598:	11 24       	eor	r1, r1
    159a:	8f 93       	push	r24
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
  OCR2A += 125;
    15a0:	e3 eb       	ldi	r30, 0xB3	; 179
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	83 58       	subi	r24, 0x83	; 131
    15a8:	80 83       	st	Z, r24

  if (twi_timeout)
    15aa:	80 91 be 01 	lds	r24, 0x01BE
    15ae:	88 23       	and	r24, r24
    15b0:	29 f0       	breq	.+10     	; 0x15bc <__vector_9+0x30>
    twi_timeout--;
    15b2:	80 91 be 01 	lds	r24, 0x01BE
    15b6:	81 50       	subi	r24, 0x01	; 1
    15b8:	80 93 be 01 	sts	0x01BE, r24
}
    15bc:	ff 91       	pop	r31
    15be:	ef 91       	pop	r30
    15c0:	8f 91       	pop	r24
    15c2:	0f 90       	pop	r0
    15c4:	0b be       	out	0x3b, r0	; 59
    15c6:	0f 90       	pop	r0
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	0f 90       	pop	r0
    15cc:	1f 90       	pop	r1
    15ce:	18 95       	reti

000015d0 <__vector_20>:
volatile uint8_t data_frame_in[DATA_FRAME_LENGTH];
const uint8_t device_address = 3;
volatile uint8_t data_ok = 0;

ISR(USART0__RX_vect)
{
    15d0:	1f 92       	push	r1
    15d2:	0f 92       	push	r0
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	0f 92       	push	r0
    15d8:	0b b6       	in	r0, 0x3b	; 59
    15da:	0f 92       	push	r0
    15dc:	11 24       	eor	r1, r1
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	ef 93       	push	r30
    15e4:	ff 93       	push	r31
	char udr_buffer = UDR0;
    15e6:	80 91 c6 00 	lds	r24, 0x00C6
	static uint8_t uart_rx_cnt = 0;
	static uint8_t address = 0;
	static uint8_t checksum = 0;
	static uint8_t checksum_in = 0;
	if(udr_buffer != 13) //CR
    15ea:	8d 30       	cpi	r24, 0x0D	; 13
    15ec:	21 f1       	breq	.+72     	; 0x1636 <__vector_20+0x66>
	{
		if(uart_rx_cnt == 1)
    15ee:	e0 91 cb 01 	lds	r30, 0x01CB
    15f2:	e1 30       	cpi	r30, 0x01	; 1
    15f4:	19 f4       	brne	.+6      	; 0x15fc <__vector_20+0x2c>
		{
			address = udr_buffer;
    15f6:	80 93 ca 01 	sts	0x01CA, r24
    15fa:	17 c0       	rjmp	.+46     	; 0x162a <__vector_20+0x5a>
		}
		else if(uart_rx_cnt >= 2 && uart_rx_cnt < DATA_FRAME_LENGTH + NUMBER_OF_START_BYTES && address == device_address)
    15fc:	9e 2f       	mov	r25, r30
    15fe:	92 50       	subi	r25, 0x02	; 2
    1600:	90 3a       	cpi	r25, 0xA0	; 160
    1602:	78 f4       	brcc	.+30     	; 0x1622 <__vector_20+0x52>
    1604:	90 91 ca 01 	lds	r25, 0x01CA
    1608:	93 30       	cpi	r25, 0x03	; 3
    160a:	59 f4       	brne	.+22     	; 0x1622 <__vector_20+0x52>
		{
			data_frame_in[uart_rx_cnt-NUMBER_OF_START_BYTES] = udr_buffer;
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	e2 53       	subi	r30, 0x32	; 50
    1610:	fa 4f       	sbci	r31, 0xFA	; 250
    1612:	80 83       	st	Z, r24
			checksum ^= data_frame_in[uart_rx_cnt-NUMBER_OF_START_BYTES];
    1614:	80 81       	ld	r24, Z
    1616:	90 91 c9 01 	lds	r25, 0x01C9
    161a:	89 27       	eor	r24, r25
    161c:	80 93 c9 01 	sts	0x01C9, r24
    1620:	04 c0       	rjmp	.+8      	; 0x162a <__vector_20+0x5a>
		}
		else if(uart_rx_cnt == DATA_FRAME_LENGTH + NUMBER_OF_START_BYTES)
    1622:	e2 3a       	cpi	r30, 0xA2	; 162
    1624:	11 f4       	brne	.+4      	; 0x162a <__vector_20+0x5a>
		{
			checksum_in = udr_buffer;
    1626:	80 93 c8 01 	sts	0x01C8, r24
		}
		uart_rx_cnt++;
    162a:	80 91 cb 01 	lds	r24, 0x01CB
    162e:	8f 5f       	subi	r24, 0xFF	; 255
    1630:	80 93 cb 01 	sts	0x01CB, r24
    1634:	12 c0       	rjmp	.+36     	; 0x165a <__vector_20+0x8a>
	}
	else //CR received
	{
		if(checksum == checksum_in)
    1636:	90 91 c9 01 	lds	r25, 0x01C9
    163a:	80 91 c8 01 	lds	r24, 0x01C8
    163e:	98 17       	cp	r25, r24
    1640:	19 f4       	brne	.+6      	; 0x1648 <__vector_20+0x78>
		{
			data_ok = 1;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	80 93 bf 01 	sts	0x01BF, r24
		}
		uart_rx_cnt = 0;
    1648:	10 92 cb 01 	sts	0x01CB, r1
		address = 0;
    164c:	10 92 ca 01 	sts	0x01CA, r1
		checksum_in = 0xBB;
    1650:	8b eb       	ldi	r24, 0xBB	; 187
    1652:	80 93 c8 01 	sts	0x01C8, r24
		checksum = 0;
    1656:	10 92 c9 01 	sts	0x01C9, r1
	}
}
    165a:	ff 91       	pop	r31
    165c:	ef 91       	pop	r30
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	0f 90       	pop	r0
    1664:	0b be       	out	0x3b, r0	; 59
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <__vector_22>:


ISR(USART0__TX_vect)
{
    1670:	1f 92       	push	r1
    1672:	0f 92       	push	r0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	0f 92       	push	r0
    1678:	0b b6       	in	r0, 0x3b	; 59
    167a:	0f 92       	push	r0
    167c:	11 24       	eor	r1, r1
    167e:	2f 93       	push	r18
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	ef 93       	push	r30
    1686:	ff 93       	push	r31
	static uint8_t checksum = 0;
	static uint8_t byte_cnt = 0;
	if(byte_cnt < DATA_FRAME_LENGTH)
    1688:	80 91 c6 01 	lds	r24, 0x01C6
    168c:	80 3a       	cpi	r24, 0xA0	; 160
    168e:	88 f4       	brcc	.+34     	; 0x16b2 <__vector_22+0x42>
	{
		UDR0 = (data_frame_out[byte_cnt]);
    1690:	e2 e1       	ldi	r30, 0x12	; 18
    1692:	f1 e0       	ldi	r31, 0x01	; 1
    1694:	e8 0f       	add	r30, r24
    1696:	f1 1d       	adc	r31, r1
    1698:	90 81       	ld	r25, Z
    169a:	90 93 c6 00 	sts	0x00C6, r25
		checksum ^= data_frame_out[byte_cnt];
    169e:	90 81       	ld	r25, Z
    16a0:	20 91 c7 01 	lds	r18, 0x01C7
    16a4:	92 27       	eor	r25, r18
    16a6:	90 93 c7 01 	sts	0x01C7, r25
		byte_cnt++;
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	80 93 c6 01 	sts	0x01C6, r24
    16b0:	19 c0       	rjmp	.+50     	; 0x16e4 <__vector_22+0x74>
	}
	else if(byte_cnt == DATA_FRAME_LENGTH)
    16b2:	80 3a       	cpi	r24, 0xA0	; 160
    16b4:	41 f4       	brne	.+16     	; 0x16c6 <__vector_22+0x56>
	{
		UDR0 = checksum;
    16b6:	80 91 c7 01 	lds	r24, 0x01C7
    16ba:	80 93 c6 00 	sts	0x00C6, r24
		byte_cnt++;
    16be:	81 ea       	ldi	r24, 0xA1	; 161
    16c0:	80 93 c6 01 	sts	0x01C6, r24
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <__vector_22+0x74>
	}
	else if(byte_cnt == DATA_FRAME_LENGTH + 1)
    16c6:	81 3a       	cpi	r24, 0xA1	; 161
    16c8:	39 f4       	brne	.+14     	; 0x16d8 <__vector_22+0x68>
	{
		UDR0 = 13;
    16ca:	8d e0       	ldi	r24, 0x0D	; 13
    16cc:	80 93 c6 00 	sts	0x00C6, r24
		byte_cnt++;
    16d0:	82 ea       	ldi	r24, 0xA2	; 162
    16d2:	80 93 c6 01 	sts	0x01C6, r24
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <__vector_22+0x74>
	}
	else
	{
		checksum = 0;
    16d8:	10 92 c7 01 	sts	0x01C7, r1
		byte_cnt = 0;
    16dc:	10 92 c6 01 	sts	0x01C6, r1
		data_ok = 0;
    16e0:	10 92 bf 01 	sts	0x01BF, r1
	}
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	9f 91       	pop	r25
    16ea:	8f 91       	pop	r24
    16ec:	2f 91       	pop	r18
    16ee:	0f 90       	pop	r0
    16f0:	0b be       	out	0x3b, r0	; 59
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	0f 90       	pop	r0
    16f8:	1f 90       	pop	r1
    16fa:	18 95       	reti

000016fc <__vector_28>:

ISR(USART1_RX_vect)
{
    16fc:	1f 92       	push	r1
    16fe:	0f 92       	push	r0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	0f 92       	push	r0
    1704:	0b b6       	in	r0, 0x3b	; 59
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
char udr_buffer = UDR1;
    1712:	80 91 ce 00 	lds	r24, 0x00CE
static uint8_t uart_rx_cnt = 0;
static uint8_t address = 0;
static uint8_t checksum = 0;
static uint8_t checksum_in = 0;
if(udr_buffer != 13) //CR
    1716:	8d 30       	cpi	r24, 0x0D	; 13
    1718:	21 f1       	breq	.+72     	; 0x1762 <__vector_28+0x66>
{
	if(uart_rx_cnt == 1)
    171a:	e0 91 c5 01 	lds	r30, 0x01C5
    171e:	e1 30       	cpi	r30, 0x01	; 1
    1720:	19 f4       	brne	.+6      	; 0x1728 <__vector_28+0x2c>
	{
		address = udr_buffer;
    1722:	80 93 c4 01 	sts	0x01C4, r24
    1726:	17 c0       	rjmp	.+46     	; 0x1756 <__vector_28+0x5a>
	}
	else if(uart_rx_cnt >= 2 && uart_rx_cnt < DATA_FRAME_LENGTH + NUMBER_OF_START_BYTES && address == device_address)
    1728:	9e 2f       	mov	r25, r30
    172a:	92 50       	subi	r25, 0x02	; 2
    172c:	90 3a       	cpi	r25, 0xA0	; 160
    172e:	78 f4       	brcc	.+30     	; 0x174e <__vector_28+0x52>
    1730:	90 91 c4 01 	lds	r25, 0x01C4
    1734:	93 30       	cpi	r25, 0x03	; 3
    1736:	59 f4       	brne	.+22     	; 0x174e <__vector_28+0x52>
	{
		data_frame_in[uart_rx_cnt-NUMBER_OF_START_BYTES] = udr_buffer;
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	e2 53       	subi	r30, 0x32	; 50
    173c:	fa 4f       	sbci	r31, 0xFA	; 250
    173e:	80 83       	st	Z, r24
		checksum ^= data_frame_in[uart_rx_cnt-NUMBER_OF_START_BYTES];
    1740:	80 81       	ld	r24, Z
    1742:	90 91 c3 01 	lds	r25, 0x01C3
    1746:	89 27       	eor	r24, r25
    1748:	80 93 c3 01 	sts	0x01C3, r24
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <__vector_28+0x5a>
	}
	else if(uart_rx_cnt == DATA_FRAME_LENGTH + NUMBER_OF_START_BYTES)
    174e:	e2 3a       	cpi	r30, 0xA2	; 162
    1750:	11 f4       	brne	.+4      	; 0x1756 <__vector_28+0x5a>
	{
		checksum_in = udr_buffer;
    1752:	80 93 c2 01 	sts	0x01C2, r24
	}
	uart_rx_cnt++;
    1756:	80 91 c5 01 	lds	r24, 0x01C5
    175a:	8f 5f       	subi	r24, 0xFF	; 255
    175c:	80 93 c5 01 	sts	0x01C5, r24
    1760:	12 c0       	rjmp	.+36     	; 0x1786 <__vector_28+0x8a>
}
else //CR received
{
	if(checksum == checksum_in)
    1762:	90 91 c3 01 	lds	r25, 0x01C3
    1766:	80 91 c2 01 	lds	r24, 0x01C2
    176a:	98 17       	cp	r25, r24
    176c:	19 f4       	brne	.+6      	; 0x1774 <__vector_28+0x78>
	{
		data_ok = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	80 93 bf 01 	sts	0x01BF, r24
	}
	uart_rx_cnt = 0;
    1774:	10 92 c5 01 	sts	0x01C5, r1
	address = 0;
    1778:	10 92 c4 01 	sts	0x01C4, r1
	checksum_in = 0xBB;
    177c:	8b eb       	ldi	r24, 0xBB	; 187
    177e:	80 93 c2 01 	sts	0x01C2, r24
	checksum = 0;
    1782:	10 92 c3 01 	sts	0x01C3, r1
}
}
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	0f 90       	pop	r0
    1790:	0b be       	out	0x3b, r0	; 59
    1792:	0f 90       	pop	r0
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	0f 90       	pop	r0
    1798:	1f 90       	pop	r1
    179a:	18 95       	reti

0000179c <__vector_30>:


ISR(USART1_TX_vect)
{
    179c:	1f 92       	push	r1
    179e:	0f 92       	push	r0
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	0f 92       	push	r0
    17a4:	0b b6       	in	r0, 0x3b	; 59
    17a6:	0f 92       	push	r0
    17a8:	11 24       	eor	r1, r1
    17aa:	2f 93       	push	r18
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
	static uint8_t checksum = 0;
	static uint8_t byte_cnt = 0;
	if(byte_cnt < DATA_FRAME_LENGTH)
    17b4:	80 91 c0 01 	lds	r24, 0x01C0
    17b8:	80 3a       	cpi	r24, 0xA0	; 160
    17ba:	88 f4       	brcc	.+34     	; 0x17de <__vector_30+0x42>
	{
		UDR1 = (data_frame_out[byte_cnt]);
    17bc:	e2 e1       	ldi	r30, 0x12	; 18
    17be:	f1 e0       	ldi	r31, 0x01	; 1
    17c0:	e8 0f       	add	r30, r24
    17c2:	f1 1d       	adc	r31, r1
    17c4:	90 81       	ld	r25, Z
    17c6:	90 93 ce 00 	sts	0x00CE, r25
		checksum ^= data_frame_out[byte_cnt];
    17ca:	90 81       	ld	r25, Z
    17cc:	20 91 c1 01 	lds	r18, 0x01C1
    17d0:	92 27       	eor	r25, r18
    17d2:	90 93 c1 01 	sts	0x01C1, r25
		byte_cnt++;
    17d6:	8f 5f       	subi	r24, 0xFF	; 255
    17d8:	80 93 c0 01 	sts	0x01C0, r24
    17dc:	19 c0       	rjmp	.+50     	; 0x1810 <__vector_30+0x74>
	}
	else if(byte_cnt == DATA_FRAME_LENGTH)
    17de:	80 3a       	cpi	r24, 0xA0	; 160
    17e0:	41 f4       	brne	.+16     	; 0x17f2 <__vector_30+0x56>
	{
		UDR1 = checksum;
    17e2:	80 91 c1 01 	lds	r24, 0x01C1
    17e6:	80 93 ce 00 	sts	0x00CE, r24
		byte_cnt++;
    17ea:	81 ea       	ldi	r24, 0xA1	; 161
    17ec:	80 93 c0 01 	sts	0x01C0, r24
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <__vector_30+0x74>
	}
	else if(byte_cnt == DATA_FRAME_LENGTH + 1)
    17f2:	81 3a       	cpi	r24, 0xA1	; 161
    17f4:	39 f4       	brne	.+14     	; 0x1804 <__vector_30+0x68>
	{
		UDR1 = 13;
    17f6:	8d e0       	ldi	r24, 0x0D	; 13
    17f8:	80 93 ce 00 	sts	0x00CE, r24
		byte_cnt++;
    17fc:	82 ea       	ldi	r24, 0xA2	; 162
    17fe:	80 93 c0 01 	sts	0x01C0, r24
    1802:	06 c0       	rjmp	.+12     	; 0x1810 <__vector_30+0x74>
	}
	else
	{
		checksum = 0;
    1804:	10 92 c1 01 	sts	0x01C1, r1
		byte_cnt = 0;
    1808:	10 92 c0 01 	sts	0x01C0, r1
		data_ok = 0;
    180c:	10 92 bf 01 	sts	0x01BF, r1
	}
}
    1810:	ff 91       	pop	r31
    1812:	ef 91       	pop	r30
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	2f 91       	pop	r18
    181a:	0f 90       	pop	r0
    181c:	0b be       	out	0x3b, r0	; 59
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	0f 90       	pop	r0
    1824:	1f 90       	pop	r1
    1826:	18 95       	reti

00001828 <uart_init0>:
	return 1;
}

void uart_init0 ()
{
	UCSR0A |= (0<<U2X0) | (0<<MPCM0);
    1828:	e0 ec       	ldi	r30, 0xC0	; 192
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 83       	st	Z, r24
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
    1830:	88 ed       	ldi	r24, 0xD8	; 216
    1832:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<< UCSZ01) | (1<< UCSZ00) | (0<< UCPOL0);
    1836:	86 e0       	ldi	r24, 0x06	; 6
    1838:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = 0;
    183c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_VALUE; //9600 = 103 16 MHz
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	80 93 c4 00 	sts	0x00C4, r24
	
}
    1846:	08 95       	ret

00001848 <uart_init1>:

void uart_init1 ()
{
	UCSR1A |= (0<<U2X1) | (0<<MPCM1);
    1848:	e8 ec       	ldi	r30, 0xC8	; 200
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	80 83       	st	Z, r24
	UCSR1B = (1<<RXCIE1) | (1<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
    1850:	88 ed       	ldi	r24, 0xD8	; 216
    1852:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (0<<UMSEL11) | (0<<UMSEL10) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<< UCSZ11) | (1<< UCSZ10) | (0<< UCPOL1);
    1856:	86 e0       	ldi	r24, 0x06	; 6
    1858:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1H = 0;
    185c:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = BAUD_VALUE; //9600 = 103 16 MHz
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	80 93 cc 00 	sts	0x00CC, r24
	
}
    1866:	08 95       	ret

00001868 <get_num_from_ascii>:

uint16_t get_num_from_ascii(char* in)
{
    1868:	dc 01       	movw	r26, r24
		if(in[i] != 0)
		{
			digcnt++;
		}
	}
	uint16_t num = 0;
    186a:	fc 01       	movw	r30, r24
	UBRR1L = BAUD_VALUE; //9600 = 103 16 MHz
	
}

uint16_t get_num_from_ascii(char* in)
{
    186c:	86 e0       	ldi	r24, 0x06	; 6
	uint8_t digcnt = 0;
    186e:	20 e0       	ldi	r18, 0x00	; 0
	for(uint8_t i=0; i<6;i++)
	{
		if(in[i] != 0)
    1870:	91 91       	ld	r25, Z+
    1872:	91 11       	cpse	r25, r1
		{
			digcnt++;
    1874:	2f 5f       	subi	r18, 0xFF	; 255
    1876:	81 50       	subi	r24, 0x01	; 1
}

uint16_t get_num_from_ascii(char* in)
{
	uint8_t digcnt = 0;
	for(uint8_t i=0; i<6;i++)
    1878:	d9 f7       	brne	.-10     	; 0x1870 <get_num_from_ascii+0x8>
		{
			digcnt++;
		}
	}
	uint16_t num = 0;
	switch (digcnt)
    187a:	23 30       	cpi	r18, 0x03	; 3
    187c:	01 f1       	breq	.+64     	; 0x18be <get_num_from_ascii+0x56>
    187e:	24 30       	cpi	r18, 0x04	; 4
    1880:	30 f4       	brcc	.+12     	; 0x188e <get_num_from_ascii+0x26>
    1882:	21 30       	cpi	r18, 0x01	; 1
    1884:	51 f0       	breq	.+20     	; 0x189a <get_num_from_ascii+0x32>
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	09 f0       	breq	.+2      	; 0x188c <get_num_from_ascii+0x24>
    188a:	8e c0       	rjmp	.+284    	; 0x19a8 <get_num_from_ascii+0x140>
    188c:	0b c0       	rjmp	.+22     	; 0x18a4 <get_num_from_ascii+0x3c>
    188e:	24 30       	cpi	r18, 0x04	; 4
    1890:	61 f1       	breq	.+88     	; 0x18ea <get_num_from_ascii+0x82>
    1892:	25 30       	cpi	r18, 0x05	; 5
    1894:	09 f0       	breq	.+2      	; 0x1898 <get_num_from_ascii+0x30>
    1896:	88 c0       	rjmp	.+272    	; 0x19a8 <get_num_from_ascii+0x140>
    1898:	4f c0       	rjmp	.+158    	; 0x1938 <get_num_from_ascii+0xd0>
	{
		case 1: num = in[0] - 48;
    189a:	2c 91       	ld	r18, X
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	20 53       	subi	r18, 0x30	; 48
    18a0:	30 40       	sbci	r19, 0x00	; 0
		break;
    18a2:	84 c0       	rjmp	.+264    	; 0x19ac <get_num_from_ascii+0x144>
		case 2: num = in[1] - 48;
    18a4:	11 96       	adiw	r26, 0x01	; 1
    18a6:	8c 91       	ld	r24, X
    18a8:	11 97       	sbiw	r26, 0x01	; 1
				num = num+((in[0]-48)*10);
    18aa:	2c 91       	ld	r18, X
    18ac:	9a e0       	ldi	r25, 0x0A	; 10
    18ae:	29 9f       	mul	r18, r25
    18b0:	90 01       	movw	r18, r0
    18b2:	11 24       	eor	r1, r1
    18b4:	28 0f       	add	r18, r24
    18b6:	31 1d       	adc	r19, r1
    18b8:	20 51       	subi	r18, 0x10	; 16
    18ba:	32 40       	sbci	r19, 0x02	; 2
		break;
    18bc:	77 c0       	rjmp	.+238    	; 0x19ac <get_num_from_ascii+0x144>
		case 3: num = in[2] - 48;
				num = num+((in[1]-48)*10);
				num = num+((in[0]-48)*100);
    18be:	2c 91       	ld	r18, X
    18c0:	84 e6       	ldi	r24, 0x64	; 100
    18c2:	28 9f       	mul	r18, r24
    18c4:	90 01       	movw	r18, r0
    18c6:	11 24       	eor	r1, r1
		case 1: num = in[0] - 48;
		break;
		case 2: num = in[1] - 48;
				num = num+((in[0]-48)*10);
		break;
		case 3: num = in[2] - 48;
    18c8:	12 96       	adiw	r26, 0x02	; 2
    18ca:	8c 91       	ld	r24, X
    18cc:	12 97       	sbiw	r26, 0x02	; 2
    18ce:	28 0f       	add	r18, r24
    18d0:	31 1d       	adc	r19, r1
				num = num+((in[1]-48)*10);
				num = num+((in[0]-48)*100);
    18d2:	20 5d       	subi	r18, 0xD0	; 208
    18d4:	34 41       	sbci	r19, 0x14	; 20
		break;
		case 2: num = in[1] - 48;
				num = num+((in[0]-48)*10);
		break;
		case 3: num = in[2] - 48;
				num = num+((in[1]-48)*10);
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	9c 91       	ld	r25, X
    18da:	11 97       	sbiw	r26, 0x01	; 1
    18dc:	8a e0       	ldi	r24, 0x0A	; 10
    18de:	98 9f       	mul	r25, r24
    18e0:	c0 01       	movw	r24, r0
    18e2:	11 24       	eor	r1, r1
				num = num+((in[0]-48)*100);
    18e4:	28 0f       	add	r18, r24
    18e6:	39 1f       	adc	r19, r25
		break;
    18e8:	61 c0       	rjmp	.+194    	; 0x19ac <get_num_from_ascii+0x144>
		case 4: num = in[3] - 48;
    18ea:	13 96       	adiw	r26, 0x03	; 3
    18ec:	8c 91       	ld	r24, X
    18ee:	13 97       	sbiw	r26, 0x03	; 3
				num = num+((in[2]-48)*10);
    18f0:	12 96       	adiw	r26, 0x02	; 2
    18f2:	2c 91       	ld	r18, X
    18f4:	12 97       	sbiw	r26, 0x02	; 2
    18f6:	9a e0       	ldi	r25, 0x0A	; 10
    18f8:	29 9f       	mul	r18, r25
    18fa:	90 01       	movw	r18, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	28 0f       	add	r18, r24
    1900:	31 1d       	adc	r19, r1
				num = num+((in[1]-48)*100);
    1902:	20 5d       	subi	r18, 0xD0	; 208
    1904:	34 41       	sbci	r19, 0x14	; 20
    1906:	11 96       	adiw	r26, 0x01	; 1
    1908:	9c 91       	ld	r25, X
    190a:	11 97       	sbiw	r26, 0x01	; 1
    190c:	84 e6       	ldi	r24, 0x64	; 100
    190e:	98 9f       	mul	r25, r24
    1910:	c0 01       	movw	r24, r0
    1912:	11 24       	eor	r1, r1
    1914:	28 0f       	add	r18, r24
    1916:	39 1f       	adc	r19, r25
				num = num+((in[0]-48)*1000);
    1918:	6c 91       	ld	r22, X
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	60 53       	subi	r22, 0x30	; 48
    191e:	70 40       	sbci	r23, 0x00	; 0
    1920:	48 ee       	ldi	r20, 0xE8	; 232
    1922:	53 e0       	ldi	r21, 0x03	; 3
    1924:	64 9f       	mul	r22, r20
    1926:	c0 01       	movw	r24, r0
    1928:	65 9f       	mul	r22, r21
    192a:	90 0d       	add	r25, r0
    192c:	74 9f       	mul	r23, r20
    192e:	90 0d       	add	r25, r0
    1930:	11 24       	eor	r1, r1
    1932:	28 0f       	add	r18, r24
    1934:	39 1f       	adc	r19, r25
		
		break;
    1936:	3a c0       	rjmp	.+116    	; 0x19ac <get_num_from_ascii+0x144>
		case 5: num = in[4] - 48;
    1938:	14 96       	adiw	r26, 0x04	; 4
    193a:	8c 91       	ld	r24, X
    193c:	14 97       	sbiw	r26, 0x04	; 4
				num = num+((in[3]-48)*10);
    193e:	13 96       	adiw	r26, 0x03	; 3
    1940:	2c 91       	ld	r18, X
    1942:	13 97       	sbiw	r26, 0x03	; 3
    1944:	9a e0       	ldi	r25, 0x0A	; 10
    1946:	29 9f       	mul	r18, r25
    1948:	90 01       	movw	r18, r0
    194a:	11 24       	eor	r1, r1
    194c:	28 0f       	add	r18, r24
    194e:	31 1d       	adc	r19, r1
				num = num+((in[2]-48)*100);
    1950:	20 5d       	subi	r18, 0xD0	; 208
    1952:	34 41       	sbci	r19, 0x14	; 20
    1954:	12 96       	adiw	r26, 0x02	; 2
    1956:	9c 91       	ld	r25, X
    1958:	12 97       	sbiw	r26, 0x02	; 2
    195a:	84 e6       	ldi	r24, 0x64	; 100
    195c:	98 9f       	mul	r25, r24
    195e:	c0 01       	movw	r24, r0
    1960:	11 24       	eor	r1, r1
    1962:	28 0f       	add	r18, r24
    1964:	39 1f       	adc	r19, r25
				num = num+((in[1]-48)*1000);
				num = num+((in[0]-48)*10000);
    1966:	6c 91       	ld	r22, X
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	60 53       	subi	r22, 0x30	; 48
    196c:	70 40       	sbci	r23, 0x00	; 0
    196e:	40 e1       	ldi	r20, 0x10	; 16
    1970:	57 e2       	ldi	r21, 0x27	; 39
    1972:	64 9f       	mul	r22, r20
    1974:	c0 01       	movw	r24, r0
    1976:	65 9f       	mul	r22, r21
    1978:	90 0d       	add	r25, r0
    197a:	74 9f       	mul	r23, r20
    197c:	90 0d       	add	r25, r0
    197e:	11 24       	eor	r1, r1
		
		break;
		case 5: num = in[4] - 48;
				num = num+((in[3]-48)*10);
				num = num+((in[2]-48)*100);
				num = num+((in[1]-48)*1000);
    1980:	28 0f       	add	r18, r24
    1982:	39 1f       	adc	r19, r25
    1984:	11 96       	adiw	r26, 0x01	; 1
    1986:	6c 91       	ld	r22, X
    1988:	11 97       	sbiw	r26, 0x01	; 1
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	60 53       	subi	r22, 0x30	; 48
    198e:	70 40       	sbci	r23, 0x00	; 0
    1990:	48 ee       	ldi	r20, 0xE8	; 232
    1992:	53 e0       	ldi	r21, 0x03	; 3
    1994:	64 9f       	mul	r22, r20
    1996:	c0 01       	movw	r24, r0
    1998:	65 9f       	mul	r22, r21
    199a:	90 0d       	add	r25, r0
    199c:	74 9f       	mul	r23, r20
    199e:	90 0d       	add	r25, r0
    19a0:	11 24       	eor	r1, r1
				num = num+((in[0]-48)*10000);
    19a2:	28 0f       	add	r18, r24
    19a4:	39 1f       	adc	r19, r25
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <get_num_from_ascii+0x144>
		if(in[i] != 0)
		{
			digcnt++;
		}
	}
	uint16_t num = 0;
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
				num = num+((in[2]-48)*100);
				num = num+((in[1]-48)*1000);
				num = num+((in[0]-48)*10000);
	}		
	return num;
}
    19ac:	82 2f       	mov	r24, r18
    19ae:	93 2f       	mov	r25, r19
    19b0:	08 95       	ret

000019b2 <get_h_from_ascii>:

uint8_t get_h_from_ascii(char* in)
{
    19b2:	fc 01       	movw	r30, r24
	uint8_t h = in[1] - 48;
	h = h+((in[0]-48)*10);
    19b4:	80 81       	ld	r24, Z
    19b6:	88 0f       	add	r24, r24
    19b8:	98 2f       	mov	r25, r24
    19ba:	99 0f       	add	r25, r25
    19bc:	99 0f       	add	r25, r25
    19be:	89 0f       	add	r24, r25
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	89 0f       	add	r24, r25
	return h;
}
    19c4:	80 51       	subi	r24, 0x10	; 16
    19c6:	08 95       	ret

000019c8 <get_min_from_ascii>:

uint8_t get_min_from_ascii(char* in)
{
    19c8:	fc 01       	movw	r30, r24
	uint8_t min = in[3] - 48;
	min = min+((in[2]-48)*10);
    19ca:	83 81       	ldd	r24, Z+3	; 0x03
    19cc:	80 51       	subi	r24, 0x10	; 16
    19ce:	92 81       	ldd	r25, Z+2	; 0x02
    19d0:	99 0f       	add	r25, r25
    19d2:	29 2f       	mov	r18, r25
    19d4:	22 0f       	add	r18, r18
    19d6:	22 0f       	add	r18, r18
    19d8:	92 0f       	add	r25, r18
	return min;
}
    19da:	89 0f       	add	r24, r25
    19dc:	08 95       	ret

000019de <uart_tx_byte>:


void uart_tx_byte(unsigned char c)
{
	while (!(UCSR0A & (1<<UDRE0)))  /* warten bis Senden moeglich */
    19de:	e0 ec       	ldi	r30, 0xC0	; 192
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	90 81       	ld	r25, Z
    19e4:	95 ff       	sbrs	r25, 5
    19e6:	fd cf       	rjmp	.-6      	; 0x19e2 <uart_tx_byte+0x4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    19e8:	f8 94       	cli
	{
	}
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		UDR0 = c;
    19ea:	80 93 c6 00 	sts	0x00C6, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    19ee:	78 94       	sei
	}
}
    19f0:	08 95       	ret

000019f2 <uart0_tx_frame>:
		data_ok = 0;
	}
}
uint8_t uart0_tx_frame()
{
	uart_tx_byte(PREAMBLE);
    19f2:	8a ea       	ldi	r24, 0xAA	; 170
    19f4:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	uart_tx_byte(device_address);
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	return 1;
}
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	08 95       	ret

00001a02 <uart1_tx_byte>:
	}
}

void uart1_tx_byte(unsigned char c)
{
	while (!(UCSR1A & (1<<UDRE1)))  /* warten bis Senden moeglich */
    1a02:	e8 ec       	ldi	r30, 0xC8	; 200
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	90 81       	ld	r25, Z
    1a08:	95 ff       	sbrs	r25, 5
    1a0a:	fd cf       	rjmp	.-6      	; 0x1a06 <uart1_tx_byte+0x4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a0c:	f8 94       	cli
	{
	}
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		UDR1 = c;
    1a0e:	80 93 ce 00 	sts	0x00CE, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1a12:	78 94       	sei
	}
}
    1a14:	08 95       	ret

00001a16 <uart1_tx_frame>:
}


uint8_t uart1_tx_frame()
{
	uart1_tx_byte(PREAMBLE);
    1a16:	8a ea       	ldi	r24, 0xAA	; 170
    1a18:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <uart1_tx_byte>
	uart1_tx_byte(device_address);
    1a1c:	83 e0       	ldi	r24, 0x03	; 3
    1a1e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <uart1_tx_byte>
	return 1;
}
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	08 95       	ret

00001a26 <uart_tx_string>:
		UDR1 = c;
	}
}

uint8_t uart_tx_string(char* string) 
{
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	ec 01       	movw	r28, r24
	uint8_t cnt = 0;
	while(*string) 
    1a2e:	88 81       	ld	r24, Y
    1a30:	88 23       	and	r24, r24
    1a32:	49 f0       	breq	.+18     	; 0x1a46 <uart_tx_string+0x20>
	{
		UDR1 = c;
	}
}

uint8_t uart_tx_string(char* string) 
    1a34:	21 96       	adiw	r28, 0x01	; 1
{
	uint8_t cnt = 0;
    1a36:	10 e0       	ldi	r17, 0x00	; 0
	while(*string) 
	{
		uart_tx_byte(*string);
    1a38:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
		string++;
		cnt++;
    1a3c:	1f 5f       	subi	r17, 0xFF	; 255
}

uint8_t uart_tx_string(char* string) 
{
	uint8_t cnt = 0;
	while(*string) 
    1a3e:	89 91       	ld	r24, Y+
    1a40:	88 23       	and	r24, r24
    1a42:	d1 f7       	brne	.-12     	; 0x1a38 <uart_tx_string+0x12>
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <uart_tx_string+0x22>
	}
}

uint8_t uart_tx_string(char* string) 
{
	uint8_t cnt = 0;
    1a46:	10 e0       	ldi	r17, 0x00	; 0
		uart_tx_byte(*string);
		string++;
		cnt++;
	}
	return cnt;
}
    1a48:	81 2f       	mov	r24, r17
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	08 95       	ret

00001a52 <uart_tx_command>:

void uart_tx_command(uint16_t com)
{
    1a52:	1f 93       	push	r17
    1a54:	19 2f       	mov	r17, r25
	uart_tx_byte(com);
    1a56:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	com >>= 8;
	uart_tx_byte(com);
    1a5a:	81 2f       	mov	r24, r17
    1a5c:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
}
    1a60:	1f 91       	pop	r17
    1a62:	08 95       	ret

00001a64 <uart_tx_hex8>:


void uart_tx_hex8(uint8_t data)
{	
    1a64:	1f 93       	push	r17
    1a66:	18 2f       	mov	r17, r24
	uint8_t buf = data;
	uart_tx_byte('0');
    1a68:	80 e3       	ldi	r24, 0x30	; 48
    1a6a:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	uart_tx_byte('x');
    1a6e:	88 e7       	ldi	r24, 0x78	; 120
    1a70:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	buf = data >> 4;
    1a74:	81 2f       	mov	r24, r17
    1a76:	82 95       	swap	r24
    1a78:	8f 70       	andi	r24, 0x0F	; 15
	if(buf < 10)
    1a7a:	8a 30       	cpi	r24, 0x0A	; 10
    1a7c:	20 f4       	brcc	.+8      	; 0x1a86 <uart_tx_hex8+0x22>
	{
		uart_tx_byte(48+buf);
    1a7e:	80 5d       	subi	r24, 0xD0	; 208
    1a80:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
    1a84:	03 c0       	rjmp	.+6      	; 0x1a8c <uart_tx_hex8+0x28>
	}
	else
	{
		uart_tx_byte(65+(buf-10));
    1a86:	89 5c       	subi	r24, 0xC9	; 201
    1a88:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	}
	buf = data & 0b00001111;
    1a8c:	81 2f       	mov	r24, r17
    1a8e:	8f 70       	andi	r24, 0x0F	; 15
	if(buf < 10)
    1a90:	8a 30       	cpi	r24, 0x0A	; 10
    1a92:	20 f4       	brcc	.+8      	; 0x1a9c <uart_tx_hex8+0x38>
	{
		uart_tx_byte(48+buf);
    1a94:	80 5d       	subi	r24, 0xD0	; 208
    1a96:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
    1a9a:	03 c0       	rjmp	.+6      	; 0x1aa2 <uart_tx_hex8+0x3e>
	}
	else
	{
		uart_tx_byte(65+(buf-10));
    1a9c:	89 5c       	subi	r24, 0xC9	; 201
    1a9e:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	}
}
    1aa2:	1f 91       	pop	r17
    1aa4:	08 95       	ret

00001aa6 <uart_tx_hex16>:

void uart_tx_hex16(uint16_t data)
{	
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
	uint16_t buf = data;
	uart_tx_byte('0');
    1aac:	80 e3       	ldi	r24, 0x30	; 48
    1aae:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	uart_tx_byte('x');
    1ab2:	88 e7       	ldi	r24, 0x78	; 120
    1ab4:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	buf = (uint16_t)data >> 12;
    1ab8:	ce 01       	movw	r24, r28
    1aba:	89 2f       	mov	r24, r25
    1abc:	99 27       	eor	r25, r25
    1abe:	82 95       	swap	r24
    1ac0:	8f 70       	andi	r24, 0x0F	; 15
	if(buf < 10)
    1ac2:	8a 30       	cpi	r24, 0x0A	; 10
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	20 f4       	brcc	.+8      	; 0x1ad0 <uart_tx_hex16+0x2a>
	{
		uart_tx_byte(48+buf);
    1ac8:	80 5d       	subi	r24, 0xD0	; 208
    1aca:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
    1ace:	03 c0       	rjmp	.+6      	; 0x1ad6 <uart_tx_hex16+0x30>
	}
	else
	{
		uart_tx_byte(65+(buf-10));
    1ad0:	89 5c       	subi	r24, 0xC9	; 201
    1ad2:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	}

	buf = (uint16_t)data >> 8;
    1ad6:	8d 2f       	mov	r24, r29
    1ad8:	99 27       	eor	r25, r25
	buf = buf & 0x000F;
    1ada:	8f 70       	andi	r24, 0x0F	; 15
    1adc:	90 70       	andi	r25, 0x00	; 0
	if(buf < 10)
    1ade:	8a 30       	cpi	r24, 0x0A	; 10
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	20 f4       	brcc	.+8      	; 0x1aec <uart_tx_hex16+0x46>
	{
		uart_tx_byte(48+buf);
    1ae4:	80 5d       	subi	r24, 0xD0	; 208
    1ae6:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <uart_tx_hex16+0x4c>
	}
	else
	{
		uart_tx_byte(65+(buf-10));
    1aec:	89 5c       	subi	r24, 0xC9	; 201
    1aee:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	}

	buf = (uint16_t)data >> 4;
    1af2:	ce 01       	movw	r24, r28
    1af4:	92 95       	swap	r25
    1af6:	82 95       	swap	r24
    1af8:	8f 70       	andi	r24, 0x0F	; 15
    1afa:	89 27       	eor	r24, r25
    1afc:	9f 70       	andi	r25, 0x0F	; 15
    1afe:	89 27       	eor	r24, r25
	buf = buf & 0x000F;
    1b00:	8f 70       	andi	r24, 0x0F	; 15
    1b02:	90 70       	andi	r25, 0x00	; 0
	if(buf < 10)
    1b04:	8a 30       	cpi	r24, 0x0A	; 10
    1b06:	91 05       	cpc	r25, r1
    1b08:	20 f4       	brcc	.+8      	; 0x1b12 <uart_tx_hex16+0x6c>
	{
		uart_tx_byte(48+buf);
    1b0a:	80 5d       	subi	r24, 0xD0	; 208
    1b0c:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
    1b10:	03 c0       	rjmp	.+6      	; 0x1b18 <uart_tx_hex16+0x72>
	}
	else
	{
		uart_tx_byte(65+(buf-10));
    1b12:	89 5c       	subi	r24, 0xC9	; 201
    1b14:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	}

	buf = (uint16_t)data;
	buf = buf & 0x000F;
    1b18:	ce 01       	movw	r24, r28
    1b1a:	8f 70       	andi	r24, 0x0F	; 15
    1b1c:	90 70       	andi	r25, 0x00	; 0
	if(buf < 10)
    1b1e:	8a 30       	cpi	r24, 0x0A	; 10
    1b20:	91 05       	cpc	r25, r1
    1b22:	20 f4       	brcc	.+8      	; 0x1b2c <uart_tx_hex16+0x86>
	{
		uart_tx_byte(48+buf);
    1b24:	80 5d       	subi	r24, 0xD0	; 208
    1b26:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <uart_tx_hex16+0x8c>
	}
	else
	{
		uart_tx_byte(65+(buf-10));
    1b2c:	89 5c       	subi	r24, 0xC9	; 201
    1b2e:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	}
}
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret

00001b38 <uart_tx_num16>:


void uart_tx_num16(uint16_t number)
{
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	ec 01       	movw	r28, r24
	uint8_t digit1 = 0;
	uint8_t digit2 = 0;
	uint8_t digit3 = 0;
	uint8_t digit4 = 0;
    while (number >= 10000) 
    1b44:	27 e2       	ldi	r18, 0x27	; 39
    1b46:	80 31       	cpi	r24, 0x10	; 16
    1b48:	92 07       	cpc	r25, r18
    1b4a:	48 f0       	brcs	.+18     	; 0x1b5e <uart_tx_num16+0x26>
}


void uart_tx_num16(uint16_t number)
{
	uint8_t digit1 = 0;
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t digit2 = 0;
	uint8_t digit3 = 0;
	uint8_t digit4 = 0;
    while (number >= 10000) 
	{
        digit1++;
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
        number -= 10000;
    1b50:	c0 51       	subi	r28, 0x10	; 16
    1b52:	d7 42       	sbci	r29, 0x27	; 39
{
	uint8_t digit1 = 0;
	uint8_t digit2 = 0;
	uint8_t digit3 = 0;
	uint8_t digit4 = 0;
    while (number >= 10000) 
    1b54:	37 e2       	ldi	r19, 0x27	; 39
    1b56:	c0 31       	cpi	r28, 0x10	; 16
    1b58:	d3 07       	cpc	r29, r19
    1b5a:	c8 f7       	brcc	.-14     	; 0x1b4e <uart_tx_num16+0x16>
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <uart_tx_num16+0x28>
}


void uart_tx_num16(uint16_t number)
{
	uint8_t digit1 = 0;
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    while (number >= 10000) 
	{
        digit1++;
        number -= 10000;
    }
    while (number >= 1000) 
    1b60:	93 e0       	ldi	r25, 0x03	; 3
    1b62:	c8 3e       	cpi	r28, 0xE8	; 232
    1b64:	d9 07       	cpc	r29, r25
    1b66:	48 f0       	brcs	.+18     	; 0x1b7a <uart_tx_num16+0x42>
    1b68:	00 e0       	ldi	r16, 0x00	; 0
	{
        digit2++;
    1b6a:	0f 5f       	subi	r16, 0xFF	; 255
        number -= 1000;
    1b6c:	c8 5e       	subi	r28, 0xE8	; 232
    1b6e:	d3 40       	sbci	r29, 0x03	; 3
    while (number >= 10000) 
	{
        digit1++;
        number -= 10000;
    }
    while (number >= 1000) 
    1b70:	23 e0       	ldi	r18, 0x03	; 3
    1b72:	c8 3e       	cpi	r28, 0xE8	; 232
    1b74:	d2 07       	cpc	r29, r18
    1b76:	c8 f7       	brcc	.-14     	; 0x1b6a <uart_tx_num16+0x32>
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <uart_tx_num16+0x44>
    1b7a:	00 e0       	ldi	r16, 0x00	; 0
	{
        digit2++;
        number -= 1000;
    }
	while (number >= 100) 
    1b7c:	c4 36       	cpi	r28, 0x64	; 100
    1b7e:	d1 05       	cpc	r29, r1
    1b80:	40 f0       	brcs	.+16     	; 0x1b92 <uart_tx_num16+0x5a>
    1b82:	ff 24       	eor	r15, r15
	{
        digit3++;
    1b84:	f3 94       	inc	r15
        number -= 100;
    1b86:	c4 56       	subi	r28, 0x64	; 100
    1b88:	d0 40       	sbci	r29, 0x00	; 0
    while (number >= 1000) 
	{
        digit2++;
        number -= 1000;
    }
	while (number >= 100) 
    1b8a:	c4 36       	cpi	r28, 0x64	; 100
    1b8c:	d1 05       	cpc	r29, r1
    1b8e:	d0 f7       	brcc	.-12     	; 0x1b84 <uart_tx_num16+0x4c>
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <uart_tx_num16+0x5c>
    1b92:	ff 24       	eor	r15, r15
	{
        digit3++;
        number -= 100;
    }
    while (number >= 10) 
    1b94:	ca 30       	cpi	r28, 0x0A	; 10
    1b96:	d1 05       	cpc	r29, r1
    1b98:	38 f0       	brcs	.+14     	; 0x1ba8 <uart_tx_num16+0x70>
    1b9a:	10 e0       	ldi	r17, 0x00	; 0
	{
        digit4++;
    1b9c:	1f 5f       	subi	r17, 0xFF	; 255
        number -= 10;
    1b9e:	2a 97       	sbiw	r28, 0x0a	; 10
	while (number >= 100) 
	{
        digit3++;
        number -= 100;
    }
    while (number >= 10) 
    1ba0:	ca 30       	cpi	r28, 0x0A	; 10
    1ba2:	d1 05       	cpc	r29, r1
    1ba4:	d8 f7       	brcc	.-10     	; 0x1b9c <uart_tx_num16+0x64>
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <uart_tx_num16+0x72>
    1ba8:	10 e0       	ldi	r17, 0x00	; 0
	{
        digit4++;
        number -= 10;
    }
	uart_tx_byte(48+digit1);
    1baa:	80 5d       	subi	r24, 0xD0	; 208
    1bac:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	uart_tx_byte(48+digit2);
    1bb0:	80 2f       	mov	r24, r16
    1bb2:	80 5d       	subi	r24, 0xD0	; 208
    1bb4:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	uart_tx_byte(48+digit3);
    1bb8:	8f 2d       	mov	r24, r15
    1bba:	80 5d       	subi	r24, 0xD0	; 208
    1bbc:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	uart_tx_byte(48+digit4);
    1bc0:	81 2f       	mov	r24, r17
    1bc2:	80 5d       	subi	r24, 0xD0	; 208
    1bc4:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	uart_tx_byte(48+number);
    1bc8:	9e 01       	movw	r18, r28
    1bca:	20 5d       	subi	r18, 0xD0	; 208
    1bcc:	82 2f       	mov	r24, r18
    1bce:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
}
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	ff 90       	pop	r15
    1bdc:	08 95       	ret

00001bde <uart_tx_number2>:

void uart_tx_number2(uint16_t number, uint8_t digit_cnt, uint8_t leading_zero,uint8_t decpoint) //
{
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	00 d0       	rcall	.+0      	; 0x1bf2 <uart_tx_number2+0x14>
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <uart_tx_number2+0x16>
    1bf4:	0f 92       	push	r0
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	f6 2e       	mov	r15, r22
    1bfc:	a2 2e       	mov	r10, r18
	uint8_t digits[5] = {0,0,0,0,0};
    1bfe:	fe 01       	movw	r30, r28
    1c00:	31 96       	adiw	r30, 0x01	; 1
    1c02:	25 e0       	ldi	r18, 0x05	; 5
    1c04:	df 01       	movw	r26, r30
    1c06:	1d 92       	st	X+, r1
    1c08:	2a 95       	dec	r18
    1c0a:	e9 f7       	brne	.-6      	; 0x1c06 <uart_tx_number2+0x28>
	uint8_t var_dig = 0;
	uint8_t digit_cnt_buf = digit_cnt;
	while (number >= 10000)
    1c0c:	b7 e2       	ldi	r27, 0x27	; 39
    1c0e:	80 31       	cpi	r24, 0x10	; 16
    1c10:	9b 07       	cpc	r25, r27
    1c12:	60 f0       	brcs	.+24     	; 0x1c2c <uart_tx_number2+0x4e>
    1c14:	3d 81       	ldd	r19, Y+5	; 0x05
}

void uart_tx_number2(uint16_t number, uint8_t digit_cnt, uint8_t leading_zero,uint8_t decpoint) //
{
	uint8_t digits[5] = {0,0,0,0,0};
	uint8_t var_dig = 0;
    1c16:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t digit_cnt_buf = digit_cnt;
	while (number >= 10000)
    1c18:	3f 5f       	subi	r19, 0xFF	; 255
	{
		digits[4]++;
		number -= 10000;
    1c1a:	80 51       	subi	r24, 0x10	; 16
    1c1c:	97 42       	sbci	r25, 0x27	; 39
		var_dig |= (1<<5);
    1c1e:	20 62       	ori	r18, 0x20	; 32
void uart_tx_number2(uint16_t number, uint8_t digit_cnt, uint8_t leading_zero,uint8_t decpoint) //
{
	uint8_t digits[5] = {0,0,0,0,0};
	uint8_t var_dig = 0;
	uint8_t digit_cnt_buf = digit_cnt;
	while (number >= 10000)
    1c20:	57 e2       	ldi	r21, 0x27	; 39
    1c22:	80 31       	cpi	r24, 0x10	; 16
    1c24:	95 07       	cpc	r25, r21
    1c26:	c0 f7       	brcc	.-16     	; 0x1c18 <uart_tx_number2+0x3a>
    1c28:	3d 83       	std	Y+5, r19	; 0x05
    1c2a:	01 c0       	rjmp	.+2      	; 0x1c2e <uart_tx_number2+0x50>
}

void uart_tx_number2(uint16_t number, uint8_t digit_cnt, uint8_t leading_zero,uint8_t decpoint) //
{
	uint8_t digits[5] = {0,0,0,0,0};
	uint8_t var_dig = 0;
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
	{
		digits[4]++;
		number -= 10000;
		var_dig |= (1<<5);
	}
	while (number >= 1000)
    1c2e:	a3 e0       	ldi	r26, 0x03	; 3
    1c30:	88 3e       	cpi	r24, 0xE8	; 232
    1c32:	9a 07       	cpc	r25, r26
    1c34:	50 f0       	brcs	.+20     	; 0x1c4a <uart_tx_number2+0x6c>
    1c36:	3c 81       	ldd	r19, Y+4	; 0x04
    1c38:	3f 5f       	subi	r19, 0xFF	; 255
	{
		digits[3]++;
		number -= 1000;
    1c3a:	88 5e       	subi	r24, 0xE8	; 232
    1c3c:	93 40       	sbci	r25, 0x03	; 3
		var_dig |= (1<<4);
    1c3e:	20 61       	ori	r18, 0x10	; 16
	{
		digits[4]++;
		number -= 10000;
		var_dig |= (1<<5);
	}
	while (number >= 1000)
    1c40:	b3 e0       	ldi	r27, 0x03	; 3
    1c42:	88 3e       	cpi	r24, 0xE8	; 232
    1c44:	9b 07       	cpc	r25, r27
    1c46:	c0 f7       	brcc	.-16     	; 0x1c38 <uart_tx_number2+0x5a>
    1c48:	3c 83       	std	Y+4, r19	; 0x04
	{
		digits[3]++;
		number -= 1000;
		var_dig |= (1<<4);
	}
	while (number >= 100)
    1c4a:	84 36       	cpi	r24, 0x64	; 100
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	48 f0       	brcs	.+18     	; 0x1c62 <uart_tx_number2+0x84>
    1c50:	3b 81       	ldd	r19, Y+3	; 0x03
    1c52:	3f 5f       	subi	r19, 0xFF	; 255
	{
		digits[2]++;
		number -= 100;
    1c54:	84 56       	subi	r24, 0x64	; 100
    1c56:	90 40       	sbci	r25, 0x00	; 0
		var_dig |= (1<<3);
    1c58:	28 60       	ori	r18, 0x08	; 8
	{
		digits[3]++;
		number -= 1000;
		var_dig |= (1<<4);
	}
	while (number >= 100)
    1c5a:	84 36       	cpi	r24, 0x64	; 100
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	c8 f7       	brcc	.-14     	; 0x1c52 <uart_tx_number2+0x74>
    1c60:	3b 83       	std	Y+3, r19	; 0x03
	{
		digits[2]++;
		number -= 100;
		var_dig |= (1<<3);
	}
	while (number >= 10)
    1c62:	8a 30       	cpi	r24, 0x0A	; 10
    1c64:	91 05       	cpc	r25, r1
    1c66:	40 f0       	brcs	.+16     	; 0x1c78 <uart_tx_number2+0x9a>
    1c68:	3a 81       	ldd	r19, Y+2	; 0x02
    1c6a:	3f 5f       	subi	r19, 0xFF	; 255
	{
		digits[1]++;
		number -= 10;
    1c6c:	0a 97       	sbiw	r24, 0x0a	; 10
		var_dig |= (1<<2);
    1c6e:	24 60       	ori	r18, 0x04	; 4
	{
		digits[2]++;
		number -= 100;
		var_dig |= (1<<3);
	}
	while (number >= 10)
    1c70:	8a 30       	cpi	r24, 0x0A	; 10
    1c72:	91 05       	cpc	r25, r1
    1c74:	d0 f7       	brcc	.-12     	; 0x1c6a <uart_tx_number2+0x8c>
    1c76:	3a 83       	std	Y+2, r19	; 0x02
	{
		digits[1]++;
		number -= 10;
		var_dig |= (1<<2);
	}
	digits[0] = number;
    1c78:	89 83       	std	Y+1, r24	; 0x01
	if(leading_zero == 0 || leading_zero == 1)
    1c7a:	42 30       	cpi	r20, 0x02	; 2
    1c7c:	60 f5       	brcc	.+88     	; 0x1cd6 <uart_tx_number2+0xf8>
	{
		if(var_dig & (1<<5))
    1c7e:	25 fd       	sbrc	r18, 5
    1c80:	0a c0       	rjmp	.+20     	; 0x1c96 <uart_tx_number2+0xb8>
		{
			digit_cnt = 5;
		}
		else if(var_dig & (1<<4))
    1c82:	24 fd       	sbrc	r18, 4
    1c84:	0d c0       	rjmp	.+26     	; 0x1ca0 <uart_tx_number2+0xc2>
		{
			digit_cnt = 4;
		}
		else if(var_dig & (1<<3))
    1c86:	23 fd       	sbrc	r18, 3
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <uart_tx_number2+0xca>
		{
			digit_cnt = 3;
		}
		else if(var_dig & (1<<2))
    1c8a:	22 ff       	sbrs	r18, 2
    1c8c:	12 c0       	rjmp	.+36     	; 0x1cb2 <uart_tx_number2+0xd4>
		{
			digit_cnt = 2;
    1c8e:	cc 24       	eor	r12, r12
    1c90:	68 94       	set
    1c92:	c1 f8       	bld	r12, 1
    1c94:	10 c0       	rjmp	.+32     	; 0x1cb6 <uart_tx_number2+0xd8>
	digits[0] = number;
	if(leading_zero == 0 || leading_zero == 1)
	{
		if(var_dig & (1<<5))
		{
			digit_cnt = 5;
    1c96:	0f 2e       	mov	r0, r31
    1c98:	f5 e0       	ldi	r31, 0x05	; 5
    1c9a:	cf 2e       	mov	r12, r31
    1c9c:	f0 2d       	mov	r31, r0
    1c9e:	0b c0       	rjmp	.+22     	; 0x1cb6 <uart_tx_number2+0xd8>
		}
		else if(var_dig & (1<<4))
		{
			digit_cnt = 4;
    1ca0:	cc 24       	eor	r12, r12
    1ca2:	68 94       	set
    1ca4:	c2 f8       	bld	r12, 2
    1ca6:	07 c0       	rjmp	.+14     	; 0x1cb6 <uart_tx_number2+0xd8>
		}
		else if(var_dig & (1<<3))
		{
			digit_cnt = 3;
    1ca8:	0f 2e       	mov	r0, r31
    1caa:	f3 e0       	ldi	r31, 0x03	; 3
    1cac:	cf 2e       	mov	r12, r31
    1cae:	f0 2d       	mov	r31, r0
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <uart_tx_number2+0xd8>
		{
			digit_cnt = 2;
		}
		else
		{
			digit_cnt = 1;
    1cb2:	cc 24       	eor	r12, r12
    1cb4:	c3 94       	inc	r12
		}
		if(leading_zero == 1)
    1cb6:	41 30       	cpi	r20, 0x01	; 1
    1cb8:	59 f4       	brne	.+22     	; 0x1cd0 <uart_tx_number2+0xf2>
		{
			for(uint8_t i = digit_cnt_buf-digit_cnt; i>0;i--)
    1cba:	fc 18       	sub	r15, r12
    1cbc:	59 f0       	breq	.+22     	; 0x1cd4 <uart_tx_number2+0xf6>
			{
				uart_tx_string(" ");
    1cbe:	05 e0       	ldi	r16, 0x05	; 5
    1cc0:	11 e0       	ldi	r17, 0x01	; 1
    1cc2:	c8 01       	movw	r24, r16
    1cc4:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
		{
			digit_cnt = 1;
		}
		if(leading_zero == 1)
		{
			for(uint8_t i = digit_cnt_buf-digit_cnt; i>0;i--)
    1cc8:	fa 94       	dec	r15
    1cca:	d9 f7       	brne	.-10     	; 0x1cc2 <uart_tx_number2+0xe4>
    1ccc:	fc 2c       	mov	r15, r12
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <uart_tx_number2+0xf8>
		}
		else
		{
			digit_cnt = 1;
		}
		if(leading_zero == 1)
    1cd0:	fc 2c       	mov	r15, r12
    1cd2:	01 c0       	rjmp	.+2      	; 0x1cd6 <uart_tx_number2+0xf8>
		{
			for(uint8_t i = digit_cnt_buf-digit_cnt; i>0;i--)
    1cd4:	fc 2c       	mov	r15, r12
			{
				uart_tx_string(" ");
			}
		}
	}
	while(digit_cnt > 0)
    1cd6:	ff 20       	and	r15, r15
    1cd8:	e1 f0       	breq	.+56     	; 0x1d12 <uart_tx_number2+0x134>
	{
		uart_tx_byte(48+digits[digit_cnt-1]);
		if(digit_cnt == (5-decpoint))
    1cda:	85 e0       	ldi	r24, 0x05	; 5
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	6c 01       	movw	r12, r24
    1ce0:	ca 18       	sub	r12, r10
    1ce2:	d1 08       	sbc	r13, r1
		{
			uart_tx_string(".");
    1ce4:	0f 2e       	mov	r0, r31
    1ce6:	f7 e0       	ldi	r31, 0x07	; 7
    1ce8:	af 2e       	mov	r10, r31
    1cea:	f1 e0       	ldi	r31, 0x01	; 1
    1cec:	bf 2e       	mov	r11, r31
    1cee:	f0 2d       	mov	r31, r0
			}
		}
	}
	while(digit_cnt > 0)
	{
		uart_tx_byte(48+digits[digit_cnt-1]);
    1cf0:	0f 2d       	mov	r16, r15
    1cf2:	10 e0       	ldi	r17, 0x00	; 0
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e0 0f       	add	r30, r16
    1cf8:	f1 1f       	adc	r31, r17
    1cfa:	80 81       	ld	r24, Z
    1cfc:	80 5d       	subi	r24, 0xD0	; 208
    1cfe:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
		if(digit_cnt == (5-decpoint))
    1d02:	0c 15       	cp	r16, r12
    1d04:	1d 05       	cpc	r17, r13
    1d06:	19 f4       	brne	.+6      	; 0x1d0e <uart_tx_number2+0x130>
		{
			uart_tx_string(".");
    1d08:	c5 01       	movw	r24, r10
    1d0a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
		}
		digit_cnt--;
    1d0e:	fa 94       	dec	r15
			{
				uart_tx_string(" ");
			}
		}
	}
	while(digit_cnt > 0)
    1d10:	79 f7       	brne	.-34     	; 0x1cf0 <uart_tx_number2+0x112>
		{
			uart_tx_string(".");
		}
		digit_cnt--;
	}
}
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	df 90       	pop	r13
    1d28:	cf 90       	pop	r12
    1d2a:	bf 90       	pop	r11
    1d2c:	af 90       	pop	r10
    1d2e:	08 95       	ret

00001d30 <uart_tx_number>:

void uart_tx_number(uint16_t number, uint8_t digit_cnt, uint8_t leading_zero) //
{
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <uart_tx_number+0xe>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <uart_tx_number+0x10>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	06 2f       	mov	r16, r22
	uint8_t digits[5] = {0,0,0,0,0};
    1d48:	fe 01       	movw	r30, r28
    1d4a:	31 96       	adiw	r30, 0x01	; 1
    1d4c:	25 e0       	ldi	r18, 0x05	; 5
    1d4e:	df 01       	movw	r26, r30
    1d50:	1d 92       	st	X+, r1
    1d52:	2a 95       	dec	r18
    1d54:	e9 f7       	brne	.-6      	; 0x1d50 <uart_tx_number+0x20>
	uint8_t var_dig = 0;
	uint8_t digit_cnt_buf = digit_cnt;
    while (number >= 10000) 
    1d56:	b7 e2       	ldi	r27, 0x27	; 39
    1d58:	80 31       	cpi	r24, 0x10	; 16
    1d5a:	9b 07       	cpc	r25, r27
    1d5c:	60 f0       	brcs	.+24     	; 0x1d76 <uart_tx_number+0x46>
    1d5e:	3d 81       	ldd	r19, Y+5	; 0x05
}

void uart_tx_number(uint16_t number, uint8_t digit_cnt, uint8_t leading_zero) //
{
	uint8_t digits[5] = {0,0,0,0,0};
	uint8_t var_dig = 0;
    1d60:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t digit_cnt_buf = digit_cnt;
    while (number >= 10000) 
    1d62:	3f 5f       	subi	r19, 0xFF	; 255
	{
        digits[4]++;
        number -= 10000;
    1d64:	80 51       	subi	r24, 0x10	; 16
    1d66:	97 42       	sbci	r25, 0x27	; 39
		var_dig |= (1<<5);
    1d68:	20 62       	ori	r18, 0x20	; 32
void uart_tx_number(uint16_t number, uint8_t digit_cnt, uint8_t leading_zero) //
{
	uint8_t digits[5] = {0,0,0,0,0};
	uint8_t var_dig = 0;
	uint8_t digit_cnt_buf = digit_cnt;
    while (number >= 10000) 
    1d6a:	57 e2       	ldi	r21, 0x27	; 39
    1d6c:	80 31       	cpi	r24, 0x10	; 16
    1d6e:	95 07       	cpc	r25, r21
    1d70:	c0 f7       	brcc	.-16     	; 0x1d62 <uart_tx_number+0x32>
    1d72:	3d 83       	std	Y+5, r19	; 0x05
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <uart_tx_number+0x48>
}

void uart_tx_number(uint16_t number, uint8_t digit_cnt, uint8_t leading_zero) //
{
	uint8_t digits[5] = {0,0,0,0,0};
	uint8_t var_dig = 0;
    1d76:	20 e0       	ldi	r18, 0x00	; 0
	{
        digits[4]++;
        number -= 10000;
		var_dig |= (1<<5);
    }
    while (number >= 1000) 
    1d78:	a3 e0       	ldi	r26, 0x03	; 3
    1d7a:	88 3e       	cpi	r24, 0xE8	; 232
    1d7c:	9a 07       	cpc	r25, r26
    1d7e:	50 f0       	brcs	.+20     	; 0x1d94 <uart_tx_number+0x64>
    1d80:	3c 81       	ldd	r19, Y+4	; 0x04
    1d82:	3f 5f       	subi	r19, 0xFF	; 255
	{
        digits[3]++;
        number -= 1000;
    1d84:	88 5e       	subi	r24, 0xE8	; 232
    1d86:	93 40       	sbci	r25, 0x03	; 3
		var_dig |= (1<<4);
    1d88:	20 61       	ori	r18, 0x10	; 16
	{
        digits[4]++;
        number -= 10000;
		var_dig |= (1<<5);
    }
    while (number >= 1000) 
    1d8a:	b3 e0       	ldi	r27, 0x03	; 3
    1d8c:	88 3e       	cpi	r24, 0xE8	; 232
    1d8e:	9b 07       	cpc	r25, r27
    1d90:	c0 f7       	brcc	.-16     	; 0x1d82 <uart_tx_number+0x52>
    1d92:	3c 83       	std	Y+4, r19	; 0x04
	{
        digits[3]++;
        number -= 1000;
		var_dig |= (1<<4);
    }
	while (number >= 100) 
    1d94:	84 36       	cpi	r24, 0x64	; 100
    1d96:	91 05       	cpc	r25, r1
    1d98:	48 f0       	brcs	.+18     	; 0x1dac <uart_tx_number+0x7c>
    1d9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d9c:	3f 5f       	subi	r19, 0xFF	; 255
	{
        digits[2]++;
        number -= 100;
    1d9e:	84 56       	subi	r24, 0x64	; 100
    1da0:	90 40       	sbci	r25, 0x00	; 0
		var_dig |= (1<<3);
    1da2:	28 60       	ori	r18, 0x08	; 8
	{
        digits[3]++;
        number -= 1000;
		var_dig |= (1<<4);
    }
	while (number >= 100) 
    1da4:	84 36       	cpi	r24, 0x64	; 100
    1da6:	91 05       	cpc	r25, r1
    1da8:	c8 f7       	brcc	.-14     	; 0x1d9c <uart_tx_number+0x6c>
    1daa:	3b 83       	std	Y+3, r19	; 0x03
	{
        digits[2]++;
        number -= 100;
		var_dig |= (1<<3);
    }
    while (number >= 10) 
    1dac:	8a 30       	cpi	r24, 0x0A	; 10
    1dae:	91 05       	cpc	r25, r1
    1db0:	40 f0       	brcs	.+16     	; 0x1dc2 <uart_tx_number+0x92>
    1db2:	3a 81       	ldd	r19, Y+2	; 0x02
    1db4:	3f 5f       	subi	r19, 0xFF	; 255
	{
        digits[1]++;
        number -= 10;
    1db6:	0a 97       	sbiw	r24, 0x0a	; 10
		var_dig |= (1<<2);
    1db8:	24 60       	ori	r18, 0x04	; 4
	{
        digits[2]++;
        number -= 100;
		var_dig |= (1<<3);
    }
    while (number >= 10) 
    1dba:	8a 30       	cpi	r24, 0x0A	; 10
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	d0 f7       	brcc	.-12     	; 0x1db4 <uart_tx_number+0x84>
    1dc0:	3a 83       	std	Y+2, r19	; 0x02
	{
        digits[1]++;
        number -= 10;
		var_dig |= (1<<2);
    }
	digits[0] = number;
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	if(leading_zero == 0 || leading_zero == 1)
    1dc4:	42 30       	cpi	r20, 0x02	; 2
    1dc6:	68 f5       	brcc	.+90     	; 0x1e22 <uart_tx_number+0xf2>
	{
		if(var_dig & (1<<5))
    1dc8:	25 fd       	sbrc	r18, 5
    1dca:	0a c0       	rjmp	.+20     	; 0x1de0 <uart_tx_number+0xb0>
		{
			digit_cnt = 5;
		}
		else if(var_dig & (1<<4))
    1dcc:	24 fd       	sbrc	r18, 4
    1dce:	0d c0       	rjmp	.+26     	; 0x1dea <uart_tx_number+0xba>
		{
			digit_cnt = 4;
		}
		else if(var_dig & (1<<3))
    1dd0:	23 fd       	sbrc	r18, 3
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <uart_tx_number+0xc2>
		{
			digit_cnt = 3;
		}
		else if(var_dig & (1<<2))
    1dd4:	22 ff       	sbrs	r18, 2
    1dd6:	12 c0       	rjmp	.+36     	; 0x1dfc <uart_tx_number+0xcc>
		{
			digit_cnt = 2;
    1dd8:	ff 24       	eor	r15, r15
    1dda:	68 94       	set
    1ddc:	f1 f8       	bld	r15, 1
    1dde:	10 c0       	rjmp	.+32     	; 0x1e00 <uart_tx_number+0xd0>
	digits[0] = number;
	if(leading_zero == 0 || leading_zero == 1)
	{
		if(var_dig & (1<<5))
		{
			digit_cnt = 5;
    1de0:	0f 2e       	mov	r0, r31
    1de2:	f5 e0       	ldi	r31, 0x05	; 5
    1de4:	ff 2e       	mov	r15, r31
    1de6:	f0 2d       	mov	r31, r0
    1de8:	0b c0       	rjmp	.+22     	; 0x1e00 <uart_tx_number+0xd0>
		}
		else if(var_dig & (1<<4))
		{
			digit_cnt = 4;
    1dea:	ff 24       	eor	r15, r15
    1dec:	68 94       	set
    1dee:	f2 f8       	bld	r15, 2
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <uart_tx_number+0xd0>
		}
		else if(var_dig & (1<<3))
		{
			digit_cnt = 3;
    1df2:	0f 2e       	mov	r0, r31
    1df4:	f3 e0       	ldi	r31, 0x03	; 3
    1df6:	ff 2e       	mov	r15, r31
    1df8:	f0 2d       	mov	r31, r0
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <uart_tx_number+0xd0>
		{
			digit_cnt = 2;
		}
		else
		{
			digit_cnt = 1;
    1dfc:	ff 24       	eor	r15, r15
    1dfe:	f3 94       	inc	r15
		}
		if(leading_zero == 1)
    1e00:	41 30       	cpi	r20, 0x01	; 1
    1e02:	61 f4       	brne	.+24     	; 0x1e1c <uart_tx_number+0xec>
		{
			for(uint8_t i = digit_cnt_buf-digit_cnt; i>0;i--)
    1e04:	e0 2e       	mov	r14, r16
    1e06:	ef 18       	sub	r14, r15
    1e08:	59 f0       	breq	.+22     	; 0x1e20 <uart_tx_number+0xf0>
			{
				uart_tx_string(" ");
    1e0a:	05 e0       	ldi	r16, 0x05	; 5
    1e0c:	11 e0       	ldi	r17, 0x01	; 1
    1e0e:	c8 01       	movw	r24, r16
    1e10:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
		{
			digit_cnt = 1;
		}
		if(leading_zero == 1)
		{
			for(uint8_t i = digit_cnt_buf-digit_cnt; i>0;i--)
    1e14:	ea 94       	dec	r14
    1e16:	d9 f7       	brne	.-10     	; 0x1e0e <uart_tx_number+0xde>
    1e18:	0f 2d       	mov	r16, r15
    1e1a:	03 c0       	rjmp	.+6      	; 0x1e22 <uart_tx_number+0xf2>
		}
		else
		{
			digit_cnt = 1;
		}
		if(leading_zero == 1)
    1e1c:	0f 2d       	mov	r16, r15
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <uart_tx_number+0xf2>
		{
			for(uint8_t i = digit_cnt_buf-digit_cnt; i>0;i--)
    1e20:	0f 2d       	mov	r16, r15
			{
				uart_tx_string(" ");
			}
		}
	}
	while(digit_cnt > 0)
    1e22:	00 23       	and	r16, r16
    1e24:	49 f0       	breq	.+18     	; 0x1e38 <uart_tx_number+0x108>
	{
		uart_tx_byte(48+digits[digit_cnt-1]);
    1e26:	fe 01       	movw	r30, r28
    1e28:	e0 0f       	add	r30, r16
    1e2a:	f1 1d       	adc	r31, r1
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 5d       	subi	r24, 0xD0	; 208
    1e30:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
		digit_cnt--;
    1e34:	01 50       	subi	r16, 0x01	; 1
			{
				uart_tx_string(" ");
			}
		}
	}
	while(digit_cnt > 0)
    1e36:	b9 f7       	brne	.-18     	; 0x1e26 <uart_tx_number+0xf6>
	{
		uart_tx_byte(48+digits[digit_cnt-1]);
		digit_cnt--;
	}
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	08 95       	ret

00001e50 <uart_tx_time>:



void uart_tx_time(uint8_t s, uint8_t m, uint8_t h,uint16_t d)
{
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	18 2f       	mov	r17, r24
    1e5c:	06 2f       	mov	r16, r22
    1e5e:	f4 2e       	mov	r15, r20
	if(d)
    1e60:	21 15       	cp	r18, r1
    1e62:	31 05       	cpc	r19, r1
    1e64:	49 f0       	breq	.+18     	; 0x1e78 <uart_tx_time+0x28>
	{
		uart_tx_number(d,5,0);
    1e66:	c9 01       	movw	r24, r18
    1e68:	65 e0       	ldi	r22, 0x05	; 5
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <uart_tx_number>
		uart_tx_string(".");
    1e70:	87 e0       	ldi	r24, 0x07	; 7
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
	}
	uart_tx_number(h,2,2);
    1e78:	8f 2d       	mov	r24, r15
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	62 e0       	ldi	r22, 0x02	; 2
    1e7e:	42 e0       	ldi	r20, 0x02	; 2
    1e80:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <uart_tx_number>
	uart_tx_string(":");
    1e84:	c9 e0       	ldi	r28, 0x09	; 9
    1e86:	d1 e0       	ldi	r29, 0x01	; 1
    1e88:	ce 01       	movw	r24, r28
    1e8a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
	uart_tx_number(m,2,2);
    1e8e:	80 2f       	mov	r24, r16
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	62 e0       	ldi	r22, 0x02	; 2
    1e94:	42 e0       	ldi	r20, 0x02	; 2
    1e96:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <uart_tx_number>
	uart_tx_string(":");
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
	uart_tx_number(s,2,2);
    1ea0:	81 2f       	mov	r24, r17
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	62 e0       	ldi	r22, 0x02	; 2
    1ea6:	42 e0       	ldi	r20, 0x02	; 2
    1ea8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <uart_tx_number>
}
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	ff 90       	pop	r15
    1eb6:	08 95       	ret

00001eb8 <uart_tx_temperature>:

void uart_tx_temperature(int16_t temp,uint8_t unit)
{
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	ec 01       	movw	r28, r24
    1ec2:	06 2f       	mov	r16, r22
	if(temp >= 0)
    1ec4:	99 23       	and	r25, r25
    1ec6:	34 f4       	brge	.+12     	; 0x1ed4 <uart_tx_temperature+0x1c>
		uart_tx_string("'C");
	}
	else
	{
		uint8_t digit_ = 0;
		while (temp <= -100) 
    1ec8:	2f ef       	ldi	r18, 0xFF	; 255
    1eca:	8d 39       	cpi	r24, 0x9D	; 157
    1ecc:	92 07       	cpc	r25, r18
    1ece:	84 f1       	brlt	.+96     	; 0x1f30 <uart_tx_temperature+0x78>
    1ed0:	10 e0       	ldi	r17, 0x00	; 0
    1ed2:	36 c0       	rjmp	.+108    	; 0x1f40 <uart_tx_temperature+0x88>
void uart_tx_temperature(int16_t temp,uint8_t unit)
{
	if(temp >= 0)
	{
		uint8_t digit = 0;
		while (temp >= 100) 
    1ed4:	84 36       	cpi	r24, 0x64	; 100
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	44 f0       	brlt	.+16     	; 0x1eea <uart_tx_temperature+0x32>
    1eda:	10 e0       	ldi	r17, 0x00	; 0
		{
	        digit += 10;
    1edc:	16 5f       	subi	r17, 0xF6	; 246
	        temp -= 100;
    1ede:	c4 56       	subi	r28, 0x64	; 100
    1ee0:	d0 40       	sbci	r29, 0x00	; 0
void uart_tx_temperature(int16_t temp,uint8_t unit)
{
	if(temp >= 0)
	{
		uint8_t digit = 0;
		while (temp >= 100) 
    1ee2:	c4 36       	cpi	r28, 0x64	; 100
    1ee4:	d1 05       	cpc	r29, r1
    1ee6:	d4 f7       	brge	.-12     	; 0x1edc <uart_tx_temperature+0x24>
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <uart_tx_temperature+0x34>
    1eea:	10 e0       	ldi	r17, 0x00	; 0
		{
	        digit += 10;
	        temp -= 100;
	    }
	    while (temp >= 10) 
    1eec:	ca 30       	cpi	r28, 0x0A	; 10
    1eee:	d1 05       	cpc	r29, r1
    1ef0:	2c f0       	brlt	.+10     	; 0x1efc <uart_tx_temperature+0x44>
		{
	        digit++;
    1ef2:	1f 5f       	subi	r17, 0xFF	; 255
	        temp -= 10;
    1ef4:	2a 97       	sbiw	r28, 0x0a	; 10
		while (temp >= 100) 
		{
	        digit += 10;
	        temp -= 100;
	    }
	    while (temp >= 10) 
    1ef6:	ca 30       	cpi	r28, 0x0A	; 10
    1ef8:	d1 05       	cpc	r29, r1
    1efa:	dc f7       	brge	.-10     	; 0x1ef2 <uart_tx_temperature+0x3a>
		{
	        digit++;
	        temp -= 10;
	    }
		uart_tx_string("+");
    1efc:	8b e0       	ldi	r24, 0x0B	; 11
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
		uart_tx_number(digit,2,2);
    1f04:	81 2f       	mov	r24, r17
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	42 e0       	ldi	r20, 0x02	; 2
    1f0c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <uart_tx_number>
		uart_tx_string(".");
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
		uart_tx_byte(48+temp);
    1f18:	9e 01       	movw	r18, r28
    1f1a:	20 5d       	subi	r18, 0xD0	; 208
    1f1c:	82 2f       	mov	r24, r18
    1f1e:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
		if(unit)
    1f22:	00 23       	and	r16, r16
    1f24:	89 f1       	breq	.+98     	; 0x1f88 <uart_tx_temperature+0xd0>
		uart_tx_string("'C");
    1f26:	8d e0       	ldi	r24, 0x0D	; 13
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
    1f2e:	2c c0       	rjmp	.+88     	; 0x1f88 <uart_tx_temperature+0xd0>
	}
	else
	{
		uint8_t digit_ = 0;
		while (temp <= -100) 
    1f30:	10 e0       	ldi	r17, 0x00	; 0
		{
	        digit_ += 10;
    1f32:	16 5f       	subi	r17, 0xF6	; 246
	        temp += 100;
    1f34:	cc 59       	subi	r28, 0x9C	; 156
    1f36:	df 4f       	sbci	r29, 0xFF	; 255
		uart_tx_string("'C");
	}
	else
	{
		uint8_t digit_ = 0;
		while (temp <= -100) 
    1f38:	3f ef       	ldi	r19, 0xFF	; 255
    1f3a:	cd 39       	cpi	r28, 0x9D	; 157
    1f3c:	d3 07       	cpc	r29, r19
    1f3e:	cc f3       	brlt	.-14     	; 0x1f32 <uart_tx_temperature+0x7a>
		{
	        digit_ += 10;
	        temp += 100;
	    }
	    while (temp <= -10) 
    1f40:	8f ef       	ldi	r24, 0xFF	; 255
    1f42:	c7 3f       	cpi	r28, 0xF7	; 247
    1f44:	d8 07       	cpc	r29, r24
    1f46:	34 f4       	brge	.+12     	; 0x1f54 <uart_tx_temperature+0x9c>
		{
	        digit_++;
    1f48:	1f 5f       	subi	r17, 0xFF	; 255
	        temp += 10;
    1f4a:	2a 96       	adiw	r28, 0x0a	; 10
		while (temp <= -100) 
		{
	        digit_ += 10;
	        temp += 100;
	    }
	    while (temp <= -10) 
    1f4c:	2f ef       	ldi	r18, 0xFF	; 255
    1f4e:	c7 3f       	cpi	r28, 0xF7	; 247
    1f50:	d2 07       	cpc	r29, r18
    1f52:	d4 f3       	brlt	.-12     	; 0x1f48 <uart_tx_temperature+0x90>
		{
	        digit_++;
	        temp += 10;
	    }
		uart_tx_string("-");
    1f54:	80 e1       	ldi	r24, 0x10	; 16
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
		uart_tx_number(digit_,2,2);
    1f5c:	81 2f       	mov	r24, r17
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	62 e0       	ldi	r22, 0x02	; 2
    1f62:	42 e0       	ldi	r20, 0x02	; 2
    1f64:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <uart_tx_number>
		uart_tx_string(".");
    1f68:	87 e0       	ldi	r24, 0x07	; 7
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
		uart_tx_byte(48 + ~temp);
    1f70:	9e 01       	movw	r18, r28
    1f72:	20 95       	com	r18
    1f74:	82 2f       	mov	r24, r18
    1f76:	80 5d       	subi	r24, 0xD0	; 208
    1f78:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
		if(unit)
    1f7c:	00 23       	and	r16, r16
    1f7e:	21 f0       	breq	.+8      	; 0x1f88 <uart_tx_temperature+0xd0>
		uart_tx_string("'C");
    1f80:	8d e0       	ldi	r24, 0x0D	; 13
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_tx_string>
	}
}
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	08 95       	ret

00001f92 <uart_tx_line_break>:

void uart_tx_line_break()
{
	uart_tx_byte('\r');
    1f92:	8d e0       	ldi	r24, 0x0D	; 13
    1f94:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
	uart_tx_byte('\n');
    1f98:	8a e0       	ldi	r24, 0x0A	; 10
    1f9a:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
}
    1f9e:	08 95       	ret

00001fa0 <print_string_flash>:
void print_string_flash(const char* string)
{
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	ec 01       	movw	r28, r24
	char c;
	for(;;)
	{	c=pgm_read_byte(string++);
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	84 91       	lpm	r24, Z+
		if (!c)
    1faa:	88 23       	and	r24, r24
    1fac:	41 f0       	breq	.+16     	; 0x1fbe <print_string_flash+0x1e>
}
void print_string_flash(const char* string)
{
	char c;
	for(;;)
	{	c=pgm_read_byte(string++);
    1fae:	21 96       	adiw	r28, 0x01	; 1
		if (!c)
			break;
		uart_tx_byte(c);
    1fb0:	0e 94 ef 0c 	call	0x19de	; 0x19de <uart_tx_byte>
    1fb4:	fe 01       	movw	r30, r28
}
void print_string_flash(const char* string)
{
	char c;
	for(;;)
	{	c=pgm_read_byte(string++);
    1fb6:	21 96       	adiw	r28, 0x01	; 1
    1fb8:	84 91       	lpm	r24, Z+
		if (!c)
    1fba:	88 23       	and	r24, r24
    1fbc:	c9 f7       	brne	.-14     	; 0x1fb0 <print_string_flash+0x10>
			break;
		uart_tx_byte(c);
	}
}
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <__divsf3>:
    1fc4:	0c d0       	rcall	.+24     	; 0x1fde <__divsf3x>
    1fc6:	e6 c0       	rjmp	.+460    	; 0x2194 <__fp_round>
    1fc8:	de d0       	rcall	.+444    	; 0x2186 <__fp_pscB>
    1fca:	40 f0       	brcs	.+16     	; 0x1fdc <__divsf3+0x18>
    1fcc:	d5 d0       	rcall	.+426    	; 0x2178 <__fp_pscA>
    1fce:	30 f0       	brcs	.+12     	; 0x1fdc <__divsf3+0x18>
    1fd0:	21 f4       	brne	.+8      	; 0x1fda <__divsf3+0x16>
    1fd2:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd4:	19 f0       	breq	.+6      	; 0x1fdc <__divsf3+0x18>
    1fd6:	c7 c0       	rjmp	.+398    	; 0x2166 <__fp_inf>
    1fd8:	51 11       	cpse	r21, r1
    1fda:	10 c1       	rjmp	.+544    	; 0x21fc <__fp_szero>
    1fdc:	ca c0       	rjmp	.+404    	; 0x2172 <__fp_nan>

00001fde <__divsf3x>:
    1fde:	eb d0       	rcall	.+470    	; 0x21b6 <__fp_split3>
    1fe0:	98 f3       	brcs	.-26     	; 0x1fc8 <__divsf3+0x4>

00001fe2 <__divsf3_pse>:
    1fe2:	99 23       	and	r25, r25
    1fe4:	c9 f3       	breq	.-14     	; 0x1fd8 <__divsf3+0x14>
    1fe6:	55 23       	and	r21, r21
    1fe8:	b1 f3       	breq	.-20     	; 0x1fd6 <__divsf3+0x12>
    1fea:	95 1b       	sub	r25, r21
    1fec:	55 0b       	sbc	r21, r21
    1fee:	bb 27       	eor	r27, r27
    1ff0:	aa 27       	eor	r26, r26
    1ff2:	62 17       	cp	r22, r18
    1ff4:	73 07       	cpc	r23, r19
    1ff6:	84 07       	cpc	r24, r20
    1ff8:	38 f0       	brcs	.+14     	; 0x2008 <__divsf3_pse+0x26>
    1ffa:	9f 5f       	subi	r25, 0xFF	; 255
    1ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffe:	22 0f       	add	r18, r18
    2000:	33 1f       	adc	r19, r19
    2002:	44 1f       	adc	r20, r20
    2004:	aa 1f       	adc	r26, r26
    2006:	a9 f3       	breq	.-22     	; 0x1ff2 <__divsf3_pse+0x10>
    2008:	33 d0       	rcall	.+102    	; 0x2070 <__divsf3_pse+0x8e>
    200a:	0e 2e       	mov	r0, r30
    200c:	3a f0       	brmi	.+14     	; 0x201c <__divsf3_pse+0x3a>
    200e:	e0 e8       	ldi	r30, 0x80	; 128
    2010:	30 d0       	rcall	.+96     	; 0x2072 <__divsf3_pse+0x90>
    2012:	91 50       	subi	r25, 0x01	; 1
    2014:	50 40       	sbci	r21, 0x00	; 0
    2016:	e6 95       	lsr	r30
    2018:	00 1c       	adc	r0, r0
    201a:	ca f7       	brpl	.-14     	; 0x200e <__divsf3_pse+0x2c>
    201c:	29 d0       	rcall	.+82     	; 0x2070 <__divsf3_pse+0x8e>
    201e:	fe 2f       	mov	r31, r30
    2020:	27 d0       	rcall	.+78     	; 0x2070 <__divsf3_pse+0x8e>
    2022:	66 0f       	add	r22, r22
    2024:	77 1f       	adc	r23, r23
    2026:	88 1f       	adc	r24, r24
    2028:	bb 1f       	adc	r27, r27
    202a:	26 17       	cp	r18, r22
    202c:	37 07       	cpc	r19, r23
    202e:	48 07       	cpc	r20, r24
    2030:	ab 07       	cpc	r26, r27
    2032:	b0 e8       	ldi	r27, 0x80	; 128
    2034:	09 f0       	breq	.+2      	; 0x2038 <__divsf3_pse+0x56>
    2036:	bb 0b       	sbc	r27, r27
    2038:	80 2d       	mov	r24, r0
    203a:	bf 01       	movw	r22, r30
    203c:	ff 27       	eor	r31, r31
    203e:	93 58       	subi	r25, 0x83	; 131
    2040:	5f 4f       	sbci	r21, 0xFF	; 255
    2042:	2a f0       	brmi	.+10     	; 0x204e <__divsf3_pse+0x6c>
    2044:	9e 3f       	cpi	r25, 0xFE	; 254
    2046:	51 05       	cpc	r21, r1
    2048:	68 f0       	brcs	.+26     	; 0x2064 <__divsf3_pse+0x82>
    204a:	8d c0       	rjmp	.+282    	; 0x2166 <__fp_inf>
    204c:	d7 c0       	rjmp	.+430    	; 0x21fc <__fp_szero>
    204e:	5f 3f       	cpi	r21, 0xFF	; 255
    2050:	ec f3       	brlt	.-6      	; 0x204c <__divsf3_pse+0x6a>
    2052:	98 3e       	cpi	r25, 0xE8	; 232
    2054:	dc f3       	brlt	.-10     	; 0x204c <__divsf3_pse+0x6a>
    2056:	86 95       	lsr	r24
    2058:	77 95       	ror	r23
    205a:	67 95       	ror	r22
    205c:	b7 95       	ror	r27
    205e:	f7 95       	ror	r31
    2060:	9f 5f       	subi	r25, 0xFF	; 255
    2062:	c9 f7       	brne	.-14     	; 0x2056 <__divsf3_pse+0x74>
    2064:	88 0f       	add	r24, r24
    2066:	91 1d       	adc	r25, r1
    2068:	96 95       	lsr	r25
    206a:	87 95       	ror	r24
    206c:	97 f9       	bld	r25, 7
    206e:	08 95       	ret
    2070:	e1 e0       	ldi	r30, 0x01	; 1
    2072:	66 0f       	add	r22, r22
    2074:	77 1f       	adc	r23, r23
    2076:	88 1f       	adc	r24, r24
    2078:	bb 1f       	adc	r27, r27
    207a:	62 17       	cp	r22, r18
    207c:	73 07       	cpc	r23, r19
    207e:	84 07       	cpc	r24, r20
    2080:	ba 07       	cpc	r27, r26
    2082:	20 f0       	brcs	.+8      	; 0x208c <__divsf3_pse+0xaa>
    2084:	62 1b       	sub	r22, r18
    2086:	73 0b       	sbc	r23, r19
    2088:	84 0b       	sbc	r24, r20
    208a:	ba 0b       	sbc	r27, r26
    208c:	ee 1f       	adc	r30, r30
    208e:	88 f7       	brcc	.-30     	; 0x2072 <__divsf3_pse+0x90>
    2090:	e0 95       	com	r30
    2092:	08 95       	ret

00002094 <__fixunssfsi>:
    2094:	98 d0       	rcall	.+304    	; 0x21c6 <__fp_splitA>
    2096:	88 f0       	brcs	.+34     	; 0x20ba <__fixunssfsi+0x26>
    2098:	9f 57       	subi	r25, 0x7F	; 127
    209a:	90 f0       	brcs	.+36     	; 0x20c0 <__fixunssfsi+0x2c>
    209c:	b9 2f       	mov	r27, r25
    209e:	99 27       	eor	r25, r25
    20a0:	b7 51       	subi	r27, 0x17	; 23
    20a2:	a0 f0       	brcs	.+40     	; 0x20cc <__fixunssfsi+0x38>
    20a4:	d1 f0       	breq	.+52     	; 0x20da <__fixunssfsi+0x46>
    20a6:	66 0f       	add	r22, r22
    20a8:	77 1f       	adc	r23, r23
    20aa:	88 1f       	adc	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	1a f0       	brmi	.+6      	; 0x20b6 <__fixunssfsi+0x22>
    20b0:	ba 95       	dec	r27
    20b2:	c9 f7       	brne	.-14     	; 0x20a6 <__fixunssfsi+0x12>
    20b4:	12 c0       	rjmp	.+36     	; 0x20da <__fixunssfsi+0x46>
    20b6:	b1 30       	cpi	r27, 0x01	; 1
    20b8:	81 f0       	breq	.+32     	; 0x20da <__fixunssfsi+0x46>
    20ba:	9f d0       	rcall	.+318    	; 0x21fa <__fp_zero>
    20bc:	b1 e0       	ldi	r27, 0x01	; 1
    20be:	08 95       	ret
    20c0:	9c c0       	rjmp	.+312    	; 0x21fa <__fp_zero>
    20c2:	67 2f       	mov	r22, r23
    20c4:	78 2f       	mov	r23, r24
    20c6:	88 27       	eor	r24, r24
    20c8:	b8 5f       	subi	r27, 0xF8	; 248
    20ca:	39 f0       	breq	.+14     	; 0x20da <__fixunssfsi+0x46>
    20cc:	b9 3f       	cpi	r27, 0xF9	; 249
    20ce:	cc f3       	brlt	.-14     	; 0x20c2 <__fixunssfsi+0x2e>
    20d0:	86 95       	lsr	r24
    20d2:	77 95       	ror	r23
    20d4:	67 95       	ror	r22
    20d6:	b3 95       	inc	r27
    20d8:	d9 f7       	brne	.-10     	; 0x20d0 <__fixunssfsi+0x3c>
    20da:	3e f4       	brtc	.+14     	; 0x20ea <__fixunssfsi+0x56>
    20dc:	90 95       	com	r25
    20de:	80 95       	com	r24
    20e0:	70 95       	com	r23
    20e2:	61 95       	neg	r22
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	8f 4f       	sbci	r24, 0xFF	; 255
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	08 95       	ret

000020ec <__floatunsisf>:
    20ec:	e8 94       	clt
    20ee:	09 c0       	rjmp	.+18     	; 0x2102 <__floatsisf+0x12>

000020f0 <__floatsisf>:
    20f0:	97 fb       	bst	r25, 7
    20f2:	3e f4       	brtc	.+14     	; 0x2102 <__floatsisf+0x12>
    20f4:	90 95       	com	r25
    20f6:	80 95       	com	r24
    20f8:	70 95       	com	r23
    20fa:	61 95       	neg	r22
    20fc:	7f 4f       	sbci	r23, 0xFF	; 255
    20fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2100:	9f 4f       	sbci	r25, 0xFF	; 255
    2102:	99 23       	and	r25, r25
    2104:	a9 f0       	breq	.+42     	; 0x2130 <__floatsisf+0x40>
    2106:	f9 2f       	mov	r31, r25
    2108:	96 e9       	ldi	r25, 0x96	; 150
    210a:	bb 27       	eor	r27, r27
    210c:	93 95       	inc	r25
    210e:	f6 95       	lsr	r31
    2110:	87 95       	ror	r24
    2112:	77 95       	ror	r23
    2114:	67 95       	ror	r22
    2116:	b7 95       	ror	r27
    2118:	f1 11       	cpse	r31, r1
    211a:	f8 cf       	rjmp	.-16     	; 0x210c <__floatsisf+0x1c>
    211c:	fa f4       	brpl	.+62     	; 0x215c <__floatsisf+0x6c>
    211e:	bb 0f       	add	r27, r27
    2120:	11 f4       	brne	.+4      	; 0x2126 <__floatsisf+0x36>
    2122:	60 ff       	sbrs	r22, 0
    2124:	1b c0       	rjmp	.+54     	; 0x215c <__floatsisf+0x6c>
    2126:	6f 5f       	subi	r22, 0xFF	; 255
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	8f 4f       	sbci	r24, 0xFF	; 255
    212c:	9f 4f       	sbci	r25, 0xFF	; 255
    212e:	16 c0       	rjmp	.+44     	; 0x215c <__floatsisf+0x6c>
    2130:	88 23       	and	r24, r24
    2132:	11 f0       	breq	.+4      	; 0x2138 <__floatsisf+0x48>
    2134:	96 e9       	ldi	r25, 0x96	; 150
    2136:	11 c0       	rjmp	.+34     	; 0x215a <__floatsisf+0x6a>
    2138:	77 23       	and	r23, r23
    213a:	21 f0       	breq	.+8      	; 0x2144 <__floatsisf+0x54>
    213c:	9e e8       	ldi	r25, 0x8E	; 142
    213e:	87 2f       	mov	r24, r23
    2140:	76 2f       	mov	r23, r22
    2142:	05 c0       	rjmp	.+10     	; 0x214e <__floatsisf+0x5e>
    2144:	66 23       	and	r22, r22
    2146:	71 f0       	breq	.+28     	; 0x2164 <__floatsisf+0x74>
    2148:	96 e8       	ldi	r25, 0x86	; 134
    214a:	86 2f       	mov	r24, r22
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	2a f0       	brmi	.+10     	; 0x215c <__floatsisf+0x6c>
    2152:	9a 95       	dec	r25
    2154:	66 0f       	add	r22, r22
    2156:	77 1f       	adc	r23, r23
    2158:	88 1f       	adc	r24, r24
    215a:	da f7       	brpl	.-10     	; 0x2152 <__floatsisf+0x62>
    215c:	88 0f       	add	r24, r24
    215e:	96 95       	lsr	r25
    2160:	87 95       	ror	r24
    2162:	97 f9       	bld	r25, 7
    2164:	08 95       	ret

00002166 <__fp_inf>:
    2166:	97 f9       	bld	r25, 7
    2168:	9f 67       	ori	r25, 0x7F	; 127
    216a:	80 e8       	ldi	r24, 0x80	; 128
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	08 95       	ret

00002172 <__fp_nan>:
    2172:	9f ef       	ldi	r25, 0xFF	; 255
    2174:	80 ec       	ldi	r24, 0xC0	; 192
    2176:	08 95       	ret

00002178 <__fp_pscA>:
    2178:	00 24       	eor	r0, r0
    217a:	0a 94       	dec	r0
    217c:	16 16       	cp	r1, r22
    217e:	17 06       	cpc	r1, r23
    2180:	18 06       	cpc	r1, r24
    2182:	09 06       	cpc	r0, r25
    2184:	08 95       	ret

00002186 <__fp_pscB>:
    2186:	00 24       	eor	r0, r0
    2188:	0a 94       	dec	r0
    218a:	12 16       	cp	r1, r18
    218c:	13 06       	cpc	r1, r19
    218e:	14 06       	cpc	r1, r20
    2190:	05 06       	cpc	r0, r21
    2192:	08 95       	ret

00002194 <__fp_round>:
    2194:	09 2e       	mov	r0, r25
    2196:	03 94       	inc	r0
    2198:	00 0c       	add	r0, r0
    219a:	11 f4       	brne	.+4      	; 0x21a0 <__fp_round+0xc>
    219c:	88 23       	and	r24, r24
    219e:	52 f0       	brmi	.+20     	; 0x21b4 <__fp_round+0x20>
    21a0:	bb 0f       	add	r27, r27
    21a2:	40 f4       	brcc	.+16     	; 0x21b4 <__fp_round+0x20>
    21a4:	bf 2b       	or	r27, r31
    21a6:	11 f4       	brne	.+4      	; 0x21ac <__fp_round+0x18>
    21a8:	60 ff       	sbrs	r22, 0
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <__fp_round+0x20>
    21ac:	6f 5f       	subi	r22, 0xFF	; 255
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	8f 4f       	sbci	r24, 0xFF	; 255
    21b2:	9f 4f       	sbci	r25, 0xFF	; 255
    21b4:	08 95       	ret

000021b6 <__fp_split3>:
    21b6:	57 fd       	sbrc	r21, 7
    21b8:	90 58       	subi	r25, 0x80	; 128
    21ba:	44 0f       	add	r20, r20
    21bc:	55 1f       	adc	r21, r21
    21be:	59 f0       	breq	.+22     	; 0x21d6 <__fp_splitA+0x10>
    21c0:	5f 3f       	cpi	r21, 0xFF	; 255
    21c2:	71 f0       	breq	.+28     	; 0x21e0 <__fp_splitA+0x1a>
    21c4:	47 95       	ror	r20

000021c6 <__fp_splitA>:
    21c6:	88 0f       	add	r24, r24
    21c8:	97 fb       	bst	r25, 7
    21ca:	99 1f       	adc	r25, r25
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <__fp_splitA+0x20>
    21ce:	9f 3f       	cpi	r25, 0xFF	; 255
    21d0:	79 f0       	breq	.+30     	; 0x21f0 <__fp_splitA+0x2a>
    21d2:	87 95       	ror	r24
    21d4:	08 95       	ret
    21d6:	12 16       	cp	r1, r18
    21d8:	13 06       	cpc	r1, r19
    21da:	14 06       	cpc	r1, r20
    21dc:	55 1f       	adc	r21, r21
    21de:	f2 cf       	rjmp	.-28     	; 0x21c4 <__fp_split3+0xe>
    21e0:	46 95       	lsr	r20
    21e2:	f1 df       	rcall	.-30     	; 0x21c6 <__fp_splitA>
    21e4:	08 c0       	rjmp	.+16     	; 0x21f6 <__fp_splitA+0x30>
    21e6:	16 16       	cp	r1, r22
    21e8:	17 06       	cpc	r1, r23
    21ea:	18 06       	cpc	r1, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	f1 cf       	rjmp	.-30     	; 0x21d2 <__fp_splitA+0xc>
    21f0:	86 95       	lsr	r24
    21f2:	71 05       	cpc	r23, r1
    21f4:	61 05       	cpc	r22, r1
    21f6:	08 94       	sec
    21f8:	08 95       	ret

000021fa <__fp_zero>:
    21fa:	e8 94       	clt

000021fc <__fp_szero>:
    21fc:	bb 27       	eor	r27, r27
    21fe:	66 27       	eor	r22, r22
    2200:	77 27       	eor	r23, r23
    2202:	cb 01       	movw	r24, r22
    2204:	97 f9       	bld	r25, 7
    2206:	08 95       	ret

00002208 <__mulsf3>:
    2208:	0b d0       	rcall	.+22     	; 0x2220 <__mulsf3x>
    220a:	c4 cf       	rjmp	.-120    	; 0x2194 <__fp_round>
    220c:	b5 df       	rcall	.-150    	; 0x2178 <__fp_pscA>
    220e:	28 f0       	brcs	.+10     	; 0x221a <__mulsf3+0x12>
    2210:	ba df       	rcall	.-140    	; 0x2186 <__fp_pscB>
    2212:	18 f0       	brcs	.+6      	; 0x221a <__mulsf3+0x12>
    2214:	95 23       	and	r25, r21
    2216:	09 f0       	breq	.+2      	; 0x221a <__mulsf3+0x12>
    2218:	a6 cf       	rjmp	.-180    	; 0x2166 <__fp_inf>
    221a:	ab cf       	rjmp	.-170    	; 0x2172 <__fp_nan>
    221c:	11 24       	eor	r1, r1
    221e:	ee cf       	rjmp	.-36     	; 0x21fc <__fp_szero>

00002220 <__mulsf3x>:
    2220:	ca df       	rcall	.-108    	; 0x21b6 <__fp_split3>
    2222:	a0 f3       	brcs	.-24     	; 0x220c <__mulsf3+0x4>

00002224 <__mulsf3_pse>:
    2224:	95 9f       	mul	r25, r21
    2226:	d1 f3       	breq	.-12     	; 0x221c <__mulsf3+0x14>
    2228:	95 0f       	add	r25, r21
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	55 1f       	adc	r21, r21
    222e:	62 9f       	mul	r22, r18
    2230:	f0 01       	movw	r30, r0
    2232:	72 9f       	mul	r23, r18
    2234:	bb 27       	eor	r27, r27
    2236:	f0 0d       	add	r31, r0
    2238:	b1 1d       	adc	r27, r1
    223a:	63 9f       	mul	r22, r19
    223c:	aa 27       	eor	r26, r26
    223e:	f0 0d       	add	r31, r0
    2240:	b1 1d       	adc	r27, r1
    2242:	aa 1f       	adc	r26, r26
    2244:	64 9f       	mul	r22, r20
    2246:	66 27       	eor	r22, r22
    2248:	b0 0d       	add	r27, r0
    224a:	a1 1d       	adc	r26, r1
    224c:	66 1f       	adc	r22, r22
    224e:	82 9f       	mul	r24, r18
    2250:	22 27       	eor	r18, r18
    2252:	b0 0d       	add	r27, r0
    2254:	a1 1d       	adc	r26, r1
    2256:	62 1f       	adc	r22, r18
    2258:	73 9f       	mul	r23, r19
    225a:	b0 0d       	add	r27, r0
    225c:	a1 1d       	adc	r26, r1
    225e:	62 1f       	adc	r22, r18
    2260:	83 9f       	mul	r24, r19
    2262:	a0 0d       	add	r26, r0
    2264:	61 1d       	adc	r22, r1
    2266:	22 1f       	adc	r18, r18
    2268:	74 9f       	mul	r23, r20
    226a:	33 27       	eor	r19, r19
    226c:	a0 0d       	add	r26, r0
    226e:	61 1d       	adc	r22, r1
    2270:	23 1f       	adc	r18, r19
    2272:	84 9f       	mul	r24, r20
    2274:	60 0d       	add	r22, r0
    2276:	21 1d       	adc	r18, r1
    2278:	82 2f       	mov	r24, r18
    227a:	76 2f       	mov	r23, r22
    227c:	6a 2f       	mov	r22, r26
    227e:	11 24       	eor	r1, r1
    2280:	9f 57       	subi	r25, 0x7F	; 127
    2282:	50 40       	sbci	r21, 0x00	; 0
    2284:	8a f0       	brmi	.+34     	; 0x22a8 <__mulsf3_pse+0x84>
    2286:	e1 f0       	breq	.+56     	; 0x22c0 <__mulsf3_pse+0x9c>
    2288:	88 23       	and	r24, r24
    228a:	4a f0       	brmi	.+18     	; 0x229e <__mulsf3_pse+0x7a>
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	bb 1f       	adc	r27, r27
    2292:	66 1f       	adc	r22, r22
    2294:	77 1f       	adc	r23, r23
    2296:	88 1f       	adc	r24, r24
    2298:	91 50       	subi	r25, 0x01	; 1
    229a:	50 40       	sbci	r21, 0x00	; 0
    229c:	a9 f7       	brne	.-22     	; 0x2288 <__mulsf3_pse+0x64>
    229e:	9e 3f       	cpi	r25, 0xFE	; 254
    22a0:	51 05       	cpc	r21, r1
    22a2:	70 f0       	brcs	.+28     	; 0x22c0 <__mulsf3_pse+0x9c>
    22a4:	60 cf       	rjmp	.-320    	; 0x2166 <__fp_inf>
    22a6:	aa cf       	rjmp	.-172    	; 0x21fc <__fp_szero>
    22a8:	5f 3f       	cpi	r21, 0xFF	; 255
    22aa:	ec f3       	brlt	.-6      	; 0x22a6 <__mulsf3_pse+0x82>
    22ac:	98 3e       	cpi	r25, 0xE8	; 232
    22ae:	dc f3       	brlt	.-10     	; 0x22a6 <__mulsf3_pse+0x82>
    22b0:	86 95       	lsr	r24
    22b2:	77 95       	ror	r23
    22b4:	67 95       	ror	r22
    22b6:	b7 95       	ror	r27
    22b8:	f7 95       	ror	r31
    22ba:	e7 95       	ror	r30
    22bc:	9f 5f       	subi	r25, 0xFF	; 255
    22be:	c1 f7       	brne	.-16     	; 0x22b0 <__mulsf3_pse+0x8c>
    22c0:	fe 2b       	or	r31, r30
    22c2:	88 0f       	add	r24, r24
    22c4:	91 1d       	adc	r25, r1
    22c6:	96 95       	lsr	r25
    22c8:	87 95       	ror	r24
    22ca:	97 f9       	bld	r25, 7
    22cc:	08 95       	ret

000022ce <itoa>:
    22ce:	fb 01       	movw	r30, r22
    22d0:	9f 01       	movw	r18, r30
    22d2:	e8 94       	clt
    22d4:	42 30       	cpi	r20, 0x02	; 2
    22d6:	c4 f0       	brlt	.+48     	; 0x2308 <itoa+0x3a>
    22d8:	45 32       	cpi	r20, 0x25	; 37
    22da:	b4 f4       	brge	.+44     	; 0x2308 <itoa+0x3a>
    22dc:	4a 30       	cpi	r20, 0x0A	; 10
    22de:	29 f4       	brne	.+10     	; 0x22ea <itoa+0x1c>
    22e0:	97 fb       	bst	r25, 7
    22e2:	1e f4       	brtc	.+6      	; 0x22ea <itoa+0x1c>
    22e4:	90 95       	com	r25
    22e6:	81 95       	neg	r24
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	64 2f       	mov	r22, r20
    22ec:	77 27       	eor	r23, r23
    22ee:	0e 94 98 11 	call	0x2330	; 0x2330 <__udivmodhi4>
    22f2:	80 5d       	subi	r24, 0xD0	; 208
    22f4:	8a 33       	cpi	r24, 0x3A	; 58
    22f6:	0c f0       	brlt	.+2      	; 0x22fa <itoa+0x2c>
    22f8:	89 5d       	subi	r24, 0xD9	; 217
    22fa:	81 93       	st	Z+, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	a1 f7       	brne	.-24     	; 0x22ea <itoa+0x1c>
    2302:	16 f4       	brtc	.+4      	; 0x2308 <itoa+0x3a>
    2304:	5d e2       	ldi	r21, 0x2D	; 45
    2306:	51 93       	st	Z+, r21
    2308:	10 82       	st	Z, r1
    230a:	c9 01       	movw	r24, r18
    230c:	0c 94 88 11 	jmp	0x2310	; 0x2310 <strrev>

00002310 <strrev>:
    2310:	dc 01       	movw	r26, r24
    2312:	fc 01       	movw	r30, r24
    2314:	67 2f       	mov	r22, r23
    2316:	71 91       	ld	r23, Z+
    2318:	77 23       	and	r23, r23
    231a:	e1 f7       	brne	.-8      	; 0x2314 <strrev+0x4>
    231c:	32 97       	sbiw	r30, 0x02	; 2
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <strrev+0x18>
    2320:	7c 91       	ld	r23, X
    2322:	6d 93       	st	X+, r22
    2324:	70 83       	st	Z, r23
    2326:	62 91       	ld	r22, -Z
    2328:	ae 17       	cp	r26, r30
    232a:	bf 07       	cpc	r27, r31
    232c:	c8 f3       	brcs	.-14     	; 0x2320 <strrev+0x10>
    232e:	08 95       	ret

00002330 <__udivmodhi4>:
    2330:	aa 1b       	sub	r26, r26
    2332:	bb 1b       	sub	r27, r27
    2334:	51 e1       	ldi	r21, 0x11	; 17
    2336:	07 c0       	rjmp	.+14     	; 0x2346 <__udivmodhi4_ep>

00002338 <__udivmodhi4_loop>:
    2338:	aa 1f       	adc	r26, r26
    233a:	bb 1f       	adc	r27, r27
    233c:	a6 17       	cp	r26, r22
    233e:	b7 07       	cpc	r27, r23
    2340:	10 f0       	brcs	.+4      	; 0x2346 <__udivmodhi4_ep>
    2342:	a6 1b       	sub	r26, r22
    2344:	b7 0b       	sbc	r27, r23

00002346 <__udivmodhi4_ep>:
    2346:	88 1f       	adc	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	5a 95       	dec	r21
    234c:	a9 f7       	brne	.-22     	; 0x2338 <__udivmodhi4_loop>
    234e:	80 95       	com	r24
    2350:	90 95       	com	r25
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	08 95       	ret

00002358 <_exit>:
    2358:	f8 94       	cli

0000235a <__stop_program>:
    235a:	ff cf       	rjmp	.-2      	; 0x235a <__stop_program>
