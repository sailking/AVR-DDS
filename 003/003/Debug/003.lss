
003.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  0000177c  00001810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000177c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000052f  008001a2  008001a2  000018b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d84  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae3  00000000  00000000  00004968  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001eda  00000000  00000000  0000544b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000834  00000000  00000000  00007328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088d  00000000  00000000  00007b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b7c  00000000  00000000  000083e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000af65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__ctors_end>
       4:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
       8:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
       c:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      10:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      14:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      18:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      1c:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      20:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      24:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__vector_9>
      28:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      2c:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      30:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      34:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      38:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      3c:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      40:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      44:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      48:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      4c:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      50:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__vector_20>
      54:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      58:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_22>
      5c:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      60:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      64:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      68:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      6c:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      70:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_28>
      74:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      78:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_30>
      7c:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      80:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      84:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>
      88:	0c 94 8b 03 	jmp	0x716	; 0x716 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	4c 69       	ori	r20, 0x9C	; 156
      8e:	20 58       	subi	r18, 0x80	; 128
      90:	75 65       	ori	r23, 0x55	; 85
      92:	6a 69       	ori	r22, 0x9A	; 154
      94:	6e 67       	ori	r22, 0x7E	; 126
      96:	0d 0a       	sbc	r0, r29
	...

00000099 <__c.2122>:
      99:	57 61 6e 67 20 53 68 69 68 61 6e 67 0d 0a 00        Wang Shihang...

000000a8 <__c.2120>:
      a8:	4d 65 6d 62 65 72 73 3a 0d 0a 00                    Members:...

000000b3 <__c.2118>:
      b3:	44 44 53 2d 53 69 67 6e 61 6c 67 65 6e 65 72 61     DDS-Signalgenera
      c3:	74 6f 72 0d 0a 00                                   tor...

000000c9 <__c.2116>:
      c9:	50 72 6f 6a 65 63 74 20 30 34 3a 0d 0a 00           Project 04:...

000000d7 <font>:
      d7:	00 00 00 00 00 00 00 3e 45 51 45 3e 00 3e 6b 6f     .......>EQE>.>ko
      e7:	6b 3e 00 1c 3e 7c 3e 1c 00 18 3c 7e 3c 18 00 30     k>..>|>...<~<..0
      f7:	36 7f 36 30 00 18 5c 7e 5c 18 00 00 00 00 00 00     6.60..\~\.......
	...
     117:	00 00 00 30 48 4a 36 0e 00 06 29 79 29 06 00 00     ...0HJ6...)y)...
     127:	00 00 00 00 00 60 7e 0a 35 3f 00 2a 1c 36 1c 2a     .....`~.5?.*.6.*
     137:	00 00 7f 3e 1c 08 00 08 1c 3e 7f 00 00 14 36 7f     ...>.....>....6.
     147:	36 14 00 00 5f 00 5f 00 00 06 09 7f 01 7f 00 22     6..._._........"
     157:	4d 55 59 22 00 60 60 60 60 00 00 14 b6 ff b6 14     MUY".````.......
     167:	00 04 06 7f 06 04 00 10 30 7f 30 10 00 08 08 3e     ........0.0....>
     177:	1c 08 00 08 1c 3e 08 08 00 78 40 40 40 40 00 08     .....>...x@@@@..
     187:	3e 08 3e 08 00 30 3c 3f 3c 30 00 03 0f 3f 0f 03     >.>..0<?<0...?..
	...
     19f:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     1af:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     1bf:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     1cf:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     1df:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     1ef:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     1ff:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     20f:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     21f:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     22f:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     23f:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     24f:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     25f:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     26f:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     27f:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     28f:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     29f:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     2af:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     2bf:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     2cf:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     2df:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     2ef:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     2ff:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     30f:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     31f:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     32f:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     33f:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     34f:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     35f:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     36f:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     37f:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     38f:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     39f:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     3af:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     3bf:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     3cf:	01 00 00 3c 26 23 26 3c 00 1e a1 e1 21 12 00 3d     ...<&#&<....!..=
     3df:	40 20 7d 00 00 38 54 54 55 09 00 20 55 55 55 78     @ }..8TTU.. UUUx
     3ef:	00 20 55 54 55 78 00 20 55 55 54 78 00 20 57 55     . UTUx. UUTx. WU
     3ff:	57 78 00 1c a2 e2 22 14 00 38 55 55 55 08 00 38     Wx...."..8UUU..8
     40f:	55 54 55 08 00 38 55 55 54 08 00 00 01 7c 41 00     UTU..8UUT....|A.
     41f:	00 00 01 7d 41 00 00 00 01 7c 40 00 00 70 29 24     ...}A....|@..p)$
     42f:	29 70 00 78 2f 25 2f 78 00 7c 54 54 55 45 00 34     )p.x/%/x.|TTUE.4
     43f:	54 7c 54 58 00 7e 09 7f 49 49 00 38 45 45 39 00     T|TX.~..II.8EE9.
     44f:	00 38 45 44 39 00 00 39 45 44 38 00 00 3c 41 21     .8ED9..9ED8..<A!
     45f:	7d 00 00 3d 41 20 7c 00 00 9c a1 60 3d 00 00 3d     }..=A |....`=..=
     46f:	42 42 3d 00 00 3c 41 40 3d 00 80 70 68 58 38 04     BB=..<A@=..phX8.
     47f:	00 48 3e 49 49 62 00 7e 61 5d 43 3f 00 22 14 08     .H>IIb.~a]C?."..
     48f:	14 22 00 40 88 7e 09 02 00 20 54 55 55 78 00 00     .".@.~... TUUx..
     49f:	00 7d 41 00 00 38 44 45 39 00 00 3c 40 21 7d 00     .}A..8DE9..<@!}.
     4af:	00 7a 09 0a 71 00 00 7a 11 22 79 00 00 08 55 55     .z..q..z."y...UU
     4bf:	55 5e 00 4e 51 51 4e 00 00 30 48 4d 40 20 3e 41     U^.NQQN..0HM@ >A
     4cf:	5d 4b 55 3e 04 04 04 04 04 1c 00 17 08 4c 6a 50     ]KU>.........LjP
     4df:	00 17 08 34 2a 78 00 00 30 7d 30 00 00 08 14 00     ...4*x..0}0.....
     4ef:	08 14 00 14 08 00 14 08 44 11 44 11 44 11 aa 55     ........D.D.D..U
     4ff:	aa 55 aa 55 bb ee bb ee bb ee 00 00 00 ff 00 00     .U.U............
     50f:	08 08 08 ff 00 00 00 70 28 25 29 70 00 70 29 25     .......p(%)p.p)%
     51f:	29 70 00 70 29 25 28 70 3e 41 5d 55 41 3e 0a fb     )p.p)%(p>A]UA>..
     52f:	00 ff 00 00 00 ff 00 ff 00 00 0a fa 02 fe 00 00     ................
     53f:	0a 0b 08 0f 00 00 00 18 24 66 24 00 00 29 2a 7c     ........$f$..)*|
     54f:	2a 29 08 08 08 f8 00 00 00 00 00 0f 08 08 08 08     *)..............
     55f:	08 0f 08 08 08 08 08 f8 08 08 00 00 00 ff 08 08     ................
     56f:	08 08 08 08 08 08 08 08 08 ff 08 08 00 20 56 55     ............. VU
     57f:	56 79 00 70 2a 25 2a 71 00 0f 08 0b 0a 0a 00 fe     Vy.p*%*q........
     58f:	02 fa 0a 0a 0a 0b 08 0b 0a 0a 0a fa 02 fa 0a 0a     ................
     59f:	00 ff 00 fb 0a 0a 0a 0a 0a 0a 0a 0a 0a fb 00 fb     ................
     5af:	0a 0a 00 5d 22 22 22 5d 00 22 55 59 30 00 00 08     ...]"""]."UY0...
     5bf:	7f 49 41 3e 00 7c 55 55 55 44 00 7c 55 54 55 44     .IA>.|UUUD.|UTUD
     5cf:	00 7c 55 55 54 44 00 00 00 07 00 00 00 00 44 7d     .|UUTD........D}
     5df:	45 00 00 00 45 7d 45 00 00 00 45 7c 45 00 08 08     E...E}E...E|E...
     5ef:	08 0f 00 00 00 00 00 f8 08 08 ff ff ff ff ff ff     ................
     5ff:	f0 f0 f0 f0 f0 f0 00 00 00 77 00 00 00 00 45 7d     .........w....E}
     60f:	44 00 0f 0f 0f 0f 0f 0f 00 3c 42 43 3d 00 00 fe     D........<BC=...
     61f:	4a 4a 34 00 00 3c 43 43 3d 00 00 3d 43 42 3c 00     JJ4..<CC=..=CB<.
     62f:	00 32 49 4a 31 00 00 3a 45 46 39 00 00 fc 20 20     .2IJ1..:EF9...  
     63f:	1c 00 00 fe aa 28 10 00 00 ff a5 24 18 00 00 3c     .....(.....$...<
     64f:	40 41 3d 00 00 3c 41 41 3d 00 00 3d 41 40 3c 00     @A=..<AA=..=A@<.
     65f:	00 9c a0 61 3d 00 00 04 08 71 09 04 00 00 02 02     ...a=....q......
     66f:	02 00 00 00 07 03 00 00 00 00 08 08 08 00 00 00     ................
     67f:	24 2e 24 00 00 24 24 24 24 24 05 17 0a 34 2a 78     $.$..$$$$$...4*x
     68f:	00 06 09 7f 01 7f 00 22 4d 55 59 22 00 08 08 2a     ......."MUY"...*
     69f:	08 08 00 00 08 18 18 00 00 06 09 09 06 00 00 00     ................
     6af:	08 00 08 00 00 00 08 00 00 00 00 02 0f 00 00 00     ................
     6bf:	00 09 0f 05 00 00 00 09 0d 0a 00 00 00 3c 3c 3c     .............<<<
     6cf:	3c 00 00 00 00 00 00 00 00                          <........

000006d8 <__ctors_end>:
     6d8:	11 24       	eor	r1, r1
     6da:	1f be       	out	0x3f, r1	; 63
     6dc:	cf ef       	ldi	r28, 0xFF	; 255
     6de:	d0 e4       	ldi	r29, 0x40	; 64
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	cd bf       	out	0x3d, r28	; 61

000006e4 <__do_copy_data>:
     6e4:	11 e0       	ldi	r17, 0x01	; 1
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b1 e0       	ldi	r27, 0x01	; 1
     6ea:	ec e7       	ldi	r30, 0x7C	; 124
     6ec:	f7 e1       	ldi	r31, 0x17	; 23
     6ee:	00 e0       	ldi	r16, 0x00	; 0
     6f0:	0b bf       	out	0x3b, r16	; 59
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__do_copy_data+0x14>
     6f4:	07 90       	elpm	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	a2 3a       	cpi	r26, 0xA2	; 162
     6fa:	b1 07       	cpc	r27, r17
     6fc:	d9 f7       	brne	.-10     	; 0x6f4 <__do_copy_data+0x10>

000006fe <__do_clear_bss>:
     6fe:	26 e0       	ldi	r18, 0x06	; 6
     700:	a2 ea       	ldi	r26, 0xA2	; 162
     702:	b1 e0       	ldi	r27, 0x01	; 1
     704:	01 c0       	rjmp	.+2      	; 0x708 <.do_clear_bss_start>

00000706 <.do_clear_bss_loop>:
     706:	1d 92       	st	X+, r1

00000708 <.do_clear_bss_start>:
     708:	a1 3d       	cpi	r26, 0xD1	; 209
     70a:	b2 07       	cpc	r27, r18
     70c:	e1 f7       	brne	.-8      	; 0x706 <.do_clear_bss_loop>
     70e:	0e 94 02 06 	call	0xc04	; 0xc04 <main>
     712:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <_exit>

00000716 <__bad_interrupt>:
     716:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000071a <start>:
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
			lcd_framebuffer[fb_y][fb_x] = pgm_read_byte(&raster[raster_offset++]);
	lcd_frameupdate = 0xff;
	LCD_Update();
	while(1);
     71a:	85 e1       	ldi	r24, 0x15	; 21
     71c:	0e 94 07 08 	call	0x100e	; 0x100e <Backlight_LED>
     720:	89 ec       	ldi	r24, 0xC9	; 201
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_PutString_P>
     728:	83 eb       	ldi	r24, 0xB3	; 179
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_PutString_P>
     730:	88 ea       	ldi	r24, 0xA8	; 168
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_PutString_P>
     738:	89 e9       	ldi	r24, 0x99	; 153
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_PutString_P>
     740:	8c e8       	ldi	r24, 0x8C	; 140
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_PutString_P>
     748:	0e 94 ac 06 	call	0xd58	; 0xd58 <LCD_Update>
     74c:	67 e0       	ldi	r22, 0x07	; 7
     74e:	84 e1       	ldi	r24, 0x14	; 20
     750:	0e 94 b6 07 	call	0xf6c	; 0xf6c <LCD_GotoXY>
     754:	80 e1       	ldi	r24, 0x10	; 16
     756:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <LCD_PutChar>
     75a:	0e 94 ac 06 	call	0xd58	; 0xd58 <LCD_Update>
     75e:	03 99       	sbic	0x00, 3	; 0
     760:	fe cf       	rjmp	.-4      	; 0x75e <start+0x44>
     762:	03 9b       	sbis	0x00, 3	; 0
     764:	fe cf       	rjmp	.-4      	; 0x762 <start+0x48>
     766:	2f ef       	ldi	r18, 0xFF	; 255
     768:	89 ef       	ldi	r24, 0xF9	; 249
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	21 50       	subi	r18, 0x01	; 1
     76e:	80 40       	sbci	r24, 0x00	; 0
     770:	90 40       	sbci	r25, 0x00	; 0
     772:	e1 f7       	brne	.-8      	; 0x76c <start+0x52>
     774:	00 c0       	rjmp	.+0      	; 0x776 <start+0x5c>
     776:	00 00       	nop
     778:	03 99       	sbic	0x00, 3	; 0
     77a:	fe cf       	rjmp	.-4      	; 0x778 <start+0x5e>
     77c:	08 95       	ret

0000077e <AD9850_setup>:
     77e:	87 b1       	in	r24, 0x07	; 7
     780:	8c 63       	ori	r24, 0x3C	; 60
     782:	87 b9       	out	0x07, r24	; 7
     784:	88 b1       	in	r24, 0x08	; 8
     786:	83 7c       	andi	r24, 0xC3	; 195
     788:	88 b9       	out	0x08, r24	; 8
     78a:	08 95       	ret

0000078c <AD9850_reset>:
     78c:	88 b1       	in	r24, 0x08	; 8
     78e:	87 7e       	andi	r24, 0xE7	; 231
     790:	88 b9       	out	0x08, r24	; 8
     792:	42 98       	cbi	0x08, 2	; 8
     794:	8a e1       	ldi	r24, 0x1A	; 26
     796:	8a 95       	dec	r24
     798:	f1 f7       	brne	.-4      	; 0x796 <AD9850_reset+0xa>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <AD9850_reset+0x10>
     79c:	42 9a       	sbi	0x08, 2	; 8
     79e:	8a e1       	ldi	r24, 0x1A	; 26
     7a0:	8a 95       	dec	r24
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <AD9850_reset+0x14>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <AD9850_reset+0x1a>
     7a6:	42 98       	cbi	0x08, 2	; 8
     7a8:	8a e1       	ldi	r24, 0x1A	; 26
     7aa:	8a 95       	dec	r24
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <AD9850_reset+0x1e>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <AD9850_reset+0x24>
     7b0:	44 98       	cbi	0x08, 4	; 8
     7b2:	8a e1       	ldi	r24, 0x1A	; 26
     7b4:	8a 95       	dec	r24
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <AD9850_reset+0x28>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <AD9850_reset+0x2e>
     7ba:	44 9a       	sbi	0x08, 4	; 8
     7bc:	8a e1       	ldi	r24, 0x1A	; 26
     7be:	8a 95       	dec	r24
     7c0:	f1 f7       	brne	.-4      	; 0x7be <AD9850_reset+0x32>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <AD9850_reset+0x38>
     7c4:	44 98       	cbi	0x08, 4	; 8
     7c6:	8a e1       	ldi	r24, 0x1A	; 26
     7c8:	8a 95       	dec	r24
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <AD9850_reset+0x3c>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <AD9850_reset+0x42>
     7ce:	45 98       	cbi	0x08, 5	; 8
     7d0:	43 98       	cbi	0x08, 3	; 8
     7d2:	8a e1       	ldi	r24, 0x1A	; 26
     7d4:	8a 95       	dec	r24
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <AD9850_reset+0x48>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <AD9850_reset+0x4e>
     7da:	43 9a       	sbi	0x08, 3	; 8
     7dc:	8a e1       	ldi	r24, 0x1A	; 26
     7de:	8a 95       	dec	r24
     7e0:	f1 f7       	brne	.-4      	; 0x7de <AD9850_reset+0x52>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <AD9850_reset+0x58>
     7e4:	43 98       	cbi	0x08, 3	; 8
     7e6:	8a e1       	ldi	r24, 0x1A	; 26
     7e8:	8a 95       	dec	r24
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <AD9850_reset+0x5c>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <AD9850_reset+0x62>
     7ee:	08 95       	ret

000007f0 <AD9850_Setfrequency>:
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	34 e2       	ldi	r19, 0x24	; 36
     7f4:	44 e7       	ldi	r20, 0x74	; 116
     7f6:	59 e4       	ldi	r21, 0x49	; 73
     7f8:	0e 94 11 0a 	call	0x1422	; 0x1422 <__divsf3>
     7fc:	2f e6       	ldi	r18, 0x6F	; 111
     7fe:	32 e1       	ldi	r19, 0x12	; 18
     800:	43 e0       	ldi	r20, 0x03	; 3
     802:	5c e4       	ldi	r21, 0x4C	; 76
     804:	0e 94 40 0b 	call	0x1680	; 0x1680 <__mulsf3>
     808:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fixunssfsi>
     80c:	43 98       	cbi	0x08, 3	; 8
     80e:	28 e0       	ldi	r18, 0x08	; 8
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	60 ff       	sbrs	r22, 0
     814:	02 c0       	rjmp	.+4      	; 0x81a <AD9850_Setfrequency+0x2a>
     816:	45 9a       	sbi	0x08, 5	; 8
     818:	01 c0       	rjmp	.+2      	; 0x81c <AD9850_Setfrequency+0x2c>
     81a:	45 98       	cbi	0x08, 5	; 8
     81c:	44 9a       	sbi	0x08, 4	; 8
     81e:	44 98       	cbi	0x08, 4	; 8
     820:	66 95       	lsr	r22
     822:	21 50       	subi	r18, 0x01	; 1
     824:	31 09       	sbc	r19, r1
     826:	a9 f7       	brne	.-22     	; 0x812 <AD9850_Setfrequency+0x22>
     828:	28 e0       	ldi	r18, 0x08	; 8
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	70 ff       	sbrs	r23, 0
     82e:	02 c0       	rjmp	.+4      	; 0x834 <AD9850_Setfrequency+0x44>
     830:	45 9a       	sbi	0x08, 5	; 8
     832:	01 c0       	rjmp	.+2      	; 0x836 <AD9850_Setfrequency+0x46>
     834:	45 98       	cbi	0x08, 5	; 8
     836:	44 9a       	sbi	0x08, 4	; 8
     838:	44 98       	cbi	0x08, 4	; 8
     83a:	76 95       	lsr	r23
     83c:	21 50       	subi	r18, 0x01	; 1
     83e:	31 09       	sbc	r19, r1
     840:	a9 f7       	brne	.-22     	; 0x82c <AD9850_Setfrequency+0x3c>
     842:	28 e0       	ldi	r18, 0x08	; 8
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	80 ff       	sbrs	r24, 0
     848:	02 c0       	rjmp	.+4      	; 0x84e <AD9850_Setfrequency+0x5e>
     84a:	45 9a       	sbi	0x08, 5	; 8
     84c:	01 c0       	rjmp	.+2      	; 0x850 <AD9850_Setfrequency+0x60>
     84e:	45 98       	cbi	0x08, 5	; 8
     850:	44 9a       	sbi	0x08, 4	; 8
     852:	44 98       	cbi	0x08, 4	; 8
     854:	86 95       	lsr	r24
     856:	86 95       	lsr	r24
     858:	21 50       	subi	r18, 0x01	; 1
     85a:	31 09       	sbc	r19, r1
     85c:	a1 f7       	brne	.-24     	; 0x846 <AD9850_Setfrequency+0x56>
     85e:	28 e0       	ldi	r18, 0x08	; 8
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	90 ff       	sbrs	r25, 0
     864:	02 c0       	rjmp	.+4      	; 0x86a <AD9850_Setfrequency+0x7a>
     866:	45 9a       	sbi	0x08, 5	; 8
     868:	01 c0       	rjmp	.+2      	; 0x86c <AD9850_Setfrequency+0x7c>
     86a:	45 98       	cbi	0x08, 5	; 8
     86c:	44 9a       	sbi	0x08, 4	; 8
     86e:	44 98       	cbi	0x08, 4	; 8
     870:	96 95       	lsr	r25
     872:	21 50       	subi	r18, 0x01	; 1
     874:	31 09       	sbc	r19, r1
     876:	a9 f7       	brne	.-22     	; 0x862 <AD9850_Setfrequency+0x72>
     878:	88 e0       	ldi	r24, 0x08	; 8
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	45 98       	cbi	0x08, 5	; 8
     87e:	44 9a       	sbi	0x08, 4	; 8
     880:	44 98       	cbi	0x08, 4	; 8
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	d9 f7       	brne	.-10     	; 0x87c <AD9850_Setfrequency+0x8c>
     886:	43 9a       	sbi	0x08, 3	; 8
     888:	8a e1       	ldi	r24, 0x1A	; 26
     88a:	8a 95       	dec	r24
     88c:	f1 f7       	brne	.-4      	; 0x88a <AD9850_Setfrequency+0x9a>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <AD9850_Setfrequency+0xa0>
     890:	43 98       	cbi	0x08, 3	; 8
     892:	08 95       	ret

00000894 <adc_init>:
     894:	81 e6       	ldi	r24, 0x61	; 97
     896:	80 93 7c 00 	sts	0x007C, r24
     89a:	ea e7       	ldi	r30, 0x7A	; 122
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	82 6c       	ori	r24, 0xC2	; 194
     8a2:	80 83       	st	Z, r24
     8a4:	08 95       	ret

000008a6 <create_wave>:
}

void create_wave()
{
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	0f 2e       	mov	r0, r31
     8b4:	f6 ea       	ldi	r31, 0xA6	; 166
     8b6:	ef 2e       	mov	r14, r31
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	ff 2e       	mov	r15, r31
     8bc:	f0 2d       	mov	r31, r0
     8be:	0a e0       	ldi	r16, 0x0A	; 10
     8c0:	12 e0       	ldi	r17, 0x02	; 2
     8c2:	e7 01       	movw	r28, r14
     8c4:	8c 2f       	mov	r24, r28
     8c6:	8e 19       	sub	r24, r14
	uint8_t i;
	for(i=0;i<100;i++)
	{
		LCD_DrawPixel(i,dataLcdBuffer[i],1);
     8c8:	69 91       	ld	r22, Y+
     8ca:	41 e0       	ldi	r20, 0x01	; 1
     8cc:	0e 94 12 07 	call	0xe24	; 0xe24 <LCD_DrawPixel>
}

void create_wave()
{
	uint8_t i;
	for(i=0;i<100;i++)
     8d0:	c0 17       	cp	r28, r16
     8d2:	d1 07       	cpc	r29, r17
     8d4:	b9 f7       	brne	.-18     	; 0x8c4 <create_wave+0x1e>
	{
		LCD_DrawPixel(i,dataLcdBuffer[i],1);
	}
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	08 95       	ret

000008e4 <signal_display>:
	uint16_t i,k;
	//uint32_t endOfPeriod=0;
	uint8_t freqComplete=0;

	//create_raster();
	create_wave();
     8e4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <create_wave>
		if(~PINA&(1<<PINA3))
			while(~PINA&(1<<PINA3));

		findZero = 0;
		upLimit = 0;
		lowLimit = 255;
     8e8:	77 24       	eor	r7, r7
     8ea:	7a 94       	dec	r7
		//endOfPeriod = 0;
		freqComplete = 0;
		complete = FALSE;

		for (i=2; i<15000; i++)
     8ec:	68 94       	set
     8ee:	99 24       	eor	r9, r9
     8f0:	91 f8       	bld	r9, 1
     8f2:	a1 2c       	mov	r10, r1
		{
			ADCSRA |= (1 << ADSC); // Enable ADC
     8f4:	ca e7       	ldi	r28, 0x7A	; 122
     8f6:	d0 e0       	ldi	r29, 0x00	; 0
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;
     8f8:	09 e7       	ldi	r16, 0x79	; 121
     8fa:	10 e0       	ldi	r17, 0x00	; 0

			if (upLimit < ADCvalue)  // Find the higher voltage level of the input waveform.
				upLimit = ADCvalue;

			if (lowLimit > ADCvalue) // Find the lower voltage level of the input waveform.
				lowLimit = ADCvalue;
     8fc:	0f 2e       	mov	r0, r31
     8fe:	ff e2       	ldi	r31, 0x2F	; 47
     900:	ef 2e       	mov	r14, r31
     902:	f2 e0       	ldi	r31, 0x02	; 2
     904:	ff 2e       	mov	r15, r31
     906:	f0 2d       	mov	r31, r0
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
			{
				freqComplete = 3; //we found the end of the first period.
     908:	0f 2e       	mov	r0, r31
     90a:	f3 e0       	ldi	r31, 0x03	; 3
     90c:	8f 2e       	mov	r8, r31
     90e:	f0 2d       	mov	r31, r0
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     910:	68 94       	set
     912:	bb 24       	eor	r11, r11
     914:	b1 f8       	bld	r11, 1
				ADCvalue += 5;
				ADCvalue /= 5;
				ADCvalue += 2;
			}
			else
				ADCvalue = 2;
     916:	c9 2c       	mov	r12, r9
     918:	da 2c       	mov	r13, r10
	//create_raster();
	create_wave();

	for(;;)
	{
		if((~PINA&(1<<PINA7))&& (timeDiv <= 120))
     91a:	07 99       	sbic	0x00, 7	; 0
     91c:	19 c0       	rjmp	.+50     	; 0x950 <signal_display+0x6c>
     91e:	80 91 11 02 	lds	r24, 0x0211
     922:	90 91 12 02 	lds	r25, 0x0212
     926:	89 37       	cpi	r24, 0x79	; 121
     928:	91 05       	cpc	r25, r1
     92a:	90 f4       	brcc	.+36     	; 0x950 <signal_display+0x6c>

		if((~PINA&(1<<PINA6)) && (timeDiv >= 1))
     92c:	06 99       	sbic	0x00, 6	; 0
     92e:	10 c0       	rjmp	.+32     	; 0x950 <signal_display+0x6c>
     930:	89 2b       	or	r24, r25
     932:	71 f0       	breq	.+28     	; 0x950 <signal_display+0x6c>

		if((~PINA&(1<<PINA5)) && (Ypos2 <= 60))
     934:	05 99       	sbic	0x00, 5	; 0
     936:	0c c0       	rjmp	.+24     	; 0x950 <signal_display+0x6c>
     938:	80 91 0b 02 	lds	r24, 0x020B
     93c:	8d 33       	cpi	r24, 0x3D	; 61
     93e:	44 f4       	brge	.+16     	; 0x950 <signal_display+0x6c>

		if((~PINA&(1<<PINA4)) && (Ypos2 >= -60))
     940:	04 99       	sbic	0x00, 4	; 0
     942:	06 c0       	rjmp	.+12     	; 0x950 <signal_display+0x6c>
     944:	84 3c       	cpi	r24, 0xC4	; 196
     946:	24 f0       	brlt	.+8      	; 0x950 <signal_display+0x6c>

		if(~PINA&(1<<PINA3))
     948:	03 99       	sbic	0x00, 3	; 0
     94a:	02 c0       	rjmp	.+4      	; 0x950 <signal_display+0x6c>
			while(~PINA&(1<<PINA3));
     94c:	03 9b       	sbis	0x00, 3	; 0
     94e:	fe cf       	rjmp	.-4      	; 0x94c <signal_display+0x68>

		findZero = 0;
     950:	10 92 0f 02 	sts	0x020F, r1
		upLimit = 0;
     954:	10 92 0e 02 	sts	0x020E, r1
		lowLimit = 255;
     958:	70 92 00 01 	sts	0x0100, r7
		//endOfPeriod = 0;
		freqComplete = 0;
		complete = FALSE;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	80 93 0c 02 	sts	0x020C, r24

		findZero = 0;
		upLimit = 0;
		lowLimit = 255;
		//endOfPeriod = 0;
		freqComplete = 0;
     962:	e0 e0       	ldi	r30, 0x00	; 0
		complete = FALSE;

		for (i=2; i<15000; i++)
     964:	49 2d       	mov	r20, r9
     966:	5a 2d       	mov	r21, r10
			ADCSRA |= (1 << ADSC); // Enable ADC
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     968:	f1 e0       	ldi	r31, 0x01	; 1
		freqComplete = 0;
		complete = FALSE;

		for (i=2; i<15000; i++)
		{
			ADCSRA |= (1 << ADSC); // Enable ADC
     96a:	88 81       	ld	r24, Y
     96c:	80 64       	ori	r24, 0x40	; 64
     96e:	88 83       	st	Y, r24
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
     970:	88 81       	ld	r24, Y
     972:	84 ff       	sbrs	r24, 4
     974:	fd cf       	rjmp	.-6      	; 0x970 <signal_display+0x8c>
			ADCvalue = ADCH;
     976:	d8 01       	movw	r26, r16
     978:	6c 90       	ld	r6, X
     97a:	86 2d       	mov	r24, r6
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 30 02 	sts	0x0230, r25
     982:	80 93 2f 02 	sts	0x022F, r24

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
     986:	20 91 10 02 	lds	r18, 0x0210
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	28 17       	cp	r18, r24
     98e:	39 07       	cpc	r19, r25
     990:	08 f0       	brcs	.+2      	; 0x994 <signal_display+0xb0>
     992:	0e c1       	rjmp	.+540    	; 0xbb0 <signal_display+0x2cc>
     994:	60 91 0d 02 	lds	r22, 0x020D
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	68 17       	cp	r22, r24
     99c:	79 07       	cpc	r23, r25
     99e:	c0 f4       	brcc	.+48     	; 0x9d0 <signal_display+0xec>
     9a0:	e1 11       	cpse	r30, r1
     9a2:	0b c1       	rjmp	.+534    	; 0xbba <signal_display+0x2d6>
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     9a4:	82 17       	cp	r24, r18
     9a6:	93 07       	cpc	r25, r19
     9a8:	48 f0       	brcs	.+18     	; 0x9bc <signal_display+0xd8>
			ADCSRA |= (1 << ADSC); // Enable ADC
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     9aa:	ef 2f       	mov	r30, r31
     9ac:	11 c0       	rjmp	.+34     	; 0x9d0 <signal_display+0xec>
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     9ae:	60 91 0d 02 	lds	r22, 0x020D
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	68 17       	cp	r22, r24
     9b6:	79 07       	cpc	r23, r25
     9b8:	b0 f4       	brcc	.+44     	; 0x9e6 <signal_display+0x102>
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <signal_display+0xda>
			ADCSRA |= (1 << ADSC); // Enable ADC
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     9bc:	ef 2f       	mov	r30, r31
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     9be:	e1 30       	cpi	r30, 0x01	; 1
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <signal_display+0xe0>
     9c2:	ff c0       	rjmp	.+510    	; 0xbc2 <signal_display+0x2de>
				freqComplete = 2;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     9c4:	28 17       	cp	r18, r24
     9c6:	39 07       	cpc	r19, r25
     9c8:	68 f4       	brcc	.+26     	; 0x9e4 <signal_display+0x100>
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     9ca:	eb 2d       	mov	r30, r11
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <signal_display+0xec>
     9ce:	eb 2d       	mov	r30, r11

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     9d0:	20 91 0d 02 	lds	r18, 0x020D
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	28 17       	cp	r18, r24
     9d8:	39 07       	cpc	r19, r25
     9da:	28 f4       	brcc	.+10     	; 0x9e6 <signal_display+0x102>
     9dc:	e2 30       	cpi	r30, 0x02	; 2
     9de:	19 f4       	brne	.+6      	; 0x9e6 <signal_display+0x102>
			{
				freqComplete = 3; //we found the end of the first period.
     9e0:	e8 2d       	mov	r30, r8
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <signal_display+0x102>
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     9e4:	eb 2d       	mov	r30, r11
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
			{
				freqComplete = 3; //we found the end of the first period.
			}

			prevADCvalue = ADCvalue; // Get a backup of the current ADC value.
     9e6:	60 92 0d 02 	sts	0x020D, r6

			for(k=timeDiv;k>0;k--) 
     9ea:	20 91 11 02 	lds	r18, 0x0211
     9ee:	30 91 12 02 	lds	r19, 0x0212
     9f2:	21 15       	cp	r18, r1
     9f4:	31 05       	cpc	r19, r1
     9f6:	81 f0       	breq	.+32     	; 0xa18 <signal_display+0x134>
			{
				ADCSRA |= (1 << ADSC);   // Enable ADC
     9f8:	88 81       	ld	r24, Y
     9fa:	80 64       	ori	r24, 0x40	; 64
     9fc:	88 83       	st	Y, r24
				loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
     9fe:	88 81       	ld	r24, Y
     a00:	84 ff       	sbrs	r24, 4
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <signal_display+0x11a>
				ADCvalue = ADCH;
     a04:	d8 01       	movw	r26, r16
     a06:	8c 91       	ld	r24, X
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 30 02 	sts	0x0230, r25
     a0e:	80 93 2f 02 	sts	0x022F, r24
				freqComplete = 3; //we found the end of the first period.
			}

			prevADCvalue = ADCvalue; // Get a backup of the current ADC value.

			for(k=timeDiv;k>0;k--) 
     a12:	21 50       	subi	r18, 0x01	; 1
     a14:	31 09       	sbc	r19, r1
     a16:	81 f7       	brne	.-32     	; 0x9f8 <signal_display+0x114>
				ADCSRA |= (1 << ADSC);   // Enable ADC
				loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
				ADCvalue = ADCH;
			}

			if (upLimit < ADCvalue)  // Find the higher voltage level of the input waveform.
     a18:	20 91 2f 02 	lds	r18, 0x022F
     a1c:	30 91 30 02 	lds	r19, 0x0230
     a20:	80 91 0e 02 	lds	r24, 0x020E
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	82 17       	cp	r24, r18
     a28:	93 07       	cpc	r25, r19
     a2a:	10 f4       	brcc	.+4      	; 0xa30 <signal_display+0x14c>
				upLimit = ADCvalue;
     a2c:	20 93 0e 02 	sts	0x020E, r18

			if (lowLimit > ADCvalue) // Find the lower voltage level of the input waveform.
     a30:	80 91 00 01 	lds	r24, 0x0100
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	28 17       	cp	r18, r24
     a38:	39 07       	cpc	r19, r25
     a3a:	20 f4       	brcc	.+8      	; 0xa44 <signal_display+0x160>
				lowLimit = ADCvalue;
     a3c:	d7 01       	movw	r26, r14
     a3e:	8c 91       	ld	r24, X
     a40:	80 93 00 01 	sts	0x0100, r24
		
			if (ADCvalue > 0)
     a44:	21 15       	cp	r18, r1
     a46:	31 05       	cpc	r19, r1
     a48:	e9 f0       	breq	.+58     	; 0xa84 <signal_display+0x1a0>
			{
				voltage = ((upLimit-lowLimit)*2); //Get the Vpp and store it to "voltage" (Volts Peak-to-peak of inputed waveform).
     a4a:	80 91 0e 02 	lds	r24, 0x020E
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	60 91 00 01 	lds	r22, 0x0100
     a54:	86 1b       	sub	r24, r22
     a56:	91 09       	sbc	r25, r1
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	90 93 2e 02 	sts	0x022E, r25
     a60:	80 93 2d 02 	sts	0x022D, r24
				ADCvalue += 5;
     a64:	2b 5f       	subi	r18, 0xFB	; 251
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
				ADCvalue /= 5;
     a68:	ad ec       	ldi	r26, 0xCD	; 205
     a6a:	bc ec       	ldi	r27, 0xCC	; 204
     a6c:	0e 94 ad 0b 	call	0x175a	; 0x175a <__umulhisi3>
     a70:	96 95       	lsr	r25
     a72:	87 95       	ror	r24
     a74:	96 95       	lsr	r25
     a76:	87 95       	ror	r24
				ADCvalue += 2;
     a78:	02 96       	adiw	r24, 0x02	; 2
     a7a:	90 93 30 02 	sts	0x0230, r25
     a7e:	80 93 2f 02 	sts	0x022F, r24
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <signal_display+0x1a8>
			}
			else
				ADCvalue = 2;
     a84:	c0 92 2f 02 	sts	0x022F, r12
     a88:	d0 92 30 02 	sts	0x0230, r13
		
			position = ADCvalue + Ypos2 +5; 
     a8c:	d7 01       	movw	r26, r14
     a8e:	9c 91       	ld	r25, X
     a90:	80 91 0b 02 	lds	r24, 0x020B
     a94:	89 0f       	add	r24, r25
     a96:	8b 5f       	subi	r24, 0xFB	; 251
     a98:	80 93 0a 02 	sts	0x020A, r24
			if ((position <= 63) && (position >= 0) && (i<100))
     a9c:	80 34       	cpi	r24, 0x40	; 64
     a9e:	48 f4       	brcc	.+18     	; 0xab2 <signal_display+0x1ce>
     aa0:	44 36       	cpi	r20, 0x64	; 100
     aa2:	51 05       	cpc	r21, r1
     aa4:	70 f4       	brcc	.+28     	; 0xac2 <signal_display+0x1de>
     aa6:	da 01       	movw	r26, r20
     aa8:	bb 27       	eor	r27, r27
	ADCSRA |= ((1<<ADEN) | (1<<ADSC) | (1<<ADPS1)); // ADC prescaler at 4
}

void fillDataLcdBuffer (uint8_t address, uint8_t data)
{
	dataLcdBuffer[address] = data;
     aaa:	aa 55       	subi	r26, 0x5A	; 90
     aac:	be 4f       	sbci	r27, 0xFE	; 254
     aae:	8c 93       	st	X, r24
     ab0:	0d c0       	rjmp	.+26     	; 0xacc <signal_display+0x1e8>
			position = ADCvalue + Ypos2 +5; 
			if ((position <= 63) && (position >= 0) && (i<100))
				fillDataLcdBuffer(i,position);
			else
			{
				if(i<100)
     ab2:	44 36       	cpi	r20, 0x64	; 100
     ab4:	51 05       	cpc	r21, r1
     ab6:	28 f4       	brcc	.+10     	; 0xac2 <signal_display+0x1de>
     ab8:	da 01       	movw	r26, r20
     aba:	bb 27       	eor	r27, r27
	ADCSRA |= ((1<<ADEN) | (1<<ADSC) | (1<<ADPS1)); // ADC prescaler at 4
}

void fillDataLcdBuffer (uint8_t address, uint8_t data)
{
	dataLcdBuffer[address] = data;
     abc:	aa 55       	subi	r26, 0x5A	; 90
     abe:	be 4f       	sbci	r27, 0xFE	; 254
     ac0:	1c 92       	st	X, r1
			else
			{
				if(i<100)
					fillDataLcdBuffer(i,0);

				if((i>100)&&(freqComplete==3))
     ac2:	45 36       	cpi	r20, 0x65	; 101
     ac4:	51 05       	cpc	r21, r1
     ac6:	10 f0       	brcs	.+4      	; 0xacc <signal_display+0x1e8>
     ac8:	e3 30       	cpi	r30, 0x03	; 3
     aca:	39 f0       	breq	.+14     	; 0xada <signal_display+0x1f6>
		lowLimit = 255;
		//endOfPeriod = 0;
		freqComplete = 0;
		complete = FALSE;

		for (i=2; i<15000; i++)
     acc:	4f 5f       	subi	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	48 39       	cpi	r20, 0x98	; 152
     ad2:	ba e3       	ldi	r27, 0x3A	; 58
     ad4:	5b 07       	cpc	r21, r27
     ad6:	09 f0       	breq	.+2      	; 0xada <signal_display+0x1f6>
     ad8:	48 cf       	rjmp	.-368    	; 0x96a <signal_display+0x86>

				if((i>100)&&(freqComplete==3))
					break;
			}
		}
		if(upLimit != lowLimit)
     ada:	80 91 0e 02 	lds	r24, 0x020E
     ade:	40 91 00 01 	lds	r20, 0x0100
     ae2:	84 17       	cp	r24, r20
     ae4:	69 f0       	breq	.+26     	; 0xb00 <signal_display+0x21c>
			trigger = (((upLimit - lowLimit)/2)+ lowLimit);
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	84 1b       	sub	r24, r20
     aea:	91 09       	sbc	r25, r1
     aec:	9c 01       	movw	r18, r24
     aee:	12 f4       	brpl	.+4      	; 0xaf4 <signal_display+0x210>
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	35 95       	asr	r19
     af6:	27 95       	ror	r18
     af8:	24 0f       	add	r18, r20
     afa:	20 93 10 02 	sts	0x0210, r18
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <signal_display+0x220>
		else
			trigger = upLimit;
     b00:	80 93 10 02 	sts	0x0210, r24

//--------------------display the signal----------------------------
		create_wave();
     b04:	0e 94 53 04 	call	0x8a6	; 0x8a6 <create_wave>
//-------------------------------------------------------------------

		dataCounter = 0;
     b08:	10 92 14 02 	sts	0x0214, r1
     b0c:	10 92 13 02 	sts	0x0213, r1
		complete = FALSE;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 93 0c 02 	sts	0x020C, r24
		freqComplete = 0;
     b16:	60 e0       	ldi	r22, 0x00	; 0
			loop_until_bit_is_set(ADCSRA, ADIF);
			ADCvalue = ADCH;

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     b18:	71 e0       	ldi	r23, 0x01	; 1
		complete = FALSE;
		freqComplete = 0;

		do
		{
			prevADCvalue = ADCvalue;
     b1a:	f7 01       	movw	r30, r14
     b1c:	80 81       	ld	r24, Z
     b1e:	80 93 0d 02 	sts	0x020D, r24
			
			ADCSRA |= (1 << ADSC);    // Enable ADC
     b22:	88 81       	ld	r24, Y
     b24:	80 64       	ori	r24, 0x40	; 64
     b26:	88 83       	st	Y, r24
			loop_until_bit_is_set(ADCSRA, ADIF);
     b28:	88 81       	ld	r24, Y
     b2a:	84 ff       	sbrs	r24, 4
     b2c:	fd cf       	rjmp	.-6      	; 0xb28 <signal_display+0x244>
			ADCvalue = ADCH;
     b2e:	d8 01       	movw	r26, r16
     b30:	8c 91       	ld	r24, X
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	90 93 30 02 	sts	0x0230, r25
     b38:	80 93 2f 02 	sts	0x022F, r24

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
     b3c:	20 91 10 02 	lds	r18, 0x0210
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	28 17       	cp	r18, r24
     b44:	39 07       	cpc	r19, r25
     b46:	08 f0       	brcs	.+2      	; 0xb4a <signal_display+0x266>
     b48:	41 c0       	rjmp	.+130    	; 0xbcc <signal_display+0x2e8>
     b4a:	40 91 0d 02 	lds	r20, 0x020D
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	48 17       	cp	r20, r24
     b52:	59 07       	cpc	r21, r25
     b54:	08 f0       	brcs	.+2      	; 0xb58 <signal_display+0x274>
     b56:	51 c0       	rjmp	.+162    	; 0xbfa <signal_display+0x316>
     b58:	61 11       	cpse	r22, r1
     b5a:	3c c0       	rjmp	.+120    	; 0xbd4 <signal_display+0x2f0>
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     b5c:	82 17       	cp	r24, r18
     b5e:	93 07       	cpc	r25, r19
     b60:	48 f0       	brcs	.+18     	; 0xb74 <signal_display+0x290>
			loop_until_bit_is_set(ADCSRA, ADIF);
			ADCvalue = ADCH;

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     b62:	67 2f       	mov	r22, r23
     b64:	4a c0       	rjmp	.+148    	; 0xbfa <signal_display+0x316>
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     b66:	40 91 0d 02 	lds	r20, 0x020D
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	48 17       	cp	r20, r24
     b6e:	59 07       	cpc	r21, r25
     b70:	50 f4       	brcc	.+20     	; 0xb86 <signal_display+0x2a2>
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <signal_display+0x292>
			loop_until_bit_is_set(ADCSRA, ADIF);
			ADCvalue = ADCH;

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     b74:	67 2f       	mov	r22, r23
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     b76:	61 30       	cpi	r22, 0x01	; 1
     b78:	89 f5       	brne	.+98     	; 0xbdc <signal_display+0x2f8>
     b7a:	34 c0       	rjmp	.+104    	; 0xbe4 <signal_display+0x300>
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     b7c:	62 30       	cpi	r22, 0x02	; 2
     b7e:	19 f4       	brne	.+6      	; 0xb86 <signal_display+0x2a2>
			{
				freqComplete = 3; 
				complete = TRUE;
     b80:	10 92 0c 02 	sts	0x020C, r1
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
			{
				freqComplete = 3; 
     b84:	68 2d       	mov	r22, r8
				complete = TRUE;
			}
			if(dataCounter > 3000)
     b86:	80 91 13 02 	lds	r24, 0x0213
     b8a:	90 91 14 02 	lds	r25, 0x0214
     b8e:	89 3b       	cpi	r24, 0xB9	; 185
     b90:	bb e0       	ldi	r27, 0x0B	; 11
     b92:	9b 07       	cpc	r25, r27
     b94:	10 f0       	brcs	.+4      	; 0xb9a <signal_display+0x2b6>
				complete = TRUE;
     b96:	10 92 0c 02 	sts	0x020C, r1
			dataCounter++;
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	90 93 14 02 	sts	0x0214, r25
     ba0:	80 93 13 02 	sts	0x0213, r24
		}while(complete == FALSE);
     ba4:	80 91 0c 02 	lds	r24, 0x020C
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	09 f4       	brne	.+2      	; 0xbae <signal_display+0x2ca>
     bac:	b6 cf       	rjmp	.-148    	; 0xb1a <signal_display+0x236>
     bae:	b5 ce       	rjmp	.-662    	; 0x91a <signal_display+0x36>

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     bb0:	82 17       	cp	r24, r18
     bb2:	93 07       	cpc	r25, r19
     bb4:	08 f4       	brcc	.+2      	; 0xbb8 <signal_display+0x2d4>
     bb6:	fb ce       	rjmp	.-522    	; 0x9ae <signal_display+0xca>
     bb8:	16 cf       	rjmp	.-468    	; 0x9e6 <signal_display+0x102>
     bba:	82 17       	cp	r24, r18
     bbc:	93 07       	cpc	r25, r19
     bbe:	b8 f0       	brcs	.+46     	; 0xbee <signal_display+0x30a>
     bc0:	07 cf       	rjmp	.-498    	; 0x9d0 <signal_display+0xec>
				freqComplete = 2;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     bc2:	28 17       	cp	r18, r24
     bc4:	39 07       	cpc	r19, r25
     bc6:	08 f4       	brcc	.+2      	; 0xbca <signal_display+0x2e6>
     bc8:	09 cf       	rjmp	.-494    	; 0x9dc <signal_display+0xf8>
     bca:	0d cf       	rjmp	.-486    	; 0x9e6 <signal_display+0x102>
			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     bcc:	82 17       	cp	r24, r18
     bce:	93 07       	cpc	r25, r19
     bd0:	50 f2       	brcs	.-108    	; 0xb66 <signal_display+0x282>
     bd2:	d9 cf       	rjmp	.-78     	; 0xb86 <signal_display+0x2a2>
     bd4:	82 17       	cp	r24, r18
     bd6:	93 07       	cpc	r25, r19
     bd8:	68 f0       	brcs	.+26     	; 0xbf4 <signal_display+0x310>
     bda:	0f c0       	rjmp	.+30     	; 0xbfa <signal_display+0x316>
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     bdc:	28 17       	cp	r18, r24
     bde:	39 07       	cpc	r19, r25
     be0:	68 f2       	brcs	.-102    	; 0xb7c <signal_display+0x298>
     be2:	d1 cf       	rjmp	.-94     	; 0xb86 <signal_display+0x2a2>
     be4:	28 17       	cp	r18, r24
     be6:	39 07       	cpc	r19, r25
     be8:	58 f2       	brcs	.-106    	; 0xb80 <signal_display+0x29c>
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     bea:	6b 2d       	mov	r22, r11
     bec:	cc cf       	rjmp	.-104    	; 0xb86 <signal_display+0x2a2>

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     bee:	e1 30       	cpi	r30, 0x01	; 1
     bf0:	41 f7       	brne	.-48     	; 0xbc2 <signal_display+0x2de>
     bf2:	ed ce       	rjmp	.-550    	; 0x9ce <signal_display+0xea>
			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     bf4:	61 30       	cpi	r22, 0x01	; 1
     bf6:	91 f7       	brne	.-28     	; 0xbdc <signal_display+0x2f8>
     bf8:	c3 cf       	rjmp	.-122    	; 0xb80 <signal_display+0x29c>
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     bfa:	48 17       	cp	r20, r24
     bfc:	59 07       	cpc	r21, r25
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <signal_display+0x31e>
     c00:	bd cf       	rjmp	.-134    	; 0xb7c <signal_display+0x298>
     c02:	c1 cf       	rjmp	.-126    	; 0xb86 <signal_display+0x2a2>

00000c04 <main>:


int main(void)
{
	// set PA3-PA7 as input and activated internal Pull-Up
	DDRA &= ~((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     c04:	81 b1       	in	r24, 0x01	; 1
     c06:	87 70       	andi	r24, 0x07	; 7
     c08:	81 b9       	out	0x01, r24	; 1
	PORTA |= ((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     c0a:	82 b1       	in	r24, 0x02	; 2
     c0c:	88 6f       	ori	r24, 0xF8	; 248
     c0e:	82 b9       	out	0x02, r24	; 2
	
	// set PB0-PB3 as output
	DDRB = 0x0F;
     c10:	8f e0       	ldi	r24, 0x0F	; 15
     c12:	84 b9       	out	0x04, r24	; 4
	// set PB0-PB3 on high-level
	PORTB |= 0x0F;		// Required for DMM Board DMM Board 2013
     c14:	85 b1       	in	r24, 0x05	; 5
     c16:	8f 60       	ori	r24, 0x0F	; 15
     c18:	85 b9       	out	0x05, r24	; 5
	
	//void(*get_frequence_p)(void) = get_frequence;			//define a function pointer, point to function get_frequence

	LCD_Init();
     c1a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <LCD_Init>
    uart_init1();
     c1e:	0e 94 01 0a 	call	0x1402	; 0x1402 <uart_init1>
	start ();
     c22:	0e 94 8d 03 	call	0x71a	; 0x71a <start>
	
	AD9850_setup();
     c26:	0e 94 bf 03 	call	0x77e	; 0x77e <AD9850_setup>
	AD9850_reset();
     c2a:	0e 94 c6 03 	call	0x78c	; 0x78c <AD9850_reset>

	//get_frequence();
	AD_freq=10000000;
     c2e:	80 e8       	ldi	r24, 0x80	; 128
     c30:	96 e9       	ldi	r25, 0x96	; 150
     c32:	a8 e9       	ldi	r26, 0x98	; 152
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	80 93 a2 01 	sts	0x01A2, r24
     c3a:	90 93 a3 01 	sts	0x01A3, r25
     c3e:	a0 93 a4 01 	sts	0x01A4, r26
     c42:	b0 93 a5 01 	sts	0x01A5, r27

	for(;;)
	{
		if(~PINA&(1<<PINA7))
     c46:	07 99       	sbic	0x00, 7	; 0
     c48:	0c c0       	rjmp	.+24     	; 0xc62 <main+0x5e>
			AD_freq +=1000000;
     c4a:	80 ec       	ldi	r24, 0xC0	; 192
     c4c:	98 ed       	ldi	r25, 0xD8	; 216
     c4e:	a7 ea       	ldi	r26, 0xA7	; 167
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	80 93 a2 01 	sts	0x01A2, r24
     c56:	90 93 a3 01 	sts	0x01A3, r25
     c5a:	a0 93 a4 01 	sts	0x01A4, r26
     c5e:	b0 93 a5 01 	sts	0x01A5, r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	81 ee       	ldi	r24, 0xE1	; 225
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	80 40       	sbci	r24, 0x00	; 0
     c6c:	90 40       	sbci	r25, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <main+0x64>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <main+0x6e>
     c72:	00 00       	nop
			_delay_ms(100);

		if (~PINA&(1<<PINA6))
     c74:	06 99       	sbic	0x00, 6	; 0
     c76:	14 c0       	rjmp	.+40     	; 0xca0 <main+0x9c>
			AD_freq -=1000000;
     c78:	80 91 a2 01 	lds	r24, 0x01A2
     c7c:	90 91 a3 01 	lds	r25, 0x01A3
     c80:	a0 91 a4 01 	lds	r26, 0x01A4
     c84:	b0 91 a5 01 	lds	r27, 0x01A5
     c88:	80 54       	subi	r24, 0x40	; 64
     c8a:	92 44       	sbci	r25, 0x42	; 66
     c8c:	af 40       	sbci	r26, 0x0F	; 15
     c8e:	b1 09       	sbc	r27, r1
     c90:	80 93 a2 01 	sts	0x01A2, r24
     c94:	90 93 a3 01 	sts	0x01A3, r25
     c98:	a0 93 a4 01 	sts	0x01A4, r26
     c9c:	b0 93 a5 01 	sts	0x01A5, r27
     ca0:	2f ef       	ldi	r18, 0xFF	; 255
     ca2:	81 ee       	ldi	r24, 0xE1	; 225
     ca4:	94 e0       	ldi	r25, 0x04	; 4
     ca6:	21 50       	subi	r18, 0x01	; 1
     ca8:	80 40       	sbci	r24, 0x00	; 0
     caa:	90 40       	sbci	r25, 0x00	; 0
     cac:	e1 f7       	brne	.-8      	; 0xca6 <main+0xa2>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <main+0xac>
     cb0:	00 00       	nop
			_delay_ms(100);

		if (~PINA&(1<<PINA5))
     cb2:	05 99       	sbic	0x00, 5	; 0
     cb4:	14 c0       	rjmp	.+40     	; 0xcde <main+0xda>
			AD_freq -=100000;
     cb6:	80 91 a2 01 	lds	r24, 0x01A2
     cba:	90 91 a3 01 	lds	r25, 0x01A3
     cbe:	a0 91 a4 01 	lds	r26, 0x01A4
     cc2:	b0 91 a5 01 	lds	r27, 0x01A5
     cc6:	80 5a       	subi	r24, 0xA0	; 160
     cc8:	96 48       	sbci	r25, 0x86	; 134
     cca:	a1 40       	sbci	r26, 0x01	; 1
     ccc:	b1 09       	sbc	r27, r1
     cce:	80 93 a2 01 	sts	0x01A2, r24
     cd2:	90 93 a3 01 	sts	0x01A3, r25
     cd6:	a0 93 a4 01 	sts	0x01A4, r26
     cda:	b0 93 a5 01 	sts	0x01A5, r27
     cde:	2f ef       	ldi	r18, 0xFF	; 255
     ce0:	89 ef       	ldi	r24, 0xF9	; 249
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	21 50       	subi	r18, 0x01	; 1
     ce6:	80 40       	sbci	r24, 0x00	; 0
     ce8:	90 40       	sbci	r25, 0x00	; 0
     cea:	e1 f7       	brne	.-8      	; 0xce4 <main+0xe0>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <main+0xea>
     cee:	00 00       	nop
			_delay_ms(20);

		if (~PINA&(1<<PINA4))
     cf0:	04 99       	sbic	0x00, 4	; 0
     cf2:	14 c0       	rjmp	.+40     	; 0xd1c <main+0x118>
			AD_freq +=100000;
     cf4:	80 91 a2 01 	lds	r24, 0x01A2
     cf8:	90 91 a3 01 	lds	r25, 0x01A3
     cfc:	a0 91 a4 01 	lds	r26, 0x01A4
     d00:	b0 91 a5 01 	lds	r27, 0x01A5
     d04:	80 56       	subi	r24, 0x60	; 96
     d06:	99 47       	sbci	r25, 0x79	; 121
     d08:	ae 4f       	sbci	r26, 0xFE	; 254
     d0a:	bf 4f       	sbci	r27, 0xFF	; 255
     d0c:	80 93 a2 01 	sts	0x01A2, r24
     d10:	90 93 a3 01 	sts	0x01A3, r25
     d14:	a0 93 a4 01 	sts	0x01A4, r26
     d18:	b0 93 a5 01 	sts	0x01A5, r27
     d1c:	2f ef       	ldi	r18, 0xFF	; 255
     d1e:	81 ee       	ldi	r24, 0xE1	; 225
     d20:	94 e0       	ldi	r25, 0x04	; 4
     d22:	21 50       	subi	r18, 0x01	; 1
     d24:	80 40       	sbci	r24, 0x00	; 0
     d26:	90 40       	sbci	r25, 0x00	; 0
     d28:	e1 f7       	brne	.-8      	; 0xd22 <main+0x11e>
     d2a:	00 c0       	rjmp	.+0      	; 0xd2c <main+0x128>
     d2c:	00 00       	nop
			_delay_ms(100);

		//if (~PINA&(1<<PINA3))
			//(*get_frequence_p)();		//when Joystick Button is pressed, get the frequence from serial port again
		
		AD9850_Setfrequency(AD_freq);
     d2e:	60 91 a2 01 	lds	r22, 0x01A2
     d32:	70 91 a3 01 	lds	r23, 0x01A3
     d36:	80 91 a4 01 	lds	r24, 0x01A4
     d3a:	90 91 a5 01 	lds	r25, 0x01A5
     d3e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__floatunsisf>
     d42:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <AD9850_Setfrequency>
		adc_init();
     d46:	0e 94 4a 04 	call	0x894	; 0x894 <adc_init>
		signal_display();
     d4a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <signal_display>

00000d4e <dataflash_init>:
void
dataflash_init (void)
{
  // AT45DB081 doesn't actually need an intialization,
  // only the ChipSelect should be configured as an output.
  DDRB |= (1 << PB4);
     d4e:	24 9a       	sbi	0x04, 4	; 4
  DATAFLASH_Chip_Unselect;
     d50:	2c 9a       	sbi	0x05, 4	; 5
  SPI_MasterInit();
     d52:	0e 94 18 08 	call	0x1030	; 0x1030 <SPI_MasterInit>
     d56:	08 95       	ret

00000d58 <LCD_Update>:
  unsigned char x;
  
  for (x = 0; x < 128; x++)
    lcd_framebuffer[line][x] = 0x00;
  
  lcd_frameupdate |= (1 << line);
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	bf b6       	in	r11, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	01 e3       	ldi	r16, 0x31	; 49
     d70:	16 e0       	ldi	r17, 0x06	; 6
     d72:	0f 2e       	mov	r0, r31
     d74:	f1 e3       	ldi	r31, 0x31	; 49
     d76:	cf 2e       	mov	r12, r31
     d78:	f2 e0       	ldi	r31, 0x02	; 2
     d7a:	df 2e       	mov	r13, r31
     d7c:	f0 2d       	mov	r31, r0
     d7e:	0f 2e       	mov	r0, r31
     d80:	f7 e0       	ldi	r31, 0x07	; 7
     d82:	ef 2e       	mov	r14, r31
     d84:	f1 2c       	mov	r15, r1
     d86:	f0 2d       	mov	r31, r0
     d88:	80 91 17 02 	lds	r24, 0x0217
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 2c       	mov	r0, r14
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <LCD_Update+0x3e>
     d92:	95 95       	asr	r25
     d94:	87 95       	ror	r24
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <LCD_Update+0x3a>
     d9a:	80 ff       	sbrs	r24, 0
     d9c:	17 c0       	rjmp	.+46     	; 0xdcc <LCD_Update+0x74>
     d9e:	46 98       	cbi	0x08, 6	; 8
     da0:	47 98       	cbi	0x08, 7	; 8
     da2:	8e 2d       	mov	r24, r14
     da4:	80 6b       	ori	r24, 0xB0	; 176
     da6:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     daa:	80 e1       	ldi	r24, 0x10	; 16
     dac:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     db6:	47 9a       	sbi	0x08, 7	; 8
     db8:	e8 01       	movw	r28, r16
     dba:	c0 58       	subi	r28, 0x80	; 128
     dbc:	d1 09       	sbc	r29, r1
     dbe:	89 91       	ld	r24, Y+
     dc0:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     dc4:	c0 17       	cp	r28, r16
     dc6:	d1 07       	cpc	r29, r17
     dc8:	d1 f7       	brne	.-12     	; 0xdbe <LCD_Update+0x66>
     dca:	46 9a       	sbi	0x08, 6	; 8
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	e8 1a       	sub	r14, r24
     dd0:	f1 08       	sbc	r15, r1
     dd2:	00 58       	subi	r16, 0x80	; 128
     dd4:	11 09       	sbc	r17, r1
     dd6:	0c 15       	cp	r16, r12
     dd8:	1d 05       	cpc	r17, r13
     dda:	b1 f6       	brne	.-84     	; 0xd88 <LCD_Update+0x30>
     ddc:	10 92 17 02 	sts	0x0217, r1
     de0:	bf be       	out	0x3f, r11	; 63
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	08 95       	ret

00000df6 <LCD_Clear>:
     df6:	e1 e3       	ldi	r30, 0x31	; 49
     df8:	f2 e0       	ldi	r31, 0x02	; 2
     dfa:	21 e3       	ldi	r18, 0x31	; 49
     dfc:	36 e0       	ldi	r19, 0x06	; 6
     dfe:	08 c0       	rjmp	.+16     	; 0xe10 <LCD_Clear+0x1a>
     e00:	11 92       	st	Z+, r1
     e02:	e8 17       	cp	r30, r24
     e04:	f9 07       	cpc	r31, r25
     e06:	e1 f7       	brne	.-8      	; 0xe00 <LCD_Clear+0xa>
     e08:	fc 01       	movw	r30, r24
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	21 f0       	breq	.+8      	; 0xe18 <LCD_Clear+0x22>
     e10:	cf 01       	movw	r24, r30
     e12:	80 58       	subi	r24, 0x80	; 128
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	f4 cf       	rjmp	.-24     	; 0xe00 <LCD_Clear+0xa>
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	80 93 17 02 	sts	0x0217, r24
     e1e:	0e 94 ac 06 	call	0xd58	; 0xd58 <LCD_Update>
     e22:	08 95       	ret

00000e24 <LCD_DrawPixel>:
     e24:	88 23       	and	r24, r24
     e26:	0c f4       	brge	.+2      	; 0xe2a <LCD_DrawPixel+0x6>
     e28:	44 c0       	rjmp	.+136    	; 0xeb2 <LCD_DrawPixel+0x8e>
     e2a:	60 34       	cpi	r22, 0x40	; 64
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <LCD_DrawPixel+0xc>
     e2e:	41 c0       	rjmp	.+130    	; 0xeb2 <LCD_DrawPixel+0x8e>
     e30:	56 2f       	mov	r21, r22
     e32:	56 95       	lsr	r21
     e34:	56 95       	lsr	r21
     e36:	56 95       	lsr	r21
     e38:	67 70       	andi	r22, 0x07	; 7
     e3a:	21 e0       	ldi	r18, 0x01	; 1
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <LCD_DrawPixel+0x20>
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	6a 95       	dec	r22
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <LCD_DrawPixel+0x1c>
     e48:	44 23       	and	r20, r20
     e4a:	19 f0       	breq	.+6      	; 0xe52 <LCD_DrawPixel+0x2e>
     e4c:	42 30       	cpi	r20, 0x02	; 2
     e4e:	71 f0       	breq	.+28     	; 0xe6c <LCD_DrawPixel+0x48>
     e50:	19 c0       	rjmp	.+50     	; 0xe84 <LCD_DrawPixel+0x60>
     e52:	90 e8       	ldi	r25, 0x80	; 128
     e54:	59 9f       	mul	r21, r25
     e56:	f0 01       	movw	r30, r0
     e58:	11 24       	eor	r1, r1
     e5a:	e8 0f       	add	r30, r24
     e5c:	f1 1d       	adc	r31, r1
     e5e:	ef 5c       	subi	r30, 0xCF	; 207
     e60:	fd 4f       	sbci	r31, 0xFD	; 253
     e62:	20 95       	com	r18
     e64:	80 81       	ld	r24, Z
     e66:	28 23       	and	r18, r24
     e68:	20 83       	st	Z, r18
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <LCD_DrawPixel+0x76>
     e6c:	90 e8       	ldi	r25, 0x80	; 128
     e6e:	59 9f       	mul	r21, r25
     e70:	f0 01       	movw	r30, r0
     e72:	11 24       	eor	r1, r1
     e74:	e8 0f       	add	r30, r24
     e76:	f1 1d       	adc	r31, r1
     e78:	ef 5c       	subi	r30, 0xCF	; 207
     e7a:	fd 4f       	sbci	r31, 0xFD	; 253
     e7c:	80 81       	ld	r24, Z
     e7e:	28 27       	eor	r18, r24
     e80:	20 83       	st	Z, r18
     e82:	0b c0       	rjmp	.+22     	; 0xe9a <LCD_DrawPixel+0x76>
     e84:	90 e8       	ldi	r25, 0x80	; 128
     e86:	59 9f       	mul	r21, r25
     e88:	f0 01       	movw	r30, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	e8 0f       	add	r30, r24
     e8e:	f1 1d       	adc	r31, r1
     e90:	ef 5c       	subi	r30, 0xCF	; 207
     e92:	fd 4f       	sbci	r31, 0xFD	; 253
     e94:	80 81       	ld	r24, Z
     e96:	28 2b       	or	r18, r24
     e98:	20 83       	st	Z, r18
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <LCD_DrawPixel+0x80>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	5a 95       	dec	r21
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <LCD_DrawPixel+0x7c>
     ea8:	90 91 17 02 	lds	r25, 0x0217
     eac:	89 2b       	or	r24, r25
     eae:	80 93 17 02 	sts	0x0217, r24
     eb2:	08 95       	ret

00000eb4 <LCD_PutChar>:
     eb4:	8a 30       	cpi	r24, 0x0A	; 10
     eb6:	29 f0       	breq	.+10     	; 0xec2 <LCD_PutChar+0xe>
     eb8:	8d 30       	cpi	r24, 0x0D	; 13
     eba:	61 f4       	brne	.+24     	; 0xed4 <LCD_PutChar+0x20>
     ebc:	10 92 16 02 	sts	0x0216, r1
     ec0:	08 95       	ret
     ec2:	80 91 15 02 	lds	r24, 0x0215
     ec6:	87 30       	cpi	r24, 0x07	; 7
     ec8:	08 f0       	brcs	.+2      	; 0xecc <LCD_PutChar+0x18>
     eca:	3d c0       	rjmp	.+122    	; 0xf46 <LCD_PutChar+0x92>
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	80 93 15 02 	sts	0x0215, r24
     ed2:	08 95       	ret
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	fc 01       	movw	r30, r24
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	e8 0f       	add	r30, r24
     ede:	f9 1f       	adc	r31, r25
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	e9 52       	subi	r30, 0x29	; 41
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	80 91 16 02 	lds	r24, 0x0216
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	dc 01       	movw	r26, r24
     ef0:	aa 0f       	add	r26, r26
     ef2:	bb 1f       	adc	r27, r27
     ef4:	a8 0f       	add	r26, r24
     ef6:	b9 1f       	adc	r27, r25
     ef8:	aa 0f       	add	r26, r26
     efa:	bb 1f       	adc	r27, r27
     efc:	80 91 15 02 	lds	r24, 0x0215
     f00:	90 e8       	ldi	r25, 0x80	; 128
     f02:	89 9f       	mul	r24, r25
     f04:	a0 0d       	add	r26, r0
     f06:	b1 1d       	adc	r27, r1
     f08:	11 24       	eor	r1, r1
     f0a:	af 5c       	subi	r26, 0xCF	; 207
     f0c:	bd 4f       	sbci	r27, 0xFD	; 253
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	94 91       	lpm	r25, Z
     f12:	9d 93       	st	X+, r25
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	31 96       	adiw	r30, 0x01	; 1
     f18:	86 30       	cpi	r24, 0x06	; 6
     f1a:	d1 f7       	brne	.-12     	; 0xf10 <LCD_PutChar+0x5c>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	00 90 15 02 	lds	r0, 0x0215
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <LCD_PutChar+0x76>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <LCD_PutChar+0x72>
     f2e:	90 91 17 02 	lds	r25, 0x0217
     f32:	89 2b       	or	r24, r25
     f34:	80 93 17 02 	sts	0x0217, r24
     f38:	80 91 16 02 	lds	r24, 0x0216
     f3c:	84 31       	cpi	r24, 0x14	; 20
     f3e:	18 f4       	brcc	.+6      	; 0xf46 <LCD_PutChar+0x92>
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	80 93 16 02 	sts	0x0216, r24
     f46:	08 95       	ret

00000f48 <LCD_PutString_P>:
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	fc 01       	movw	r30, r24
     f4e:	84 91       	lpm	r24, Z
     f50:	ef 01       	movw	r28, r30
     f52:	21 96       	adiw	r28, 0x01	; 1
     f54:	88 23       	and	r24, r24
     f56:	39 f0       	breq	.+14     	; 0xf66 <LCD_PutString_P+0x1e>
     f58:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <LCD_PutChar>
     f5c:	fe 01       	movw	r30, r28
     f5e:	84 91       	lpm	r24, Z
     f60:	21 96       	adiw	r28, 0x01	; 1
     f62:	81 11       	cpse	r24, r1
     f64:	f9 cf       	rjmp	.-14     	; 0xf58 <LCD_PutString_P+0x10>
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <LCD_GotoXY>:
     f6c:	80 93 16 02 	sts	0x0216, r24
     f70:	60 93 15 02 	sts	0x0215, r22
     f74:	08 95       	ret

00000f76 <Backlight_Off>:
}

void
Backlight_Off (void)
{
  TWI_Start();
     f76:	0e 94 43 08 	call	0x1086	; 0x1086 <TWI_Start>
  TWI_Address_RW(0xc4);
     f7a:	84 ec       	ldi	r24, 0xC4	; 196
     f7c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <TWI_Address_RW>
  TWI_Write(0x11);
     f80:	81 e1       	ldi	r24, 0x11	; 17
     f82:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_Write>
  TWI_Write(0x00);
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_Write>
  TWI_Write(0x00);
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_Write>
  TWI_Write(0x00);
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_Write>
  TWI_Write(0x00);
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_Write>
  TWI_Write(0x00);
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_Write>
  TWI_Stop();
     fa4:	0e 94 98 08 	call	0x1130	; 0x1130 <TWI_Stop>
     fa8:	08 95       	ret

00000faa <LCD_Init>:
  SPI_MasterTransfer(data);
}

void
LCD_Init (void)
{
     faa:	cf 93       	push	r28
  SPI_MasterInit();
     fac:	0e 94 18 08 	call	0x1030	; 0x1030 <SPI_MasterInit>

  /* Set Register Select and Chip Select as Output */
  DDRC |= (1<<PC7)|(1<<PC6);
     fb0:	87 b1       	in	r24, 0x07	; 7
     fb2:	80 6c       	ori	r24, 0xC0	; 192
     fb4:	87 b9       	out	0x07, r24	; 7
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
     fb6:	cf b7       	in	r28, 0x3f	; 63
  cli();
     fb8:	f8 94       	cli
  
  /* Starting Init Command Sequence */
  LCD_Command_Mode;
     fba:	47 98       	cbi	0x08, 7	; 8
  LCD_Chip_Select;
     fbc:	46 98       	cbi	0x08, 6	; 8
uint8_t lcd_texty = 0;

void
LCD_Send (uint8_t data)
{
  SPI_MasterTransfer(data);
     fbe:	82 ee       	ldi	r24, 0xE2	; 226
     fc0:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     fc4:	83 ea       	ldi	r24, 0xA3	; 163
     fc6:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     fca:	81 e8       	ldi	r24, 0x81	; 129
     fcc:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     fd0:	88 e0       	ldi	r24, 0x08	; 8
     fd2:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     fd6:	80 ea       	ldi	r24, 0xA0	; 160
     fd8:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     fdc:	88 ec       	ldi	r24, 0xC8	; 200
     fde:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     fe2:	85 e2       	ldi	r24, 0x25	; 37
     fe4:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     fe8:	8f e2       	ldi	r24, 0x2F	; 47
     fea:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
     fee:	8f ea       	ldi	r24, 0xAF	; 175
     ff0:	0e 94 2a 08 	call	0x1054	; 0x1054 <SPI_MasterTransfer>
  LCD_Send(LCD_COMMON_OUTPUT_MODE_REVERSE);
  LCD_Send(LCD_V5_VOLTAGE_REGULATOR | 0x05);
  LCD_Send(LCD_POWER_CONTROLLER_SET | 0x07);
  LCD_Send(LCD_DISPLAY_ON);
  
  LCD_Chip_Unselect;
     ff4:	46 9a       	sbi	0x08, 6	; 8
  LCD_Data_Mode;
     ff6:	47 9a       	sbi	0x08, 7	; 8
  
  LCD_Clear();
     ff8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <LCD_Clear>
  
  /* Restore Status Register */
  SREG = sreg;
     ffc:	cf bf       	out	0x3f, r28	; 63
  
  // Initialize TWI for Backlight Control
  TWI_Init();
     ffe:	0e 94 2f 08 	call	0x105e	; 0x105e <TWI_Init>
  Backlight_Off();
    1002:	0e 94 bb 07 	call	0xf76	; 0xf76 <Backlight_Off>
  
  // Initialize Dataflash
  dataflash_init();
    1006:	0e 94 a7 06 	call	0xd4e	; 0xd4e <dataflash_init>
}
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <Backlight_LED>:
  TWI_Stop();
}

void
Backlight_LED (uint8_t led_selector)
{
    100e:	cf 93       	push	r28
    1010:	c8 2f       	mov	r28, r24
  TWI_Start();
    1012:	0e 94 43 08 	call	0x1086	; 0x1086 <TWI_Start>
  TWI_Address_RW(0xc4);
    1016:	84 ec       	ldi	r24, 0xC4	; 196
    1018:	0e 94 5e 08 	call	0x10bc	; 0x10bc <TWI_Address_RW>
  TWI_Write(0x15);
    101c:	85 e1       	ldi	r24, 0x15	; 21
    101e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_Write>
  TWI_Write(led_selector);
    1022:	8c 2f       	mov	r24, r28
    1024:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <TWI_Write>
  TWI_Stop();
    1028:	0e 94 98 08 	call	0x1130	; 0x1130 <TWI_Stop>
}
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <SPI_MasterInit>:

void
SPI_MasterInit (void)
{
  /* Check if already initialized */
  if (!(SPI_flag & 1))
    1030:	80 91 18 02 	lds	r24, 0x0218
    1034:	80 fd       	sbrc	r24, 0
    1036:	0d c0       	rjmp	.+26     	; 0x1052 <SPI_MasterInit+0x22>
    {
      /* Set MOSI and SCK output */
      DDRB |= (1<<PB5)|(1<<PB7);
    1038:	84 b1       	in	r24, 0x04	; 4
    103a:	80 6a       	ori	r24, 0xA0	; 160
    103c:	84 b9       	out	0x04, r24	; 4
      
      /* Enable SPI, Master */
      SPCR = (1<<SPE)|(1<<MSTR);
    103e:	80 e5       	ldi	r24, 0x50	; 80
    1040:	8c bd       	out	0x2c, r24	; 44
      
      /* Set Double SPI Speed Bit, SPI clock will be fck/2 */
      SPSR = (1<<SPI2X);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	8d bd       	out	0x2d, r24	; 45
      
      /* Set SPI Init Flag */
      SPI_flag = 1;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	90 93 19 02 	sts	0x0219, r25
    104e:	80 93 18 02 	sts	0x0218, r24
    1052:	08 95       	ret

00001054 <SPI_MasterTransfer>:

void
SPI_MasterTransfer (unsigned char c)
{
  /* Start transmission */
  SPDR = c;
    1054:	8e bd       	out	0x2e, r24	; 46
  
  /* Wait for transmission complete */
  while (!(SPSR & (1<<SPIF)));
    1056:	0d b4       	in	r0, 0x2d	; 45
    1058:	07 fe       	sbrs	r0, 7
    105a:	fd cf       	rjmp	.-6      	; 0x1056 <SPI_MasterTransfer+0x2>
}
    105c:	08 95       	ret

0000105e <TWI_Init>:

void
TWI_Init (void)
{
  // Port Setup
  DDRC &= ~((1 << PC0)|(1 << PC1));
    105e:	87 b1       	in	r24, 0x07	; 7
    1060:	8c 7f       	andi	r24, 0xFC	; 252
    1062:	87 b9       	out	0x07, r24	; 7
  PORTC |= (1 << PC0)|(1 << PC1);
    1064:	88 b1       	in	r24, 0x08	; 8
    1066:	83 60       	ori	r24, 0x03	; 3
    1068:	88 b9       	out	0x08, r24	; 8
  
  // Setup TWI Speed to 400kHZ (TWPS = 1)
  TWBR = 3;
    106a:	83 e0       	ldi	r24, 0x03	; 3
    106c:	80 93 b8 00 	sts	0x00B8, r24
  
  // Using TIMER2 to detect timeout
  TCCR2B = (7 << CS20);
    1070:	87 e0       	ldi	r24, 0x07	; 7
    1072:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = (1 << OCIE2A);
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	80 93 70 00 	sts	0x0070, r24
  
  OCR2A = 125;
    107c:	8d e7       	ldi	r24, 0x7D	; 125
    107e:	80 93 b3 00 	sts	0x00B3, r24
  
  // Interrupts REQUIRED!
  sei();
    1082:	78 94       	sei
    1084:	08 95       	ret

00001086 <TWI_Start>:
}

int16_t
TWI_Start (void)
{
  twi_timeout = 10;
    1086:	8a e0       	ldi	r24, 0x0A	; 10
    1088:	80 93 1a 02 	sts	0x021A, r24
  
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
    108c:	84 ea       	ldi	r24, 0xA4	; 164
    108e:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    1092:	ec eb       	ldi	r30, 0xBC	; 188
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 91 1a 02 	lds	r24, 0x021A
    109a:	88 23       	and	r24, r24
    109c:	19 f0       	breq	.+6      	; 0x10a4 <TWI_Start+0x1e>
    109e:	80 81       	ld	r24, Z
    10a0:	88 23       	and	r24, r24
    10a2:	cc f7       	brge	.-14     	; 0x1096 <TWI_Start+0x10>
  
  if (twi_timeout)
    10a4:	80 91 1a 02 	lds	r24, 0x021A
    10a8:	88 23       	and	r24, r24
    10aa:	29 f0       	breq	.+10     	; 0x10b6 <TWI_Start+0x30>
    return (int16_t) (TWSR & 0xf8);
    10ac:	80 91 b9 00 	lds	r24, 0x00B9
    10b0:	88 7f       	andi	r24, 0xF8	; 248
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	08 95       	ret
  else
    return -1;
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
}
    10ba:	08 95       	ret

000010bc <TWI_Address_RW>:

int16_t
TWI_Address_RW (uint8_t address)
{
  twi_timeout = 10;
    10bc:	9a e0       	ldi	r25, 0x0A	; 10
    10be:	90 93 1a 02 	sts	0x021A, r25
  
  TWDR = address;
    10c2:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
    10c6:	84 e8       	ldi	r24, 0x84	; 132
    10c8:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    10cc:	ec eb       	ldi	r30, 0xBC	; 188
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 91 1a 02 	lds	r24, 0x021A
    10d4:	88 23       	and	r24, r24
    10d6:	19 f0       	breq	.+6      	; 0x10de <TWI_Address_RW+0x22>
    10d8:	80 81       	ld	r24, Z
    10da:	88 23       	and	r24, r24
    10dc:	cc f7       	brge	.-14     	; 0x10d0 <TWI_Address_RW+0x14>
  
  if (twi_timeout)
    10de:	80 91 1a 02 	lds	r24, 0x021A
    10e2:	88 23       	and	r24, r24
    10e4:	29 f0       	breq	.+10     	; 0x10f0 <TWI_Address_RW+0x34>
    return (int16_t) (TWSR & 0xf8);
    10e6:	80 91 b9 00 	lds	r24, 0x00B9
    10ea:	88 7f       	andi	r24, 0xF8	; 248
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	08 95       	ret
  else
    return -1;
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
}
    10f4:	08 95       	ret

000010f6 <TWI_Write>:

int16_t
TWI_Write (uint8_t data)
{
  twi_timeout = 10;
    10f6:	9a e0       	ldi	r25, 0x0A	; 10
    10f8:	90 93 1a 02 	sts	0x021A, r25
  
  TWDR = data;
    10fc:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
    1100:	84 e8       	ldi	r24, 0x84	; 132
    1102:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    1106:	ec eb       	ldi	r30, 0xBC	; 188
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 91 1a 02 	lds	r24, 0x021A
    110e:	88 23       	and	r24, r24
    1110:	19 f0       	breq	.+6      	; 0x1118 <TWI_Write+0x22>
    1112:	80 81       	ld	r24, Z
    1114:	88 23       	and	r24, r24
    1116:	cc f7       	brge	.-14     	; 0x110a <TWI_Write+0x14>
  
  if (twi_timeout)
    1118:	80 91 1a 02 	lds	r24, 0x021A
    111c:	88 23       	and	r24, r24
    111e:	29 f0       	breq	.+10     	; 0x112a <TWI_Write+0x34>
    return (int16_t) (TWSR & 0xf8);
    1120:	80 91 b9 00 	lds	r24, 0x00B9
    1124:	88 7f       	andi	r24, 0xF8	; 248
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	08 95       	ret
  else
    return -1;
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	9f ef       	ldi	r25, 0xFF	; 255
}
    112e:	08 95       	ret

00001130 <TWI_Stop>:

void
TWI_Stop (void)
{
  twi_timeout = 10;
    1130:	8a e0       	ldi	r24, 0x0A	; 10
    1132:	80 93 1a 02 	sts	0x021A, r24
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
    1136:	84 e9       	ldi	r24, 0x94	; 148
    1138:	80 93 bc 00 	sts	0x00BC, r24
    113c:	08 95       	ret

0000113e <__vector_9>:
}

// ISR will be called every 8ms to decrease twi_timeout if > 0
ISR (TIMER2_COMPA_vect)
{
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	0b b6       	in	r0, 0x3b	; 59
    114a:	0f 92       	push	r0
    114c:	8f 93       	push	r24
    114e:	ef 93       	push	r30
    1150:	ff 93       	push	r31
  OCR2A += 125;
    1152:	e3 eb       	ldi	r30, 0xB3	; 179
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	83 58       	subi	r24, 0x83	; 131
    115a:	80 83       	st	Z, r24

  if (twi_timeout)
    115c:	80 91 1a 02 	lds	r24, 0x021A
    1160:	88 23       	and	r24, r24
    1162:	29 f0       	breq	.+10     	; 0x116e <__vector_9+0x30>
    twi_timeout--;
    1164:	80 91 1a 02 	lds	r24, 0x021A
    1168:	81 50       	subi	r24, 0x01	; 1
    116a:	80 93 1a 02 	sts	0x021A, r24
}
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	8f 91       	pop	r24
    1174:	0f 90       	pop	r0
    1176:	0b be       	out	0x3b, r0	; 59
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <__vector_20>:
{
	UCSR0A |= (0<<U2X0) | (0<<MPCM0);
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<< UCSZ01) | (1<< UCSZ00) | (0<< UCPOL0);
	UBRR0H = 0;
	UBRR0L = BAUD_VALUE; //9600 = 103 16 MHz
    1182:	1f 92       	push	r1
    1184:	0f 92       	push	r0
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	0f 92       	push	r0
    118a:	11 24       	eor	r1, r1
    118c:	0b b6       	in	r0, 0x3b	; 59
    118e:	0f 92       	push	r0
    1190:	2f 93       	push	r18
    1192:	8f 93       	push	r24
    1194:	9f 93       	push	r25
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
    119a:	90 91 c6 00 	lds	r25, 0x00C6
    119e:	9d 30       	cpi	r25, 0x0D	; 13
    11a0:	19 f1       	breq	.+70     	; 0x11e8 <__vector_20+0x66>
    11a2:	80 91 26 02 	lds	r24, 0x0226
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <__vector_20+0x2e>
    11aa:	90 93 25 02 	sts	0x0225, r25
    11ae:	18 c0       	rjmp	.+48     	; 0x11e0 <__vector_20+0x5e>
    11b0:	2e ef       	ldi	r18, 0xFE	; 254
    11b2:	28 0f       	add	r18, r24
    11b4:	20 3a       	cpi	r18, 0xA0	; 160
    11b6:	80 f4       	brcc	.+32     	; 0x11d8 <__vector_20+0x56>
    11b8:	20 91 25 02 	lds	r18, 0x0225
    11bc:	23 30       	cpi	r18, 0x03	; 3
    11be:	61 f4       	brne	.+24     	; 0x11d8 <__vector_20+0x56>
    11c0:	e8 2f       	mov	r30, r24
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	e1 5d       	subi	r30, 0xD1	; 209
    11c6:	f9 4f       	sbci	r31, 0xF9	; 249
    11c8:	90 83       	st	Z, r25
    11ca:	90 81       	ld	r25, Z
    11cc:	20 91 24 02 	lds	r18, 0x0224
    11d0:	92 27       	eor	r25, r18
    11d2:	90 93 24 02 	sts	0x0224, r25
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <__vector_20+0x5e>
    11d8:	82 3a       	cpi	r24, 0xA2	; 162
    11da:	11 f4       	brne	.+4      	; 0x11e0 <__vector_20+0x5e>
    11dc:	90 93 23 02 	sts	0x0223, r25
    11e0:	8f 5f       	subi	r24, 0xFF	; 255
    11e2:	80 93 26 02 	sts	0x0226, r24
    11e6:	12 c0       	rjmp	.+36     	; 0x120c <__vector_20+0x8a>
    11e8:	90 91 24 02 	lds	r25, 0x0224
    11ec:	80 91 23 02 	lds	r24, 0x0223
    11f0:	98 13       	cpse	r25, r24
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <__vector_20+0x78>
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 27 02 	sts	0x0227, r24
    11fa:	10 92 26 02 	sts	0x0226, r1
    11fe:	10 92 25 02 	sts	0x0225, r1
    1202:	8b eb       	ldi	r24, 0xBB	; 187
    1204:	80 93 23 02 	sts	0x0223, r24
    1208:	10 92 24 02 	sts	0x0224, r1
    120c:	ff 91       	pop	r31
    120e:	ef 91       	pop	r30
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	2f 91       	pop	r18
    1216:	0f 90       	pop	r0
    1218:	0b be       	out	0x3b, r0	; 59
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	1f 90       	pop	r1
    1222:	18 95       	reti

00001224 <__vector_22>:
    1224:	1f 92       	push	r1
    1226:	0f 92       	push	r0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	0f 92       	push	r0
    122c:	11 24       	eor	r1, r1
    122e:	0b b6       	in	r0, 0x3b	; 59
    1230:	0f 92       	push	r0
    1232:	2f 93       	push	r18
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	e0 91 22 02 	lds	r30, 0x0222
    1240:	e0 3a       	cpi	r30, 0xA0	; 160
    1242:	b0 f4       	brcc	.+44     	; 0x1270 <__vector_22+0x4c>
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	ef 5f       	subi	r30, 0xFF	; 255
    1248:	fe 4f       	sbci	r31, 0xFE	; 254
    124a:	80 81       	ld	r24, Z
    124c:	80 93 c6 00 	sts	0x00C6, r24
    1250:	80 91 22 02 	lds	r24, 0x0222
    1254:	e8 2f       	mov	r30, r24
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	ef 5f       	subi	r30, 0xFF	; 255
    125a:	fe 4f       	sbci	r31, 0xFE	; 254
    125c:	90 81       	ld	r25, Z
    125e:	20 91 21 02 	lds	r18, 0x0221
    1262:	92 27       	eor	r25, r18
    1264:	90 93 21 02 	sts	0x0221, r25
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	80 93 22 02 	sts	0x0222, r24
    126e:	1d c0       	rjmp	.+58     	; 0x12aa <__vector_22+0x86>
    1270:	e0 3a       	cpi	r30, 0xA0	; 160
    1272:	51 f4       	brne	.+20     	; 0x1288 <__vector_22+0x64>
    1274:	80 91 21 02 	lds	r24, 0x0221
    1278:	80 93 c6 00 	sts	0x00C6, r24
    127c:	80 91 22 02 	lds	r24, 0x0222
    1280:	8f 5f       	subi	r24, 0xFF	; 255
    1282:	80 93 22 02 	sts	0x0222, r24
    1286:	11 c0       	rjmp	.+34     	; 0x12aa <__vector_22+0x86>
    1288:	e1 3a       	cpi	r30, 0xA1	; 161
    128a:	49 f4       	brne	.+18     	; 0x129e <__vector_22+0x7a>
    128c:	8d e0       	ldi	r24, 0x0D	; 13
    128e:	80 93 c6 00 	sts	0x00C6, r24
    1292:	80 91 22 02 	lds	r24, 0x0222
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	80 93 22 02 	sts	0x0222, r24
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <__vector_22+0x86>
    129e:	10 92 21 02 	sts	0x0221, r1
    12a2:	10 92 22 02 	sts	0x0222, r1
    12a6:	10 92 27 02 	sts	0x0227, r1
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	9f 91       	pop	r25
    12b0:	8f 91       	pop	r24
    12b2:	2f 91       	pop	r18
    12b4:	0f 90       	pop	r0
    12b6:	0b be       	out	0x3b, r0	; 59
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <__vector_28>:
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	0b b6       	in	r0, 0x3b	; 59
    12ce:	0f 92       	push	r0
    12d0:	2f 93       	push	r18
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	ef 93       	push	r30
    12d8:	ff 93       	push	r31
    12da:	90 91 ce 00 	lds	r25, 0x00CE
    12de:	9d 30       	cpi	r25, 0x0D	; 13
    12e0:	19 f1       	breq	.+70     	; 0x1328 <__vector_28+0x66>
    12e2:	80 91 20 02 	lds	r24, 0x0220
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <__vector_28+0x2e>
    12ea:	90 93 1f 02 	sts	0x021F, r25
    12ee:	18 c0       	rjmp	.+48     	; 0x1320 <__vector_28+0x5e>
    12f0:	2e ef       	ldi	r18, 0xFE	; 254
    12f2:	28 0f       	add	r18, r24
    12f4:	20 3a       	cpi	r18, 0xA0	; 160
    12f6:	80 f4       	brcc	.+32     	; 0x1318 <__vector_28+0x56>
    12f8:	20 91 1f 02 	lds	r18, 0x021F
    12fc:	23 30       	cpi	r18, 0x03	; 3
    12fe:	61 f4       	brne	.+24     	; 0x1318 <__vector_28+0x56>
    1300:	e8 2f       	mov	r30, r24
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	e1 5d       	subi	r30, 0xD1	; 209
    1306:	f9 4f       	sbci	r31, 0xF9	; 249
    1308:	90 83       	st	Z, r25
    130a:	90 81       	ld	r25, Z
    130c:	20 91 1e 02 	lds	r18, 0x021E
    1310:	92 27       	eor	r25, r18
    1312:	90 93 1e 02 	sts	0x021E, r25
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__vector_28+0x5e>
    1318:	82 3a       	cpi	r24, 0xA2	; 162
    131a:	11 f4       	brne	.+4      	; 0x1320 <__vector_28+0x5e>
    131c:	90 93 1d 02 	sts	0x021D, r25
    1320:	8f 5f       	subi	r24, 0xFF	; 255
    1322:	80 93 20 02 	sts	0x0220, r24
    1326:	12 c0       	rjmp	.+36     	; 0x134c <__vector_28+0x8a>
    1328:	90 91 1e 02 	lds	r25, 0x021E
    132c:	80 91 1d 02 	lds	r24, 0x021D
    1330:	98 13       	cpse	r25, r24
    1332:	03 c0       	rjmp	.+6      	; 0x133a <__vector_28+0x78>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	80 93 27 02 	sts	0x0227, r24
    133a:	10 92 20 02 	sts	0x0220, r1
    133e:	10 92 1f 02 	sts	0x021F, r1
    1342:	8b eb       	ldi	r24, 0xBB	; 187
    1344:	80 93 1d 02 	sts	0x021D, r24
    1348:	10 92 1e 02 	sts	0x021E, r1
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0b be       	out	0x3b, r0	; 59
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_30>:
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	0b b6       	in	r0, 0x3b	; 59
    1370:	0f 92       	push	r0
    1372:	2f 93       	push	r18
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
    137c:	e0 91 1c 02 	lds	r30, 0x021C
    1380:	e0 3a       	cpi	r30, 0xA0	; 160
    1382:	b0 f4       	brcc	.+44     	; 0x13b0 <__vector_30+0x4c>
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	ef 5f       	subi	r30, 0xFF	; 255
    1388:	fe 4f       	sbci	r31, 0xFE	; 254
    138a:	80 81       	ld	r24, Z
    138c:	80 93 ce 00 	sts	0x00CE, r24
    1390:	80 91 1c 02 	lds	r24, 0x021C
    1394:	e8 2f       	mov	r30, r24
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	ef 5f       	subi	r30, 0xFF	; 255
    139a:	fe 4f       	sbci	r31, 0xFE	; 254
    139c:	90 81       	ld	r25, Z
    139e:	20 91 1b 02 	lds	r18, 0x021B
    13a2:	92 27       	eor	r25, r18
    13a4:	90 93 1b 02 	sts	0x021B, r25
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	80 93 1c 02 	sts	0x021C, r24
    13ae:	1d c0       	rjmp	.+58     	; 0x13ea <__vector_30+0x86>
    13b0:	e0 3a       	cpi	r30, 0xA0	; 160
    13b2:	51 f4       	brne	.+20     	; 0x13c8 <__vector_30+0x64>
    13b4:	80 91 1b 02 	lds	r24, 0x021B
    13b8:	80 93 ce 00 	sts	0x00CE, r24
    13bc:	80 91 1c 02 	lds	r24, 0x021C
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
    13c2:	80 93 1c 02 	sts	0x021C, r24
    13c6:	11 c0       	rjmp	.+34     	; 0x13ea <__vector_30+0x86>
    13c8:	e1 3a       	cpi	r30, 0xA1	; 161
    13ca:	49 f4       	brne	.+18     	; 0x13de <__vector_30+0x7a>
    13cc:	8d e0       	ldi	r24, 0x0D	; 13
    13ce:	80 93 ce 00 	sts	0x00CE, r24
    13d2:	80 91 1c 02 	lds	r24, 0x021C
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 1c 02 	sts	0x021C, r24
    13dc:	06 c0       	rjmp	.+12     	; 0x13ea <__vector_30+0x86>
    13de:	10 92 1b 02 	sts	0x021B, r1
    13e2:	10 92 1c 02 	sts	0x021C, r1
    13e6:	10 92 27 02 	sts	0x0227, r1
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	9f 91       	pop	r25
    13f0:	8f 91       	pop	r24
    13f2:	2f 91       	pop	r18
    13f4:	0f 90       	pop	r0
    13f6:	0b be       	out	0x3b, r0	; 59
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	0f 90       	pop	r0
    13fe:	1f 90       	pop	r1
    1400:	18 95       	reti

00001402 <uart_init1>:
	
}

void uart_init1 ()
{
	UCSR1A |= (0<<U2X1) | (0<<MPCM1);
    1402:	e8 ec       	ldi	r30, 0xC8	; 200
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	80 83       	st	Z, r24
	UCSR1B = (1<<RXCIE1) | (1<<TXCIE1) | (0<<UDRIE1) | (1<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
    140a:	88 ed       	ldi	r24, 0xD8	; 216
    140c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (0<<UMSEL11) | (0<<UMSEL10) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<< UCSZ11) | (1<< UCSZ10) | (0<< UCPOL1);
    1410:	86 e0       	ldi	r24, 0x06	; 6
    1412:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1H = 0;
    1416:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = BAUD_VALUE; //9600 = 103 16 MHz
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	80 93 cc 00 	sts	0x00CC, r24
    1420:	08 95       	ret

00001422 <__divsf3>:
    1422:	0e 94 25 0a 	call	0x144a	; 0x144a <__divsf3x>
    1426:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_round>
    142a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__fp_pscB>
    142e:	58 f0       	brcs	.+22     	; 0x1446 <__divsf3+0x24>
    1430:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fp_pscA>
    1434:	40 f0       	brcs	.+16     	; 0x1446 <__divsf3+0x24>
    1436:	29 f4       	brne	.+10     	; 0x1442 <__divsf3+0x20>
    1438:	5f 3f       	cpi	r21, 0xFF	; 255
    143a:	29 f0       	breq	.+10     	; 0x1446 <__divsf3+0x24>
    143c:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_inf>
    1440:	51 11       	cpse	r21, r1
    1442:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_szero>
    1446:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_nan>

0000144a <__divsf3x>:
    144a:	0e 94 17 0b 	call	0x162e	; 0x162e <__fp_split3>
    144e:	68 f3       	brcs	.-38     	; 0x142a <__divsf3+0x8>

00001450 <__divsf3_pse>:
    1450:	99 23       	and	r25, r25
    1452:	b1 f3       	breq	.-20     	; 0x1440 <__divsf3+0x1e>
    1454:	55 23       	and	r21, r21
    1456:	91 f3       	breq	.-28     	; 0x143c <__divsf3+0x1a>
    1458:	95 1b       	sub	r25, r21
    145a:	55 0b       	sbc	r21, r21
    145c:	bb 27       	eor	r27, r27
    145e:	aa 27       	eor	r26, r26
    1460:	62 17       	cp	r22, r18
    1462:	73 07       	cpc	r23, r19
    1464:	84 07       	cpc	r24, r20
    1466:	38 f0       	brcs	.+14     	; 0x1476 <__divsf3_pse+0x26>
    1468:	9f 5f       	subi	r25, 0xFF	; 255
    146a:	5f 4f       	sbci	r21, 0xFF	; 255
    146c:	22 0f       	add	r18, r18
    146e:	33 1f       	adc	r19, r19
    1470:	44 1f       	adc	r20, r20
    1472:	aa 1f       	adc	r26, r26
    1474:	a9 f3       	breq	.-22     	; 0x1460 <__divsf3_pse+0x10>
    1476:	35 d0       	rcall	.+106    	; 0x14e2 <__divsf3_pse+0x92>
    1478:	0e 2e       	mov	r0, r30
    147a:	3a f0       	brmi	.+14     	; 0x148a <__divsf3_pse+0x3a>
    147c:	e0 e8       	ldi	r30, 0x80	; 128
    147e:	32 d0       	rcall	.+100    	; 0x14e4 <__divsf3_pse+0x94>
    1480:	91 50       	subi	r25, 0x01	; 1
    1482:	50 40       	sbci	r21, 0x00	; 0
    1484:	e6 95       	lsr	r30
    1486:	00 1c       	adc	r0, r0
    1488:	ca f7       	brpl	.-14     	; 0x147c <__divsf3_pse+0x2c>
    148a:	2b d0       	rcall	.+86     	; 0x14e2 <__divsf3_pse+0x92>
    148c:	fe 2f       	mov	r31, r30
    148e:	29 d0       	rcall	.+82     	; 0x14e2 <__divsf3_pse+0x92>
    1490:	66 0f       	add	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	bb 1f       	adc	r27, r27
    1498:	26 17       	cp	r18, r22
    149a:	37 07       	cpc	r19, r23
    149c:	48 07       	cpc	r20, r24
    149e:	ab 07       	cpc	r26, r27
    14a0:	b0 e8       	ldi	r27, 0x80	; 128
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <__divsf3_pse+0x56>
    14a4:	bb 0b       	sbc	r27, r27
    14a6:	80 2d       	mov	r24, r0
    14a8:	bf 01       	movw	r22, r30
    14aa:	ff 27       	eor	r31, r31
    14ac:	93 58       	subi	r25, 0x83	; 131
    14ae:	5f 4f       	sbci	r21, 0xFF	; 255
    14b0:	3a f0       	brmi	.+14     	; 0x14c0 <__divsf3_pse+0x70>
    14b2:	9e 3f       	cpi	r25, 0xFE	; 254
    14b4:	51 05       	cpc	r21, r1
    14b6:	78 f0       	brcs	.+30     	; 0x14d6 <__divsf3_pse+0x86>
    14b8:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_inf>
    14bc:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_szero>
    14c0:	5f 3f       	cpi	r21, 0xFF	; 255
    14c2:	e4 f3       	brlt	.-8      	; 0x14bc <__divsf3_pse+0x6c>
    14c4:	98 3e       	cpi	r25, 0xE8	; 232
    14c6:	d4 f3       	brlt	.-12     	; 0x14bc <__divsf3_pse+0x6c>
    14c8:	86 95       	lsr	r24
    14ca:	77 95       	ror	r23
    14cc:	67 95       	ror	r22
    14ce:	b7 95       	ror	r27
    14d0:	f7 95       	ror	r31
    14d2:	9f 5f       	subi	r25, 0xFF	; 255
    14d4:	c9 f7       	brne	.-14     	; 0x14c8 <__divsf3_pse+0x78>
    14d6:	88 0f       	add	r24, r24
    14d8:	91 1d       	adc	r25, r1
    14da:	96 95       	lsr	r25
    14dc:	87 95       	ror	r24
    14de:	97 f9       	bld	r25, 7
    14e0:	08 95       	ret
    14e2:	e1 e0       	ldi	r30, 0x01	; 1
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	bb 1f       	adc	r27, r27
    14ec:	62 17       	cp	r22, r18
    14ee:	73 07       	cpc	r23, r19
    14f0:	84 07       	cpc	r24, r20
    14f2:	ba 07       	cpc	r27, r26
    14f4:	20 f0       	brcs	.+8      	; 0x14fe <__divsf3_pse+0xae>
    14f6:	62 1b       	sub	r22, r18
    14f8:	73 0b       	sbc	r23, r19
    14fa:	84 0b       	sbc	r24, r20
    14fc:	ba 0b       	sbc	r27, r26
    14fe:	ee 1f       	adc	r30, r30
    1500:	88 f7       	brcc	.-30     	; 0x14e4 <__divsf3_pse+0x94>
    1502:	e0 95       	com	r30
    1504:	08 95       	ret

00001506 <__fixunssfsi>:
    1506:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fp_splitA>
    150a:	88 f0       	brcs	.+34     	; 0x152e <__fixunssfsi+0x28>
    150c:	9f 57       	subi	r25, 0x7F	; 127
    150e:	98 f0       	brcs	.+38     	; 0x1536 <__fixunssfsi+0x30>
    1510:	b9 2f       	mov	r27, r25
    1512:	99 27       	eor	r25, r25
    1514:	b7 51       	subi	r27, 0x17	; 23
    1516:	b0 f0       	brcs	.+44     	; 0x1544 <__fixunssfsi+0x3e>
    1518:	e1 f0       	breq	.+56     	; 0x1552 <__fixunssfsi+0x4c>
    151a:	66 0f       	add	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	1a f0       	brmi	.+6      	; 0x152a <__fixunssfsi+0x24>
    1524:	ba 95       	dec	r27
    1526:	c9 f7       	brne	.-14     	; 0x151a <__fixunssfsi+0x14>
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <__fixunssfsi+0x4c>
    152a:	b1 30       	cpi	r27, 0x01	; 1
    152c:	91 f0       	breq	.+36     	; 0x1552 <__fixunssfsi+0x4c>
    152e:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fp_zero>
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	08 95       	ret
    1536:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__fp_zero>
    153a:	67 2f       	mov	r22, r23
    153c:	78 2f       	mov	r23, r24
    153e:	88 27       	eor	r24, r24
    1540:	b8 5f       	subi	r27, 0xF8	; 248
    1542:	39 f0       	breq	.+14     	; 0x1552 <__fixunssfsi+0x4c>
    1544:	b9 3f       	cpi	r27, 0xF9	; 249
    1546:	cc f3       	brlt	.-14     	; 0x153a <__fixunssfsi+0x34>
    1548:	86 95       	lsr	r24
    154a:	77 95       	ror	r23
    154c:	67 95       	ror	r22
    154e:	b3 95       	inc	r27
    1550:	d9 f7       	brne	.-10     	; 0x1548 <__fixunssfsi+0x42>
    1552:	3e f4       	brtc	.+14     	; 0x1562 <__fixunssfsi+0x5c>
    1554:	90 95       	com	r25
    1556:	80 95       	com	r24
    1558:	70 95       	com	r23
    155a:	61 95       	neg	r22
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	08 95       	ret

00001564 <__floatunsisf>:
    1564:	e8 94       	clt
    1566:	09 c0       	rjmp	.+18     	; 0x157a <__floatsisf+0x12>

00001568 <__floatsisf>:
    1568:	97 fb       	bst	r25, 7
    156a:	3e f4       	brtc	.+14     	; 0x157a <__floatsisf+0x12>
    156c:	90 95       	com	r25
    156e:	80 95       	com	r24
    1570:	70 95       	com	r23
    1572:	61 95       	neg	r22
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	8f 4f       	sbci	r24, 0xFF	; 255
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	99 23       	and	r25, r25
    157c:	a9 f0       	breq	.+42     	; 0x15a8 <__floatsisf+0x40>
    157e:	f9 2f       	mov	r31, r25
    1580:	96 e9       	ldi	r25, 0x96	; 150
    1582:	bb 27       	eor	r27, r27
    1584:	93 95       	inc	r25
    1586:	f6 95       	lsr	r31
    1588:	87 95       	ror	r24
    158a:	77 95       	ror	r23
    158c:	67 95       	ror	r22
    158e:	b7 95       	ror	r27
    1590:	f1 11       	cpse	r31, r1
    1592:	f8 cf       	rjmp	.-16     	; 0x1584 <__floatsisf+0x1c>
    1594:	fa f4       	brpl	.+62     	; 0x15d4 <__floatsisf+0x6c>
    1596:	bb 0f       	add	r27, r27
    1598:	11 f4       	brne	.+4      	; 0x159e <__floatsisf+0x36>
    159a:	60 ff       	sbrs	r22, 0
    159c:	1b c0       	rjmp	.+54     	; 0x15d4 <__floatsisf+0x6c>
    159e:	6f 5f       	subi	r22, 0xFF	; 255
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	8f 4f       	sbci	r24, 0xFF	; 255
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	16 c0       	rjmp	.+44     	; 0x15d4 <__floatsisf+0x6c>
    15a8:	88 23       	and	r24, r24
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <__floatsisf+0x48>
    15ac:	96 e9       	ldi	r25, 0x96	; 150
    15ae:	11 c0       	rjmp	.+34     	; 0x15d2 <__floatsisf+0x6a>
    15b0:	77 23       	and	r23, r23
    15b2:	21 f0       	breq	.+8      	; 0x15bc <__floatsisf+0x54>
    15b4:	9e e8       	ldi	r25, 0x8E	; 142
    15b6:	87 2f       	mov	r24, r23
    15b8:	76 2f       	mov	r23, r22
    15ba:	05 c0       	rjmp	.+10     	; 0x15c6 <__floatsisf+0x5e>
    15bc:	66 23       	and	r22, r22
    15be:	71 f0       	breq	.+28     	; 0x15dc <__floatsisf+0x74>
    15c0:	96 e8       	ldi	r25, 0x86	; 134
    15c2:	86 2f       	mov	r24, r22
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	2a f0       	brmi	.+10     	; 0x15d4 <__floatsisf+0x6c>
    15ca:	9a 95       	dec	r25
    15cc:	66 0f       	add	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	da f7       	brpl	.-10     	; 0x15ca <__floatsisf+0x62>
    15d4:	88 0f       	add	r24, r24
    15d6:	96 95       	lsr	r25
    15d8:	87 95       	ror	r24
    15da:	97 f9       	bld	r25, 7
    15dc:	08 95       	ret

000015de <__fp_inf>:
    15de:	97 f9       	bld	r25, 7
    15e0:	9f 67       	ori	r25, 0x7F	; 127
    15e2:	80 e8       	ldi	r24, 0x80	; 128
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	08 95       	ret

000015ea <__fp_nan>:
    15ea:	9f ef       	ldi	r25, 0xFF	; 255
    15ec:	80 ec       	ldi	r24, 0xC0	; 192
    15ee:	08 95       	ret

000015f0 <__fp_pscA>:
    15f0:	00 24       	eor	r0, r0
    15f2:	0a 94       	dec	r0
    15f4:	16 16       	cp	r1, r22
    15f6:	17 06       	cpc	r1, r23
    15f8:	18 06       	cpc	r1, r24
    15fa:	09 06       	cpc	r0, r25
    15fc:	08 95       	ret

000015fe <__fp_pscB>:
    15fe:	00 24       	eor	r0, r0
    1600:	0a 94       	dec	r0
    1602:	12 16       	cp	r1, r18
    1604:	13 06       	cpc	r1, r19
    1606:	14 06       	cpc	r1, r20
    1608:	05 06       	cpc	r0, r21
    160a:	08 95       	ret

0000160c <__fp_round>:
    160c:	09 2e       	mov	r0, r25
    160e:	03 94       	inc	r0
    1610:	00 0c       	add	r0, r0
    1612:	11 f4       	brne	.+4      	; 0x1618 <__fp_round+0xc>
    1614:	88 23       	and	r24, r24
    1616:	52 f0       	brmi	.+20     	; 0x162c <__fp_round+0x20>
    1618:	bb 0f       	add	r27, r27
    161a:	40 f4       	brcc	.+16     	; 0x162c <__fp_round+0x20>
    161c:	bf 2b       	or	r27, r31
    161e:	11 f4       	brne	.+4      	; 0x1624 <__fp_round+0x18>
    1620:	60 ff       	sbrs	r22, 0
    1622:	04 c0       	rjmp	.+8      	; 0x162c <__fp_round+0x20>
    1624:	6f 5f       	subi	r22, 0xFF	; 255
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	8f 4f       	sbci	r24, 0xFF	; 255
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	08 95       	ret

0000162e <__fp_split3>:
    162e:	57 fd       	sbrc	r21, 7
    1630:	90 58       	subi	r25, 0x80	; 128
    1632:	44 0f       	add	r20, r20
    1634:	55 1f       	adc	r21, r21
    1636:	59 f0       	breq	.+22     	; 0x164e <__fp_splitA+0x10>
    1638:	5f 3f       	cpi	r21, 0xFF	; 255
    163a:	71 f0       	breq	.+28     	; 0x1658 <__fp_splitA+0x1a>
    163c:	47 95       	ror	r20

0000163e <__fp_splitA>:
    163e:	88 0f       	add	r24, r24
    1640:	97 fb       	bst	r25, 7
    1642:	99 1f       	adc	r25, r25
    1644:	61 f0       	breq	.+24     	; 0x165e <__fp_splitA+0x20>
    1646:	9f 3f       	cpi	r25, 0xFF	; 255
    1648:	79 f0       	breq	.+30     	; 0x1668 <__fp_splitA+0x2a>
    164a:	87 95       	ror	r24
    164c:	08 95       	ret
    164e:	12 16       	cp	r1, r18
    1650:	13 06       	cpc	r1, r19
    1652:	14 06       	cpc	r1, r20
    1654:	55 1f       	adc	r21, r21
    1656:	f2 cf       	rjmp	.-28     	; 0x163c <__fp_split3+0xe>
    1658:	46 95       	lsr	r20
    165a:	f1 df       	rcall	.-30     	; 0x163e <__fp_splitA>
    165c:	08 c0       	rjmp	.+16     	; 0x166e <__fp_splitA+0x30>
    165e:	16 16       	cp	r1, r22
    1660:	17 06       	cpc	r1, r23
    1662:	18 06       	cpc	r1, r24
    1664:	99 1f       	adc	r25, r25
    1666:	f1 cf       	rjmp	.-30     	; 0x164a <__fp_splitA+0xc>
    1668:	86 95       	lsr	r24
    166a:	71 05       	cpc	r23, r1
    166c:	61 05       	cpc	r22, r1
    166e:	08 94       	sec
    1670:	08 95       	ret

00001672 <__fp_zero>:
    1672:	e8 94       	clt

00001674 <__fp_szero>:
    1674:	bb 27       	eor	r27, r27
    1676:	66 27       	eor	r22, r22
    1678:	77 27       	eor	r23, r23
    167a:	cb 01       	movw	r24, r22
    167c:	97 f9       	bld	r25, 7
    167e:	08 95       	ret

00001680 <__mulsf3>:
    1680:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__mulsf3x>
    1684:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__fp_round>
    1688:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__fp_pscA>
    168c:	38 f0       	brcs	.+14     	; 0x169c <__mulsf3+0x1c>
    168e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__fp_pscB>
    1692:	20 f0       	brcs	.+8      	; 0x169c <__mulsf3+0x1c>
    1694:	95 23       	and	r25, r21
    1696:	11 f0       	breq	.+4      	; 0x169c <__mulsf3+0x1c>
    1698:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_inf>
    169c:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_nan>
    16a0:	11 24       	eor	r1, r1
    16a2:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_szero>

000016a6 <__mulsf3x>:
    16a6:	0e 94 17 0b 	call	0x162e	; 0x162e <__fp_split3>
    16aa:	70 f3       	brcs	.-36     	; 0x1688 <__mulsf3+0x8>

000016ac <__mulsf3_pse>:
    16ac:	95 9f       	mul	r25, r21
    16ae:	c1 f3       	breq	.-16     	; 0x16a0 <__mulsf3+0x20>
    16b0:	95 0f       	add	r25, r21
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	55 1f       	adc	r21, r21
    16b6:	62 9f       	mul	r22, r18
    16b8:	f0 01       	movw	r30, r0
    16ba:	72 9f       	mul	r23, r18
    16bc:	bb 27       	eor	r27, r27
    16be:	f0 0d       	add	r31, r0
    16c0:	b1 1d       	adc	r27, r1
    16c2:	63 9f       	mul	r22, r19
    16c4:	aa 27       	eor	r26, r26
    16c6:	f0 0d       	add	r31, r0
    16c8:	b1 1d       	adc	r27, r1
    16ca:	aa 1f       	adc	r26, r26
    16cc:	64 9f       	mul	r22, r20
    16ce:	66 27       	eor	r22, r22
    16d0:	b0 0d       	add	r27, r0
    16d2:	a1 1d       	adc	r26, r1
    16d4:	66 1f       	adc	r22, r22
    16d6:	82 9f       	mul	r24, r18
    16d8:	22 27       	eor	r18, r18
    16da:	b0 0d       	add	r27, r0
    16dc:	a1 1d       	adc	r26, r1
    16de:	62 1f       	adc	r22, r18
    16e0:	73 9f       	mul	r23, r19
    16e2:	b0 0d       	add	r27, r0
    16e4:	a1 1d       	adc	r26, r1
    16e6:	62 1f       	adc	r22, r18
    16e8:	83 9f       	mul	r24, r19
    16ea:	a0 0d       	add	r26, r0
    16ec:	61 1d       	adc	r22, r1
    16ee:	22 1f       	adc	r18, r18
    16f0:	74 9f       	mul	r23, r20
    16f2:	33 27       	eor	r19, r19
    16f4:	a0 0d       	add	r26, r0
    16f6:	61 1d       	adc	r22, r1
    16f8:	23 1f       	adc	r18, r19
    16fa:	84 9f       	mul	r24, r20
    16fc:	60 0d       	add	r22, r0
    16fe:	21 1d       	adc	r18, r1
    1700:	82 2f       	mov	r24, r18
    1702:	76 2f       	mov	r23, r22
    1704:	6a 2f       	mov	r22, r26
    1706:	11 24       	eor	r1, r1
    1708:	9f 57       	subi	r25, 0x7F	; 127
    170a:	50 40       	sbci	r21, 0x00	; 0
    170c:	9a f0       	brmi	.+38     	; 0x1734 <__mulsf3_pse+0x88>
    170e:	f1 f0       	breq	.+60     	; 0x174c <__mulsf3_pse+0xa0>
    1710:	88 23       	and	r24, r24
    1712:	4a f0       	brmi	.+18     	; 0x1726 <__mulsf3_pse+0x7a>
    1714:	ee 0f       	add	r30, r30
    1716:	ff 1f       	adc	r31, r31
    1718:	bb 1f       	adc	r27, r27
    171a:	66 1f       	adc	r22, r22
    171c:	77 1f       	adc	r23, r23
    171e:	88 1f       	adc	r24, r24
    1720:	91 50       	subi	r25, 0x01	; 1
    1722:	50 40       	sbci	r21, 0x00	; 0
    1724:	a9 f7       	brne	.-22     	; 0x1710 <__mulsf3_pse+0x64>
    1726:	9e 3f       	cpi	r25, 0xFE	; 254
    1728:	51 05       	cpc	r21, r1
    172a:	80 f0       	brcs	.+32     	; 0x174c <__mulsf3_pse+0xa0>
    172c:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_inf>
    1730:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_szero>
    1734:	5f 3f       	cpi	r21, 0xFF	; 255
    1736:	e4 f3       	brlt	.-8      	; 0x1730 <__mulsf3_pse+0x84>
    1738:	98 3e       	cpi	r25, 0xE8	; 232
    173a:	d4 f3       	brlt	.-12     	; 0x1730 <__mulsf3_pse+0x84>
    173c:	86 95       	lsr	r24
    173e:	77 95       	ror	r23
    1740:	67 95       	ror	r22
    1742:	b7 95       	ror	r27
    1744:	f7 95       	ror	r31
    1746:	e7 95       	ror	r30
    1748:	9f 5f       	subi	r25, 0xFF	; 255
    174a:	c1 f7       	brne	.-16     	; 0x173c <__mulsf3_pse+0x90>
    174c:	fe 2b       	or	r31, r30
    174e:	88 0f       	add	r24, r24
    1750:	91 1d       	adc	r25, r1
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	97 f9       	bld	r25, 7
    1758:	08 95       	ret

0000175a <__umulhisi3>:
    175a:	a2 9f       	mul	r26, r18
    175c:	b0 01       	movw	r22, r0
    175e:	b3 9f       	mul	r27, r19
    1760:	c0 01       	movw	r24, r0
    1762:	a3 9f       	mul	r26, r19
    1764:	70 0d       	add	r23, r0
    1766:	81 1d       	adc	r24, r1
    1768:	11 24       	eor	r1, r1
    176a:	91 1d       	adc	r25, r1
    176c:	b2 9f       	mul	r27, r18
    176e:	70 0d       	add	r23, r0
    1770:	81 1d       	adc	r24, r1
    1772:	11 24       	eor	r1, r1
    1774:	91 1d       	adc	r25, r1
    1776:	08 95       	ret

00001778 <_exit>:
    1778:	f8 94       	cli

0000177a <__stop_program>:
    177a:	ff cf       	rjmp	.-2      	; 0x177a <__stop_program>
