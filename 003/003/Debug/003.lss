
003.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001232  000012c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b3  008001a0  008001a0  00001366  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001366  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c41  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aec  00000000  00000000  000042d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b6b  00000000  00000000  00004dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000834  00000000  00000000  00006930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088d  00000000  00000000  00007164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029db  00000000  00000000  000079f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__ctors_end>
       4:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
       8:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
       c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      10:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      14:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      18:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      1c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      20:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      24:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_9>
      28:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      2c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      30:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      34:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      38:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      3c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      40:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      44:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      48:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      4c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      50:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_20>
      54:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      58:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__vector_22>
      5c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      60:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      64:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      68:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      6c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      70:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_28>
      74:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      78:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__vector_30>
      7c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      80:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      84:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>
      88:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	4c 69       	ori	r20, 0x9C	; 156
      8e:	20 58       	subi	r18, 0x80	; 128
      90:	75 65       	ori	r23, 0x55	; 85
      92:	6a 69       	ori	r22, 0x9A	; 154
      94:	6e 67       	ori	r22, 0x7E	; 126
      96:	0d 0a       	sbc	r0, r29
	...

00000099 <__c.2120>:
      99:	57 61 6e 67 20 53 68 69 68 61 6e 67 0d 0a 00        Wang Shihang...

000000a8 <__c.2118>:
      a8:	4d 65 6d 62 65 72 73 3a 0d 0a 00                    Members:...

000000b3 <__c.2116>:
      b3:	44 44 53 2d 53 69 67 6e 61 6c 67 65 6e 65 72 61     DDS-Signalgenera
      c3:	74 6f 72 0d 0a 00                                   tor...

000000c9 <__c.2114>:
      c9:	50 72 6f 6a 65 63 74 20 30 34 3a 0d 0a 00           Project 04:...

000000d7 <raster>:
      d7:	ff 80 80 80 80 80 80 80 80 c0 80 80 80 80 80 80     ................
      e7:	80 80 80 c0 80 80 80 80 80 80 80 80 80 c0 80 80     ................
      f7:	80 80 80 80 80 80 80 c0 80 80 80 80 80 80 80 80     ................
     107:	80 d5 80 80 80 80 80 80 80 80 80 c0 80 80 80 80     ................
     117:	80 80 80 80 80 c0 80 80 80 80 80 80 80 80 80 c0     ................
     127:	80 80 80 80 80 80 80 80 80 c0 80 80 80 80 80 80     ................
     137:	80 80 80 80 ff 00 00 0f 1f 31 31 1f 0f 00 00 3f     .........11....?
     147:	3f 00 00 3f 3f 00 00 20 3f 3f 22 23 3f 1c 00 00     ?..??.. ??"#?...
     157:	ff 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00     ................
     167:	00 00 00 10 00 00 00 00 00 00 00 00 00 10 00 00     ................
     177:	00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00     ................
     187:	10 55 10 00 00 00 00 00 00 00 00 10 00 00 00 00     .U..............
     197:	00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 10     ................
	...
     1af:	00 10 00 00 00 00 00 00 00 00 00 10 ff 00 00 e3     ................
     1bf:	e4 04 03 e0 e0 00 00 80 c0 60 60 c0 80 00 00 20     .........``.... 
     1cf:	e0 e0 00 00 e0 e0 00 00 ff 04 00 00 00 00 00 00     ................
     1df:	00 04 00 00 00 00 00 00 00 00 00 04 00 00 00 00     ................
     1ef:	00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 04     ................
	...
     207:	04 55 04 00 00 00 00 00 00 00 00 04 00 00 00 00     .U..............
     217:	00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 04     ................
	...
     22f:	00 04 00 00 00 00 00 00 00 00 00 04 ff 00 00 98     ................
     23f:	44 44 38 00 78 84 84 84 00 78 84 84 78 00 ff 84     DD8.x....x..x...
     24f:	84 78 00 78 94 94 74 00 ff 01 00 01 00 01 00 01     .x.x..t.........
     25f:	00 03 00 01 00 01 00 01 00 01 00 03 00 01 00 01     ................
     26f:	00 01 00 01 00 03 00 01 00 01 00 01 00 01 00 03     ................
     27f:	00 01 00 01 00 01 00 01 00 55 00 01 00 01 00 01     .........U......
     28f:	00 01 00 03 00 01 00 01 00 01 00 01 00 03 00 01     ................
     29f:	00 01 00 01 00 01 00 03 00 01 00 01 00 01 00 01     ................
     2af:	00 03 00 01 00 01 00 01 00 01 00 01 ff 00 00 0f     ................
     2bf:	0a 08 00 00 0f 0a 0d 00 00 0f 0a 08 00 00 07 08     ................
     2cf:	08 07 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
     2df:	00 80 00 00 00 00 00 00 00 00 00 80 00 00 00 00     ................
     2ef:	00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 80     ................
	...
     307:	00 55 00 00 00 00 00 00 00 00 00 80 00 00 00 00     .U..............
     317:	00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 80     ................
	...
     32f:	00 80 00 00 00 00 00 00 00 00 00 00 ff 00 00 80     ................
     33f:	00 00 00 00 80 00 80 00 00 80 80 80 00 00 00 80     ................
     34f:	80 80 80 00 00 00 00 00 ff 40 00 00 00 00 00 00     .........@......
     35f:	00 40 00 00 00 00 00 00 00 00 00 40 00 00 00 00     .@.........@....
     36f:	00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 40     .....@.........@
	...
     387:	40 55 40 00 00 00 00 00 00 00 00 40 00 00 00 00     @U@........@....
     397:	00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 40     .....@.........@
	...
     3af:	00 40 00 00 00 00 00 00 00 00 00 40 ff 00 00 00     .@.........@....
	...
     3d7:	ff 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00     ................
     3e7:	00 00 00 10 00 00 00 00 00 00 00 00 00 10 00 00     ................
     3f7:	00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00     ................
     407:	10 55 10 00 00 00 00 00 00 00 00 10 00 00 00 00     .U..............
     417:	00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 10     ................
	...
     42f:	00 10 00 00 00 00 00 00 00 00 00 10 ff 00 00 00     ................
	...
     457:	ff 01 01 01 01 01 01 01 01 05 01 01 01 01 01 01     ................
     467:	01 01 01 05 01 01 01 01 01 01 01 01 01 05 01 01     ................
     477:	01 01 01 01 01 01 01 05 01 01 01 01 01 01 01 01     ................
     487:	01 55 01 01 01 01 01 01 01 01 01 05 01 01 01 01     .U..............
     497:	01 01 01 01 01 05 01 01 01 01 01 01 01 01 01 05     ................
     4a7:	01 01 01 01 01 01 01 01 01 05 01 01 01 01 01 01     ................
     4b7:	01 01 01 01 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000004d7 <font>:
     4d7:	00 00 00 00 00 00 00 3e 45 51 45 3e 00 3e 6b 6f     .......>EQE>.>ko
     4e7:	6b 3e 00 1c 3e 7c 3e 1c 00 18 3c 7e 3c 18 00 30     k>..>|>...<~<..0
     4f7:	36 7f 36 30 00 18 5c 7e 5c 18 00 00 00 00 00 00     6.60..\~\.......
	...
     517:	00 00 00 30 48 4a 36 0e 00 06 29 79 29 06 00 00     ...0HJ6...)y)...
     527:	00 00 00 00 00 60 7e 0a 35 3f 00 2a 1c 36 1c 2a     .....`~.5?.*.6.*
     537:	00 00 7f 3e 1c 08 00 08 1c 3e 7f 00 00 14 36 7f     ...>.....>....6.
     547:	36 14 00 00 5f 00 5f 00 00 06 09 7f 01 7f 00 22     6..._._........"
     557:	4d 55 59 22 00 60 60 60 60 00 00 14 b6 ff b6 14     MUY".````.......
     567:	00 04 06 7f 06 04 00 10 30 7f 30 10 00 08 08 3e     ........0.0....>
     577:	1c 08 00 08 1c 3e 08 08 00 78 40 40 40 40 00 08     .....>...x@@@@..
     587:	3e 08 3e 08 00 30 3c 3f 3c 30 00 03 0f 3f 0f 03     >.>..0<?<0...?..
	...
     59f:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     5af:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     5bf:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     5cf:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     5df:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     5ef:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     5ff:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     60f:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     61f:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     62f:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     63f:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     64f:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     65f:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     66f:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     67f:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     68f:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     69f:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     6af:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     6bf:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     6cf:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     6df:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     6ef:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     6ff:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     70f:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     71f:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     72f:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     73f:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     74f:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     75f:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     76f:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     77f:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     78f:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     79f:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     7af:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     7bf:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     7cf:	01 00 00 3c 26 23 26 3c 00 1e a1 e1 21 12 00 3d     ...<&#&<....!..=
     7df:	40 20 7d 00 00 38 54 54 55 09 00 20 55 55 55 78     @ }..8TTU.. UUUx
     7ef:	00 20 55 54 55 78 00 20 55 55 54 78 00 20 57 55     . UTUx. UUTx. WU
     7ff:	57 78 00 1c a2 e2 22 14 00 38 55 55 55 08 00 38     Wx...."..8UUU..8
     80f:	55 54 55 08 00 38 55 55 54 08 00 00 01 7c 41 00     UTU..8UUT....|A.
     81f:	00 00 01 7d 41 00 00 00 01 7c 40 00 00 70 29 24     ...}A....|@..p)$
     82f:	29 70 00 78 2f 25 2f 78 00 7c 54 54 55 45 00 34     )p.x/%/x.|TTUE.4
     83f:	54 7c 54 58 00 7e 09 7f 49 49 00 38 45 45 39 00     T|TX.~..II.8EE9.
     84f:	00 38 45 44 39 00 00 39 45 44 38 00 00 3c 41 21     .8ED9..9ED8..<A!
     85f:	7d 00 00 3d 41 20 7c 00 00 9c a1 60 3d 00 00 3d     }..=A |....`=..=
     86f:	42 42 3d 00 00 3c 41 40 3d 00 80 70 68 58 38 04     BB=..<A@=..phX8.
     87f:	00 48 3e 49 49 62 00 7e 61 5d 43 3f 00 22 14 08     .H>IIb.~a]C?."..
     88f:	14 22 00 40 88 7e 09 02 00 20 54 55 55 78 00 00     .".@.~... TUUx..
     89f:	00 7d 41 00 00 38 44 45 39 00 00 3c 40 21 7d 00     .}A..8DE9..<@!}.
     8af:	00 7a 09 0a 71 00 00 7a 11 22 79 00 00 08 55 55     .z..q..z."y...UU
     8bf:	55 5e 00 4e 51 51 4e 00 00 30 48 4d 40 20 3e 41     U^.NQQN..0HM@ >A
     8cf:	5d 4b 55 3e 04 04 04 04 04 1c 00 17 08 4c 6a 50     ]KU>.........LjP
     8df:	00 17 08 34 2a 78 00 00 30 7d 30 00 00 08 14 00     ...4*x..0}0.....
     8ef:	08 14 00 14 08 00 14 08 44 11 44 11 44 11 aa 55     ........D.D.D..U
     8ff:	aa 55 aa 55 bb ee bb ee bb ee 00 00 00 ff 00 00     .U.U............
     90f:	08 08 08 ff 00 00 00 70 28 25 29 70 00 70 29 25     .......p(%)p.p)%
     91f:	29 70 00 70 29 25 28 70 3e 41 5d 55 41 3e 0a fb     )p.p)%(p>A]UA>..
     92f:	00 ff 00 00 00 ff 00 ff 00 00 0a fa 02 fe 00 00     ................
     93f:	0a 0b 08 0f 00 00 00 18 24 66 24 00 00 29 2a 7c     ........$f$..)*|
     94f:	2a 29 08 08 08 f8 00 00 00 00 00 0f 08 08 08 08     *)..............
     95f:	08 0f 08 08 08 08 08 f8 08 08 00 00 00 ff 08 08     ................
     96f:	08 08 08 08 08 08 08 08 08 ff 08 08 00 20 56 55     ............. VU
     97f:	56 79 00 70 2a 25 2a 71 00 0f 08 0b 0a 0a 00 fe     Vy.p*%*q........
     98f:	02 fa 0a 0a 0a 0b 08 0b 0a 0a 0a fa 02 fa 0a 0a     ................
     99f:	00 ff 00 fb 0a 0a 0a 0a 0a 0a 0a 0a 0a fb 00 fb     ................
     9af:	0a 0a 00 5d 22 22 22 5d 00 22 55 59 30 00 00 08     ...]"""]."UY0...
     9bf:	7f 49 41 3e 00 7c 55 55 55 44 00 7c 55 54 55 44     .IA>.|UUUD.|UTUD
     9cf:	00 7c 55 55 54 44 00 00 00 07 00 00 00 00 44 7d     .|UUTD........D}
     9df:	45 00 00 00 45 7d 45 00 00 00 45 7c 45 00 08 08     E...E}E...E|E...
     9ef:	08 0f 00 00 00 00 00 f8 08 08 ff ff ff ff ff ff     ................
     9ff:	f0 f0 f0 f0 f0 f0 00 00 00 77 00 00 00 00 45 7d     .........w....E}
     a0f:	44 00 0f 0f 0f 0f 0f 0f 00 3c 42 43 3d 00 00 fe     D........<BC=...
     a1f:	4a 4a 34 00 00 3c 43 43 3d 00 00 3d 43 42 3c 00     JJ4..<CC=..=CB<.
     a2f:	00 32 49 4a 31 00 00 3a 45 46 39 00 00 fc 20 20     .2IJ1..:EF9...  
     a3f:	1c 00 00 fe aa 28 10 00 00 ff a5 24 18 00 00 3c     .....(.....$...<
     a4f:	40 41 3d 00 00 3c 41 41 3d 00 00 3d 41 40 3c 00     @A=..<AA=..=A@<.
     a5f:	00 9c a0 61 3d 00 00 04 08 71 09 04 00 00 02 02     ...a=....q......
     a6f:	02 00 00 00 07 03 00 00 00 00 08 08 08 00 00 00     ................
     a7f:	24 2e 24 00 00 24 24 24 24 24 05 17 0a 34 2a 78     $.$..$$$$$...4*x
     a8f:	00 06 09 7f 01 7f 00 22 4d 55 59 22 00 08 08 2a     ......."MUY"...*
     a9f:	08 08 00 00 08 18 18 00 00 06 09 09 06 00 00 00     ................
     aaf:	08 00 08 00 00 00 08 00 00 00 00 02 0f 00 00 00     ................
     abf:	00 09 0f 05 00 00 00 09 0d 0a 00 00 00 3c 3c 3c     .............<<<
     acf:	3c 00 00 00 00 00 00 00 00                          <........

00000ad8 <__ctors_end>:
     ad8:	11 24       	eor	r1, r1
     ada:	1f be       	out	0x3f, r1	; 63
     adc:	cf ef       	ldi	r28, 0xFF	; 255
     ade:	d0 e4       	ldi	r29, 0x40	; 64
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	cd bf       	out	0x3d, r28	; 61

00000ae4 <__do_copy_data>:
     ae4:	11 e0       	ldi	r17, 0x01	; 1
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	b1 e0       	ldi	r27, 0x01	; 1
     aea:	e2 e3       	ldi	r30, 0x32	; 50
     aec:	f2 e1       	ldi	r31, 0x12	; 18
     aee:	00 e0       	ldi	r16, 0x00	; 0
     af0:	0b bf       	out	0x3b, r16	; 59
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <__do_copy_data+0x14>
     af4:	07 90       	elpm	r0, Z+
     af6:	0d 92       	st	X+, r0
     af8:	a0 3a       	cpi	r26, 0xA0	; 160
     afa:	b1 07       	cpc	r27, r17
     afc:	d9 f7       	brne	.-10     	; 0xaf4 <__do_copy_data+0x10>

00000afe <__do_clear_bss>:
     afe:	26 e0       	ldi	r18, 0x06	; 6
     b00:	a0 ea       	ldi	r26, 0xA0	; 160
     b02:	b1 e0       	ldi	r27, 0x01	; 1
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <.do_clear_bss_start>

00000b06 <.do_clear_bss_loop>:
     b06:	1d 92       	st	X+, r1

00000b08 <.do_clear_bss_start>:
     b08:	a3 35       	cpi	r26, 0x53	; 83
     b0a:	b2 07       	cpc	r27, r18
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <.do_clear_bss_loop>
     b0e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <main>
     b12:	0c 94 17 09 	jmp	0x122e	; 0x122e <_exit>

00000b16 <__bad_interrupt>:
     b16:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b1a <start>:
	ADCSRA |= ((1<<ADEN) | (1<<ADSC) | (1<<ADPS1)); // ADC prescaler at 4
}

void fillDataLcdBuffer (uint8_t address, uint8_t data)
{
	dataLcdBuffer[address] = data;
     b1a:	85 e1       	ldi	r24, 0x15	; 21
     b1c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Backlight_LED>
     b20:	89 ec       	ldi	r24, 0xC9	; 201
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 aa 06 	call	0xd54	; 0xd54 <LCD_PutString_P>
     b28:	83 eb       	ldi	r24, 0xB3	; 179
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 aa 06 	call	0xd54	; 0xd54 <LCD_PutString_P>
     b30:	88 ea       	ldi	r24, 0xA8	; 168
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 aa 06 	call	0xd54	; 0xd54 <LCD_PutString_P>
     b38:	89 e9       	ldi	r24, 0x99	; 153
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 aa 06 	call	0xd54	; 0xd54 <LCD_PutString_P>
     b40:	8c e8       	ldi	r24, 0x8C	; 140
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 aa 06 	call	0xd54	; 0xd54 <LCD_PutString_P>
     b48:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <LCD_Update>
     b4c:	67 e0       	ldi	r22, 0x07	; 7
     b4e:	84 e1       	ldi	r24, 0x14	; 20
     b50:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_GotoXY>
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LCD_PutChar>
     b5a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <LCD_Update>
     b5e:	03 99       	sbic	0x00, 3	; 0
     b60:	fe cf       	rjmp	.-4      	; 0xb5e <start+0x44>
     b62:	03 9b       	sbis	0x00, 3	; 0
     b64:	fe cf       	rjmp	.-4      	; 0xb62 <start+0x48>
     b66:	2f ef       	ldi	r18, 0xFF	; 255
     b68:	89 ef       	ldi	r24, 0xF9	; 249
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	21 50       	subi	r18, 0x01	; 1
     b6e:	80 40       	sbci	r24, 0x00	; 0
     b70:	90 40       	sbci	r25, 0x00	; 0
     b72:	e1 f7       	brne	.-8      	; 0xb6c <start+0x52>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <start+0x5c>
     b76:	00 00       	nop
     b78:	03 99       	sbic	0x00, 3	; 0
     b7a:	fe cf       	rjmp	.-4      	; 0xb78 <start+0x5e>
     b7c:	08 95       	ret

00000b7e <create_raster>:
void create_raster()
{
	uint16_t raster_offset = 0;				
	uint8_t fb_x = 0;
	uint8_t fb_y = 0;
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);	
     b7e:	85 e1       	ldi	r24, 0x15	; 21
     b80:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Backlight_LED>
	LCD_Clear();
     b84:	0e 94 49 06 	call	0xc92	; 0xc92 <LCD_Clear>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0d c0       	rjmp	.+26     	; 0xba8 <create_raster+0x2a>
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
			lcd_framebuffer[fb_y][fb_x] = pgm_read_byte(&raster[raster_offset++]);
     b8e:	cf 01       	movw	r24, r30
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	e9 52       	subi	r30, 0x29	; 41
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	e4 91       	lpm	r30, Z
     b98:	ed 93       	st	X+, r30
     b9a:	fc 01       	movw	r30, r24
	uint8_t fb_x = 0;
	uint8_t fb_y = 0;
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);	
	LCD_Clear();
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
     b9c:	82 17       	cp	r24, r18
     b9e:	93 07       	cpc	r25, r19
     ba0:	b1 f7       	brne	.-20     	; 0xb8e <create_raster+0x10>
	uint16_t raster_offset = 0;				
	uint8_t fb_x = 0;
	uint8_t fb_y = 0;
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);	
	LCD_Clear();
	for (fb_y = 0; fb_y < 8; fb_y++)
     ba2:	21 15       	cp	r18, r1
     ba4:	34 40       	sbci	r19, 0x04	; 4
     ba6:	41 f0       	breq	.+16     	; 0xbb8 <create_raster+0x3a>
     ba8:	dc 01       	movw	r26, r24
     baa:	ad 54       	subi	r26, 0x4D	; 77
     bac:	be 4f       	sbci	r27, 0xFE	; 254
     bae:	9c 01       	movw	r18, r24
     bb0:	20 58       	subi	r18, 0x80	; 128
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
{
	dataLcdBuffer[address] = data;
}

void create_raster()
{
     bb4:	fc 01       	movw	r30, r24
     bb6:	eb cf       	rjmp	.-42     	; 0xb8e <create_raster+0x10>
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);	
	LCD_Clear();
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
			lcd_framebuffer[fb_y][fb_x] = pgm_read_byte(&raster[raster_offset++]);
	lcd_frameupdate = 0xff;
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	80 93 a2 01 	sts	0x01A2, r24
	LCD_Update();
     bbe:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <LCD_Update>
	while(1);
     bc2:	ff cf       	rjmp	.-2      	; 0xbc2 <create_raster+0x44>

00000bc4 <main>:


int main(void)
{
	// set PA3-PA7 as input and activated internal Pull-Up
	DDRA &= ~((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     bc4:	81 b1       	in	r24, 0x01	; 1
     bc6:	87 70       	andi	r24, 0x07	; 7
     bc8:	81 b9       	out	0x01, r24	; 1
	PORTA |= ((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     bca:	82 b1       	in	r24, 0x02	; 2
     bcc:	88 6f       	ori	r24, 0xF8	; 248
     bce:	82 b9       	out	0x02, r24	; 2
	
	// set PB0-PB3 as output
	DDRB = 0x0F;
     bd0:	8f e0       	ldi	r24, 0x0F	; 15
     bd2:	84 b9       	out	0x04, r24	; 4
	// set PB0-PB3 on high-level
	PORTB |= 0x0F;		// Required for DMM Board DMM Board 2013
     bd4:	85 b1       	in	r24, 0x05	; 5
     bd6:	8f 60       	ori	r24, 0x0F	; 15
     bd8:	85 b9       	out	0x05, r24	; 5
	
	//void(*get_frequence_p)(void) = get_frequence;			//define a function pointer, point to function get_frequence

	LCD_Init();
     bda:	0e 94 db 06 	call	0xdb6	; 0xdb6 <LCD_Init>
    uart_init0();
     bde:	0e 94 07 09 	call	0x120e	; 0x120e <uart_init0>
	start ();
     be2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <start>
	create_raster();
     be6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <create_raster>

00000bea <dataflash_init>:
void
dataflash_init (void)
{
  // AT45DB081 doesn't actually need an intialization,
  // only the ChipSelect should be configured as an output.
  DDRB |= (1 << PB4);
     bea:	24 9a       	sbi	0x04, 4	; 4
  DATAFLASH_Chip_Unselect;
     bec:	2c 9a       	sbi	0x05, 4	; 5
  SPI_MasterInit();
     bee:	0e 94 1e 07 	call	0xe3c	; 0xe3c <SPI_MasterInit>
     bf2:	08 95       	ret

00000bf4 <LCD_Update>:
  unsigned char x;
  
  for (x = 0; x < 128; x++)
    lcd_framebuffer[line][x] = 0x00;
  
  lcd_frameupdate |= (1 << line);
     bf4:	bf 92       	push	r11
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	bf b6       	in	r11, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	03 eb       	ldi	r16, 0xB3	; 179
     c0c:	15 e0       	ldi	r17, 0x05	; 5
     c0e:	0f 2e       	mov	r0, r31
     c10:	f3 eb       	ldi	r31, 0xB3	; 179
     c12:	cf 2e       	mov	r12, r31
     c14:	f1 e0       	ldi	r31, 0x01	; 1
     c16:	df 2e       	mov	r13, r31
     c18:	f0 2d       	mov	r31, r0
     c1a:	0f 2e       	mov	r0, r31
     c1c:	f7 e0       	ldi	r31, 0x07	; 7
     c1e:	ef 2e       	mov	r14, r31
     c20:	f1 2c       	mov	r15, r1
     c22:	f0 2d       	mov	r31, r0
     c24:	80 91 a2 01 	lds	r24, 0x01A2
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 2c       	mov	r0, r14
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <LCD_Update+0x3e>
     c2e:	95 95       	asr	r25
     c30:	87 95       	ror	r24
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <LCD_Update+0x3a>
     c36:	80 ff       	sbrs	r24, 0
     c38:	17 c0       	rjmp	.+46     	; 0xc68 <LCD_Update+0x74>
     c3a:	46 98       	cbi	0x08, 6	; 8
     c3c:	47 98       	cbi	0x08, 7	; 8
     c3e:	8e 2d       	mov	r24, r14
     c40:	80 6b       	ori	r24, 0xB0	; 176
     c42:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     c46:	80 e1       	ldi	r24, 0x10	; 16
     c48:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     c52:	47 9a       	sbi	0x08, 7	; 8
     c54:	e8 01       	movw	r28, r16
     c56:	c0 58       	subi	r28, 0x80	; 128
     c58:	d1 09       	sbc	r29, r1
     c5a:	89 91       	ld	r24, Y+
     c5c:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     c60:	c0 17       	cp	r28, r16
     c62:	d1 07       	cpc	r29, r17
     c64:	d1 f7       	brne	.-12     	; 0xc5a <LCD_Update+0x66>
     c66:	46 9a       	sbi	0x08, 6	; 8
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	e8 1a       	sub	r14, r24
     c6c:	f1 08       	sbc	r15, r1
     c6e:	00 58       	subi	r16, 0x80	; 128
     c70:	11 09       	sbc	r17, r1
     c72:	0c 15       	cp	r16, r12
     c74:	1d 05       	cpc	r17, r13
     c76:	b1 f6       	brne	.-84     	; 0xc24 <LCD_Update+0x30>
     c78:	10 92 a2 01 	sts	0x01A2, r1
     c7c:	bf be       	out	0x3f, r11	; 63
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	bf 90       	pop	r11
     c90:	08 95       	ret

00000c92 <LCD_Clear>:
     c92:	e3 eb       	ldi	r30, 0xB3	; 179
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	23 eb       	ldi	r18, 0xB3	; 179
     c98:	35 e0       	ldi	r19, 0x05	; 5
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <LCD_Clear+0x1a>
     c9c:	11 92       	st	Z+, r1
     c9e:	e8 17       	cp	r30, r24
     ca0:	f9 07       	cpc	r31, r25
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <LCD_Clear+0xa>
     ca4:	fc 01       	movw	r30, r24
     ca6:	82 17       	cp	r24, r18
     ca8:	93 07       	cpc	r25, r19
     caa:	21 f0       	breq	.+8      	; 0xcb4 <LCD_Clear+0x22>
     cac:	cf 01       	movw	r24, r30
     cae:	80 58       	subi	r24, 0x80	; 128
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	f4 cf       	rjmp	.-24     	; 0xc9c <LCD_Clear+0xa>
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	80 93 a2 01 	sts	0x01A2, r24
     cba:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <LCD_Update>
     cbe:	08 95       	ret

00000cc0 <LCD_PutChar>:
     cc0:	8a 30       	cpi	r24, 0x0A	; 10
     cc2:	29 f0       	breq	.+10     	; 0xcce <LCD_PutChar+0xe>
     cc4:	8d 30       	cpi	r24, 0x0D	; 13
     cc6:	61 f4       	brne	.+24     	; 0xce0 <LCD_PutChar+0x20>
     cc8:	10 92 a1 01 	sts	0x01A1, r1
     ccc:	08 95       	ret
     cce:	80 91 a0 01 	lds	r24, 0x01A0
     cd2:	87 30       	cpi	r24, 0x07	; 7
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <LCD_PutChar+0x18>
     cd6:	3d c0       	rjmp	.+122    	; 0xd52 <LCD_PutChar+0x92>
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	80 93 a0 01 	sts	0x01A0, r24
     cde:	08 95       	ret
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	fc 01       	movw	r30, r24
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	e8 0f       	add	r30, r24
     cea:	f9 1f       	adc	r31, r25
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	e9 52       	subi	r30, 0x29	; 41
     cf2:	fb 4f       	sbci	r31, 0xFB	; 251
     cf4:	80 91 a1 01 	lds	r24, 0x01A1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	dc 01       	movw	r26, r24
     cfc:	aa 0f       	add	r26, r26
     cfe:	bb 1f       	adc	r27, r27
     d00:	a8 0f       	add	r26, r24
     d02:	b9 1f       	adc	r27, r25
     d04:	aa 0f       	add	r26, r26
     d06:	bb 1f       	adc	r27, r27
     d08:	80 91 a0 01 	lds	r24, 0x01A0
     d0c:	90 e8       	ldi	r25, 0x80	; 128
     d0e:	89 9f       	mul	r24, r25
     d10:	a0 0d       	add	r26, r0
     d12:	b1 1d       	adc	r27, r1
     d14:	11 24       	eor	r1, r1
     d16:	ad 54       	subi	r26, 0x4D	; 77
     d18:	be 4f       	sbci	r27, 0xFE	; 254
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	94 91       	lpm	r25, Z
     d1e:	9d 93       	st	X+, r25
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	31 96       	adiw	r30, 0x01	; 1
     d24:	86 30       	cpi	r24, 0x06	; 6
     d26:	d1 f7       	brne	.-12     	; 0xd1c <LCD_PutChar+0x5c>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	00 90 a0 01 	lds	r0, 0x01A0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <LCD_PutChar+0x76>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <LCD_PutChar+0x72>
     d3a:	90 91 a2 01 	lds	r25, 0x01A2
     d3e:	89 2b       	or	r24, r25
     d40:	80 93 a2 01 	sts	0x01A2, r24
     d44:	80 91 a1 01 	lds	r24, 0x01A1
     d48:	84 31       	cpi	r24, 0x14	; 20
     d4a:	18 f4       	brcc	.+6      	; 0xd52 <LCD_PutChar+0x92>
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	80 93 a1 01 	sts	0x01A1, r24
     d52:	08 95       	ret

00000d54 <LCD_PutString_P>:
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	fc 01       	movw	r30, r24
     d5a:	84 91       	lpm	r24, Z
     d5c:	ef 01       	movw	r28, r30
     d5e:	21 96       	adiw	r28, 0x01	; 1
     d60:	88 23       	and	r24, r24
     d62:	39 f0       	breq	.+14     	; 0xd72 <LCD_PutString_P+0x1e>
     d64:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LCD_PutChar>
     d68:	fe 01       	movw	r30, r28
     d6a:	84 91       	lpm	r24, Z
     d6c:	21 96       	adiw	r28, 0x01	; 1
     d6e:	81 11       	cpse	r24, r1
     d70:	f9 cf       	rjmp	.-14     	; 0xd64 <LCD_PutString_P+0x10>
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <LCD_GotoXY>:
     d78:	80 93 a1 01 	sts	0x01A1, r24
     d7c:	60 93 a0 01 	sts	0x01A0, r22
     d80:	08 95       	ret

00000d82 <Backlight_Off>:
}

void
Backlight_Off (void)
{
  TWI_Start();
     d82:	0e 94 49 07 	call	0xe92	; 0xe92 <TWI_Start>
  TWI_Address_RW(0xc4);
     d86:	84 ec       	ldi	r24, 0xC4	; 196
     d88:	0e 94 64 07 	call	0xec8	; 0xec8 <TWI_Address_RW>
  TWI_Write(0x11);
     d8c:	81 e1       	ldi	r24, 0x11	; 17
     d8e:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_Write>
  TWI_Write(0x00);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_Write>
  TWI_Write(0x00);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_Write>
  TWI_Write(0x00);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_Write>
  TWI_Write(0x00);
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_Write>
  TWI_Write(0x00);
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_Write>
  TWI_Stop();
     db0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <TWI_Stop>
     db4:	08 95       	ret

00000db6 <LCD_Init>:
  SPI_MasterTransfer(data);
}

void
LCD_Init (void)
{
     db6:	cf 93       	push	r28
  SPI_MasterInit();
     db8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <SPI_MasterInit>

  /* Set Register Select and Chip Select as Output */
  DDRC |= (1<<PC7)|(1<<PC6);
     dbc:	87 b1       	in	r24, 0x07	; 7
     dbe:	80 6c       	ori	r24, 0xC0	; 192
     dc0:	87 b9       	out	0x07, r24	; 7
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
     dc2:	cf b7       	in	r28, 0x3f	; 63
  cli();
     dc4:	f8 94       	cli
  
  /* Starting Init Command Sequence */
  LCD_Command_Mode;
     dc6:	47 98       	cbi	0x08, 7	; 8
  LCD_Chip_Select;
     dc8:	46 98       	cbi	0x08, 6	; 8
uint8_t lcd_texty = 0;

void
LCD_Send (uint8_t data)
{
  SPI_MasterTransfer(data);
     dca:	82 ee       	ldi	r24, 0xE2	; 226
     dcc:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     dd0:	83 ea       	ldi	r24, 0xA3	; 163
     dd2:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     dd6:	81 e8       	ldi	r24, 0x81	; 129
     dd8:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     ddc:	88 e0       	ldi	r24, 0x08	; 8
     dde:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     de2:	80 ea       	ldi	r24, 0xA0	; 160
     de4:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     de8:	88 ec       	ldi	r24, 0xC8	; 200
     dea:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     dee:	85 e2       	ldi	r24, 0x25	; 37
     df0:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     df4:	8f e2       	ldi	r24, 0x2F	; 47
     df6:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
     dfa:	8f ea       	ldi	r24, 0xAF	; 175
     dfc:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_MasterTransfer>
  LCD_Send(LCD_COMMON_OUTPUT_MODE_REVERSE);
  LCD_Send(LCD_V5_VOLTAGE_REGULATOR | 0x05);
  LCD_Send(LCD_POWER_CONTROLLER_SET | 0x07);
  LCD_Send(LCD_DISPLAY_ON);
  
  LCD_Chip_Unselect;
     e00:	46 9a       	sbi	0x08, 6	; 8
  LCD_Data_Mode;
     e02:	47 9a       	sbi	0x08, 7	; 8
  
  LCD_Clear();
     e04:	0e 94 49 06 	call	0xc92	; 0xc92 <LCD_Clear>
  
  /* Restore Status Register */
  SREG = sreg;
     e08:	cf bf       	out	0x3f, r28	; 63
  
  // Initialize TWI for Backlight Control
  TWI_Init();
     e0a:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_Init>
  Backlight_Off();
     e0e:	0e 94 c1 06 	call	0xd82	; 0xd82 <Backlight_Off>
  
  // Initialize Dataflash
  dataflash_init();
     e12:	0e 94 f5 05 	call	0xbea	; 0xbea <dataflash_init>
}
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <Backlight_LED>:
  TWI_Stop();
}

void
Backlight_LED (uint8_t led_selector)
{
     e1a:	cf 93       	push	r28
     e1c:	c8 2f       	mov	r28, r24
  TWI_Start();
     e1e:	0e 94 49 07 	call	0xe92	; 0xe92 <TWI_Start>
  TWI_Address_RW(0xc4);
     e22:	84 ec       	ldi	r24, 0xC4	; 196
     e24:	0e 94 64 07 	call	0xec8	; 0xec8 <TWI_Address_RW>
  TWI_Write(0x15);
     e28:	85 e1       	ldi	r24, 0x15	; 21
     e2a:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_Write>
  TWI_Write(led_selector);
     e2e:	8c 2f       	mov	r24, r28
     e30:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_Write>
  TWI_Stop();
     e34:	0e 94 9e 07 	call	0xf3c	; 0xf3c <TWI_Stop>
}
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <SPI_MasterInit>:

void
SPI_MasterInit (void)
{
  /* Check if already initialized */
  if (!(SPI_flag & 1))
     e3c:	80 91 a3 01 	lds	r24, 0x01A3
     e40:	80 fd       	sbrc	r24, 0
     e42:	0d c0       	rjmp	.+26     	; 0xe5e <SPI_MasterInit+0x22>
    {
      /* Set MOSI and SCK output */
      DDRB |= (1<<PB5)|(1<<PB7);
     e44:	84 b1       	in	r24, 0x04	; 4
     e46:	80 6a       	ori	r24, 0xA0	; 160
     e48:	84 b9       	out	0x04, r24	; 4
      
      /* Enable SPI, Master */
      SPCR = (1<<SPE)|(1<<MSTR);
     e4a:	80 e5       	ldi	r24, 0x50	; 80
     e4c:	8c bd       	out	0x2c, r24	; 44
      
      /* Set Double SPI Speed Bit, SPI clock will be fck/2 */
      SPSR = (1<<SPI2X);
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	8d bd       	out	0x2d, r24	; 45
      
      /* Set SPI Init Flag */
      SPI_flag = 1;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	90 93 a4 01 	sts	0x01A4, r25
     e5a:	80 93 a3 01 	sts	0x01A3, r24
     e5e:	08 95       	ret

00000e60 <SPI_MasterTransfer>:

void
SPI_MasterTransfer (unsigned char c)
{
  /* Start transmission */
  SPDR = c;
     e60:	8e bd       	out	0x2e, r24	; 46
  
  /* Wait for transmission complete */
  while (!(SPSR & (1<<SPIF)));
     e62:	0d b4       	in	r0, 0x2d	; 45
     e64:	07 fe       	sbrs	r0, 7
     e66:	fd cf       	rjmp	.-6      	; 0xe62 <SPI_MasterTransfer+0x2>
}
     e68:	08 95       	ret

00000e6a <TWI_Init>:

void
TWI_Init (void)
{
  // Port Setup
  DDRC &= ~((1 << PC0)|(1 << PC1));
     e6a:	87 b1       	in	r24, 0x07	; 7
     e6c:	8c 7f       	andi	r24, 0xFC	; 252
     e6e:	87 b9       	out	0x07, r24	; 7
  PORTC |= (1 << PC0)|(1 << PC1);
     e70:	88 b1       	in	r24, 0x08	; 8
     e72:	83 60       	ori	r24, 0x03	; 3
     e74:	88 b9       	out	0x08, r24	; 8
  
  // Setup TWI Speed to 400kHZ (TWPS = 1)
  TWBR = 3;
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	80 93 b8 00 	sts	0x00B8, r24
  
  // Using TIMER2 to detect timeout
  TCCR2B = (7 << CS20);
     e7c:	87 e0       	ldi	r24, 0x07	; 7
     e7e:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = (1 << OCIE2A);
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	80 93 70 00 	sts	0x0070, r24
  
  OCR2A = 125;
     e88:	8d e7       	ldi	r24, 0x7D	; 125
     e8a:	80 93 b3 00 	sts	0x00B3, r24
  
  // Interrupts REQUIRED!
  sei();
     e8e:	78 94       	sei
     e90:	08 95       	ret

00000e92 <TWI_Start>:
}

int16_t
TWI_Start (void)
{
  twi_timeout = 10;
     e92:	8a e0       	ldi	r24, 0x0A	; 10
     e94:	80 93 a5 01 	sts	0x01A5, r24
  
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
     e98:	84 ea       	ldi	r24, 0xA4	; 164
     e9a:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     e9e:	ec eb       	ldi	r30, 0xBC	; 188
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 91 a5 01 	lds	r24, 0x01A5
     ea6:	88 23       	and	r24, r24
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <TWI_Start+0x1e>
     eaa:	80 81       	ld	r24, Z
     eac:	88 23       	and	r24, r24
     eae:	cc f7       	brge	.-14     	; 0xea2 <TWI_Start+0x10>
  
  if (twi_timeout)
     eb0:	80 91 a5 01 	lds	r24, 0x01A5
     eb4:	88 23       	and	r24, r24
     eb6:	29 f0       	breq	.+10     	; 0xec2 <TWI_Start+0x30>
    return (int16_t) (TWSR & 0xf8);
     eb8:	80 91 b9 00 	lds	r24, 0x00B9
     ebc:	88 7f       	andi	r24, 0xF8	; 248
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	08 95       	ret
  else
    return -1;
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	9f ef       	ldi	r25, 0xFF	; 255
}
     ec6:	08 95       	ret

00000ec8 <TWI_Address_RW>:

int16_t
TWI_Address_RW (uint8_t address)
{
  twi_timeout = 10;
     ec8:	9a e0       	ldi	r25, 0x0A	; 10
     eca:	90 93 a5 01 	sts	0x01A5, r25
  
  TWDR = address;
     ece:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
     ed2:	84 e8       	ldi	r24, 0x84	; 132
     ed4:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     ed8:	ec eb       	ldi	r30, 0xBC	; 188
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 91 a5 01 	lds	r24, 0x01A5
     ee0:	88 23       	and	r24, r24
     ee2:	19 f0       	breq	.+6      	; 0xeea <TWI_Address_RW+0x22>
     ee4:	80 81       	ld	r24, Z
     ee6:	88 23       	and	r24, r24
     ee8:	cc f7       	brge	.-14     	; 0xedc <TWI_Address_RW+0x14>
  
  if (twi_timeout)
     eea:	80 91 a5 01 	lds	r24, 0x01A5
     eee:	88 23       	and	r24, r24
     ef0:	29 f0       	breq	.+10     	; 0xefc <TWI_Address_RW+0x34>
    return (int16_t) (TWSR & 0xf8);
     ef2:	80 91 b9 00 	lds	r24, 0x00B9
     ef6:	88 7f       	andi	r24, 0xF8	; 248
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	08 95       	ret
  else
    return -1;
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	9f ef       	ldi	r25, 0xFF	; 255
}
     f00:	08 95       	ret

00000f02 <TWI_Write>:

int16_t
TWI_Write (uint8_t data)
{
  twi_timeout = 10;
     f02:	9a e0       	ldi	r25, 0x0A	; 10
     f04:	90 93 a5 01 	sts	0x01A5, r25
  
  TWDR = data;
     f08:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
     f0c:	84 e8       	ldi	r24, 0x84	; 132
     f0e:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     f12:	ec eb       	ldi	r30, 0xBC	; 188
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 91 a5 01 	lds	r24, 0x01A5
     f1a:	88 23       	and	r24, r24
     f1c:	19 f0       	breq	.+6      	; 0xf24 <TWI_Write+0x22>
     f1e:	80 81       	ld	r24, Z
     f20:	88 23       	and	r24, r24
     f22:	cc f7       	brge	.-14     	; 0xf16 <TWI_Write+0x14>
  
  if (twi_timeout)
     f24:	80 91 a5 01 	lds	r24, 0x01A5
     f28:	88 23       	and	r24, r24
     f2a:	29 f0       	breq	.+10     	; 0xf36 <TWI_Write+0x34>
    return (int16_t) (TWSR & 0xf8);
     f2c:	80 91 b9 00 	lds	r24, 0x00B9
     f30:	88 7f       	andi	r24, 0xF8	; 248
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	08 95       	ret
  else
    return -1;
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f ef       	ldi	r25, 0xFF	; 255
}
     f3a:	08 95       	ret

00000f3c <TWI_Stop>:

void
TWI_Stop (void)
{
  twi_timeout = 10;
     f3c:	8a e0       	ldi	r24, 0x0A	; 10
     f3e:	80 93 a5 01 	sts	0x01A5, r24
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
     f42:	84 e9       	ldi	r24, 0x94	; 148
     f44:	80 93 bc 00 	sts	0x00BC, r24
     f48:	08 95       	ret

00000f4a <__vector_9>:
}

// ISR will be called every 8ms to decrease twi_timeout if > 0
ISR (TIMER2_COMPA_vect)
{
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	0b b6       	in	r0, 0x3b	; 59
     f56:	0f 92       	push	r0
     f58:	8f 93       	push	r24
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
  OCR2A += 125;
     f5e:	e3 eb       	ldi	r30, 0xB3	; 179
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	83 58       	subi	r24, 0x83	; 131
     f66:	80 83       	st	Z, r24

  if (twi_timeout)
     f68:	80 91 a5 01 	lds	r24, 0x01A5
     f6c:	88 23       	and	r24, r24
     f6e:	29 f0       	breq	.+10     	; 0xf7a <__vector_9+0x30>
    twi_timeout--;
     f70:	80 91 a5 01 	lds	r24, 0x01A5
     f74:	81 50       	subi	r24, 0x01	; 1
     f76:	80 93 a5 01 	sts	0x01A5, r24
}
     f7a:	ff 91       	pop	r31
     f7c:	ef 91       	pop	r30
     f7e:	8f 91       	pop	r24
     f80:	0f 90       	pop	r0
     f82:	0b be       	out	0x3b, r0	; 59
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_20>:
volatile uint8_t data_frame_in[DATA_FRAME_LENGTH];
const uint8_t device_address = 3;
volatile uint8_t data_ok = 0;

ISR(USART0_RX_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	0b b6       	in	r0, 0x3b	; 59
     f9a:	0f 92       	push	r0
     f9c:	2f 93       	push	r18
     f9e:	8f 93       	push	r24
     fa0:	9f 93       	push	r25
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
	char udr_buffer = UDR0;
     fa6:	90 91 c6 00 	lds	r25, 0x00C6
	static uint8_t uart_rx_cnt = 0;
	static uint8_t address = 0;
	static uint8_t checksum = 0;
	static uint8_t checksum_in = 0;

	if(udr_buffer != 13) //CR
     faa:	9d 30       	cpi	r25, 0x0D	; 13
     fac:	19 f1       	breq	.+70     	; 0xff4 <__vector_20+0x66>
	{
		if(uart_rx_cnt == 1)
     fae:	80 91 b1 01 	lds	r24, 0x01B1
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	19 f4       	brne	.+6      	; 0xfbc <__vector_20+0x2e>
		{
			address = udr_buffer;
     fb6:	90 93 b0 01 	sts	0x01B0, r25
     fba:	18 c0       	rjmp	.+48     	; 0xfec <__vector_20+0x5e>
		}
		else if(uart_rx_cnt >= 2 && uart_rx_cnt < DATA_FRAME_LENGTH + NUMBER_OF_START_BYTES && address == device_address)
     fbc:	2e ef       	ldi	r18, 0xFE	; 254
     fbe:	28 0f       	add	r18, r24
     fc0:	20 3a       	cpi	r18, 0xA0	; 160
     fc2:	80 f4       	brcc	.+32     	; 0xfe4 <__vector_20+0x56>
     fc4:	20 91 b0 01 	lds	r18, 0x01B0
     fc8:	23 30       	cpi	r18, 0x03	; 3
     fca:	61 f4       	brne	.+24     	; 0xfe4 <__vector_20+0x56>
		{
			data_frame_in[uart_rx_cnt-NUMBER_OF_START_BYTES] = udr_buffer;
     fcc:	e8 2f       	mov	r30, r24
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	ef 54       	subi	r30, 0x4F	; 79
     fd2:	fa 4f       	sbci	r31, 0xFA	; 250
     fd4:	90 83       	st	Z, r25
			checksum ^= data_frame_in[uart_rx_cnt-NUMBER_OF_START_BYTES];
     fd6:	90 81       	ld	r25, Z
     fd8:	20 91 af 01 	lds	r18, 0x01AF
     fdc:	92 27       	eor	r25, r18
     fde:	90 93 af 01 	sts	0x01AF, r25
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__vector_20+0x5e>
		}
		else if(uart_rx_cnt == DATA_FRAME_LENGTH + NUMBER_OF_START_BYTES)
     fe4:	82 3a       	cpi	r24, 0xA2	; 162
     fe6:	11 f4       	brne	.+4      	; 0xfec <__vector_20+0x5e>
		{
			checksum_in = udr_buffer;
     fe8:	90 93 ae 01 	sts	0x01AE, r25
		}
		uart_rx_cnt++;
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	80 93 b1 01 	sts	0x01B1, r24
     ff2:	12 c0       	rjmp	.+36     	; 0x1018 <__vector_20+0x8a>
	}
	else //CR received
	{
		if(checksum == checksum_in)
     ff4:	90 91 af 01 	lds	r25, 0x01AF
     ff8:	80 91 ae 01 	lds	r24, 0x01AE
     ffc:	98 13       	cpse	r25, r24
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <__vector_20+0x78>
		{
			data_ok = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 b2 01 	sts	0x01B2, r24
		}
		uart_rx_cnt = 0;
    1006:	10 92 b1 01 	sts	0x01B1, r1
		address = 0;
    100a:	10 92 b0 01 	sts	0x01B0, r1
		checksum_in = 0xBB;
    100e:	8b eb       	ldi	r24, 0xBB	; 187
    1010:	80 93 ae 01 	sts	0x01AE, r24
		checksum = 0;
    1014:	10 92 af 01 	sts	0x01AF, r1
	}
}
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0b be       	out	0x3b, r0	; 59
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <__vector_22>:


ISR(USART0_TX_vect)
{
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	0b b6       	in	r0, 0x3b	; 59
    103c:	0f 92       	push	r0
    103e:	2f 93       	push	r18
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
	static uint8_t checksum = 0;
	static uint8_t byte_cnt = 0;
	if(byte_cnt < DATA_FRAME_LENGTH)
    1048:	e0 91 ad 01 	lds	r30, 0x01AD
    104c:	e0 3a       	cpi	r30, 0xA0	; 160
    104e:	b0 f4       	brcc	.+44     	; 0x107c <__vector_22+0x4c>
	{
		UDR0 = (data_frame_out[byte_cnt]);
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	e0 50       	subi	r30, 0x00	; 0
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	80 81       	ld	r24, Z
    1058:	80 93 c6 00 	sts	0x00C6, r24
		checksum ^= data_frame_out[byte_cnt];
    105c:	80 91 ad 01 	lds	r24, 0x01AD
    1060:	e8 2f       	mov	r30, r24
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	e0 50       	subi	r30, 0x00	; 0
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	90 81       	ld	r25, Z
    106a:	20 91 ac 01 	lds	r18, 0x01AC
    106e:	92 27       	eor	r25, r18
    1070:	90 93 ac 01 	sts	0x01AC, r25
		byte_cnt++;
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	80 93 ad 01 	sts	0x01AD, r24
    107a:	1d c0       	rjmp	.+58     	; 0x10b6 <__vector_22+0x86>
	}
	else if(byte_cnt == DATA_FRAME_LENGTH)
    107c:	e0 3a       	cpi	r30, 0xA0	; 160
    107e:	51 f4       	brne	.+20     	; 0x1094 <__vector_22+0x64>
	{
		UDR0 = checksum;
    1080:	80 91 ac 01 	lds	r24, 0x01AC
    1084:	80 93 c6 00 	sts	0x00C6, r24
		byte_cnt++;
    1088:	80 91 ad 01 	lds	r24, 0x01AD
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	80 93 ad 01 	sts	0x01AD, r24
    1092:	11 c0       	rjmp	.+34     	; 0x10b6 <__vector_22+0x86>
	}
	else if(byte_cnt == DATA_FRAME_LENGTH + 1)
    1094:	e1 3a       	cpi	r30, 0xA1	; 161
    1096:	49 f4       	brne	.+18     	; 0x10aa <__vector_22+0x7a>
	{
		UDR0 = 13;
    1098:	8d e0       	ldi	r24, 0x0D	; 13
    109a:	80 93 c6 00 	sts	0x00C6, r24
		byte_cnt++;
    109e:	80 91 ad 01 	lds	r24, 0x01AD
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	80 93 ad 01 	sts	0x01AD, r24
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <__vector_22+0x86>
	}
	else
	{
		checksum = 0;
    10aa:	10 92 ac 01 	sts	0x01AC, r1
		byte_cnt = 0;
    10ae:	10 92 ad 01 	sts	0x01AD, r1
		data_ok = 0;
    10b2:	10 92 b2 01 	sts	0x01B2, r1
	}
}
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	9f 91       	pop	r25
    10bc:	8f 91       	pop	r24
    10be:	2f 91       	pop	r18
    10c0:	0f 90       	pop	r0
    10c2:	0b be       	out	0x3b, r0	; 59
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <__vector_28>:

ISR(USART1_RX_vect)
{
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	0b b6       	in	r0, 0x3b	; 59
    10da:	0f 92       	push	r0
    10dc:	2f 93       	push	r18
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
char udr_buffer = UDR1;
    10e6:	90 91 ce 00 	lds	r25, 0x00CE
static uint8_t uart_rx_cnt = 0;
static uint8_t address = 0;
static uint8_t checksum = 0;
static uint8_t checksum_in = 0;
if(udr_buffer != 13) //CR
    10ea:	9d 30       	cpi	r25, 0x0D	; 13
    10ec:	19 f1       	breq	.+70     	; 0x1134 <__vector_28+0x66>
{
	if(uart_rx_cnt == 1)
    10ee:	80 91 ab 01 	lds	r24, 0x01AB
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	19 f4       	brne	.+6      	; 0x10fc <__vector_28+0x2e>
	{
		address = udr_buffer;
    10f6:	90 93 aa 01 	sts	0x01AA, r25
    10fa:	18 c0       	rjmp	.+48     	; 0x112c <__vector_28+0x5e>
	}
	else if(uart_rx_cnt >= 2 && uart_rx_cnt < DATA_FRAME_LENGTH + NUMBER_OF_START_BYTES && address == device_address)
    10fc:	2e ef       	ldi	r18, 0xFE	; 254
    10fe:	28 0f       	add	r18, r24
    1100:	20 3a       	cpi	r18, 0xA0	; 160
    1102:	80 f4       	brcc	.+32     	; 0x1124 <__vector_28+0x56>
    1104:	20 91 aa 01 	lds	r18, 0x01AA
    1108:	23 30       	cpi	r18, 0x03	; 3
    110a:	61 f4       	brne	.+24     	; 0x1124 <__vector_28+0x56>
	{
		data_frame_in[uart_rx_cnt-NUMBER_OF_START_BYTES] = udr_buffer;
    110c:	e8 2f       	mov	r30, r24
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	ef 54       	subi	r30, 0x4F	; 79
    1112:	fa 4f       	sbci	r31, 0xFA	; 250
    1114:	90 83       	st	Z, r25
		checksum ^= data_frame_in[uart_rx_cnt-NUMBER_OF_START_BYTES];
    1116:	90 81       	ld	r25, Z
    1118:	20 91 a9 01 	lds	r18, 0x01A9
    111c:	92 27       	eor	r25, r18
    111e:	90 93 a9 01 	sts	0x01A9, r25
    1122:	04 c0       	rjmp	.+8      	; 0x112c <__vector_28+0x5e>
	}
	else if(uart_rx_cnt == DATA_FRAME_LENGTH + NUMBER_OF_START_BYTES)
    1124:	82 3a       	cpi	r24, 0xA2	; 162
    1126:	11 f4       	brne	.+4      	; 0x112c <__vector_28+0x5e>
	{
		checksum_in = udr_buffer;
    1128:	90 93 a8 01 	sts	0x01A8, r25
	}
	uart_rx_cnt++;
    112c:	8f 5f       	subi	r24, 0xFF	; 255
    112e:	80 93 ab 01 	sts	0x01AB, r24
    1132:	12 c0       	rjmp	.+36     	; 0x1158 <__vector_28+0x8a>
}
else //CR received
{
	if(checksum == checksum_in)
    1134:	90 91 a9 01 	lds	r25, 0x01A9
    1138:	80 91 a8 01 	lds	r24, 0x01A8
    113c:	98 13       	cpse	r25, r24
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <__vector_28+0x78>
	{
		data_ok = 1;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 b2 01 	sts	0x01B2, r24
	}
	uart_rx_cnt = 0;
    1146:	10 92 ab 01 	sts	0x01AB, r1
	address = 0;
    114a:	10 92 aa 01 	sts	0x01AA, r1
	checksum_in = 0xBB;
    114e:	8b eb       	ldi	r24, 0xBB	; 187
    1150:	80 93 a8 01 	sts	0x01A8, r24
	checksum = 0;
    1154:	10 92 a9 01 	sts	0x01A9, r1
}
}
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0b be       	out	0x3b, r0	; 59
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <__vector_30>:


ISR(USART1_TX_vect)
{
    1170:	1f 92       	push	r1
    1172:	0f 92       	push	r0
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	0b b6       	in	r0, 0x3b	; 59
    117c:	0f 92       	push	r0
    117e:	2f 93       	push	r18
    1180:	8f 93       	push	r24
    1182:	9f 93       	push	r25
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
	static uint8_t checksum = 0;
	static uint8_t byte_cnt = 0;
	if(byte_cnt < DATA_FRAME_LENGTH)
    1188:	e0 91 a7 01 	lds	r30, 0x01A7
    118c:	e0 3a       	cpi	r30, 0xA0	; 160
    118e:	b0 f4       	brcc	.+44     	; 0x11bc <__vector_30+0x4c>
	{
		UDR1 = (data_frame_out[byte_cnt]);
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	e0 50       	subi	r30, 0x00	; 0
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	80 81       	ld	r24, Z
    1198:	80 93 ce 00 	sts	0x00CE, r24
		checksum ^= data_frame_out[byte_cnt];
    119c:	80 91 a7 01 	lds	r24, 0x01A7
    11a0:	e8 2f       	mov	r30, r24
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	e0 50       	subi	r30, 0x00	; 0
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	90 81       	ld	r25, Z
    11aa:	20 91 a6 01 	lds	r18, 0x01A6
    11ae:	92 27       	eor	r25, r18
    11b0:	90 93 a6 01 	sts	0x01A6, r25
		byte_cnt++;
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	80 93 a7 01 	sts	0x01A7, r24
    11ba:	1d c0       	rjmp	.+58     	; 0x11f6 <__vector_30+0x86>
	}
	else if(byte_cnt == DATA_FRAME_LENGTH)
    11bc:	e0 3a       	cpi	r30, 0xA0	; 160
    11be:	51 f4       	brne	.+20     	; 0x11d4 <__vector_30+0x64>
	{
		UDR1 = checksum;
    11c0:	80 91 a6 01 	lds	r24, 0x01A6
    11c4:	80 93 ce 00 	sts	0x00CE, r24
		byte_cnt++;
    11c8:	80 91 a7 01 	lds	r24, 0x01A7
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	80 93 a7 01 	sts	0x01A7, r24
    11d2:	11 c0       	rjmp	.+34     	; 0x11f6 <__vector_30+0x86>
	}
	else if(byte_cnt == DATA_FRAME_LENGTH + 1)
    11d4:	e1 3a       	cpi	r30, 0xA1	; 161
    11d6:	49 f4       	brne	.+18     	; 0x11ea <__vector_30+0x7a>
	{
		UDR1 = 13;
    11d8:	8d e0       	ldi	r24, 0x0D	; 13
    11da:	80 93 ce 00 	sts	0x00CE, r24
		byte_cnt++;
    11de:	80 91 a7 01 	lds	r24, 0x01A7
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	80 93 a7 01 	sts	0x01A7, r24
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <__vector_30+0x86>
	}
	else
	{
		checksum = 0;
    11ea:	10 92 a6 01 	sts	0x01A6, r1
		byte_cnt = 0;
    11ee:	10 92 a7 01 	sts	0x01A7, r1
		data_ok = 0;
    11f2:	10 92 b2 01 	sts	0x01B2, r1
	}
}
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0b be       	out	0x3b, r0	; 59
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <uart_init0>:
	return 1;
}

void uart_init0 ()
{
	UCSR0A |= (0<<U2X0) | (0<<MPCM0);
    120e:	e0 ec       	ldi	r30, 0xC0	; 192
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 83       	st	Z, r24
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
    1216:	88 ed       	ldi	r24, 0xD8	; 216
    1218:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<< UCSZ01) | (1<< UCSZ00) | (0<< UCPOL0);
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = 0;
    1222:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_VALUE; //9600 = 103 16 MHz
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 c4 00 	sts	0x00C4, r24
    122c:	08 95       	ret

0000122e <_exit>:
    122e:	f8 94       	cli

00001230 <__stop_program>:
    1230:	ff cf       	rjmp	.-2      	; 0x1230 <__stop_program>
