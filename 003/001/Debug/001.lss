
001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000012b8  0000134c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000466  00800104  00800104  00001350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025a1  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b16  00000000  00000000  00003bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001445  00000000  00000000  000046cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  00005b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067f  00000000  00000000  000061ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a11  00000000  00000000  0000682b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	82 c3       	rjmp	.+1796   	; 0x706 <__ctors_end>
       2:	00 00       	nop
       4:	9d c3       	rjmp	.+1850   	; 0x740 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c3       	rjmp	.+1846   	; 0x740 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c3       	rjmp	.+1842   	; 0x740 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c3       	rjmp	.+1838   	; 0x740 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c3       	rjmp	.+1834   	; 0x740 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c3       	rjmp	.+1830   	; 0x740 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c3       	rjmp	.+1826   	; 0x740 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c3       	rjmp	.+1822   	; 0x740 <__bad_interrupt>
      22:	00 00       	nop
      24:	f1 c6       	rjmp	.+3554   	; 0xe08 <__vector_9>
      26:	00 00       	nop
      28:	8b c3       	rjmp	.+1814   	; 0x740 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c3       	rjmp	.+1810   	; 0x740 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c3       	rjmp	.+1806   	; 0x740 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c3       	rjmp	.+1802   	; 0x740 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c3       	rjmp	.+1798   	; 0x740 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c3       	rjmp	.+1794   	; 0x740 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c3       	rjmp	.+1790   	; 0x740 <__bad_interrupt>
      42:	00 00       	nop
      44:	7d c3       	rjmp	.+1786   	; 0x740 <__bad_interrupt>
      46:	00 00       	nop
      48:	7b c3       	rjmp	.+1782   	; 0x740 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c3       	rjmp	.+1778   	; 0x740 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c7       	rjmp	.+3634   	; 0xe84 <__vector_20>
      52:	00 00       	nop
      54:	42 c7       	rjmp	.+3716   	; 0xeda <__vector_21>
      56:	00 00       	nop
      58:	73 c3       	rjmp	.+1766   	; 0x740 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c3       	rjmp	.+1762   	; 0x740 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c3       	rjmp	.+1758   	; 0x740 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c3       	rjmp	.+1754   	; 0x740 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c3       	rjmp	.+1750   	; 0x740 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c3       	rjmp	.+1746   	; 0x740 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c3       	rjmp	.+1742   	; 0x740 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c3       	rjmp	.+1738   	; 0x740 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c3       	rjmp	.+1734   	; 0x740 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c3       	rjmp	.+1730   	; 0x740 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c3       	rjmp	.+1726   	; 0x740 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c3       	rjmp	.+1722   	; 0x740 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c3       	rjmp	.+1718   	; 0x740 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	20 20       	and	r2, r0
      8e:	20 20       	and	r2, r0
      90:	20 20       	and	r2, r0
      92:	4b 48       	sbci	r20, 0x8B	; 139
      94:	7a 00       	.word	0x007a	; ????

00000096 <__c.2089>:
      96:	54 68 65 20 46 72 65 71 75 65 6e 63 65 20 69 73     The Frequence is
      a6:	74 20 20 20 0d 0a 0a 00                             t   ....

000000ae <__c.2045>:
      ae:	57 61 6e 67 20 53 68 69 68 61 6e 67 0d 0a 00        Wang Shihang...

000000bd <__c.2043>:
      bd:	5a 68 61 6e 67 20 59 75 65 0d 0a 00                 Zhang Yue...

000000c9 <__c.2041>:
      c9:	4c 69 20 58 75 65 6a 69 6e 67 0d 0a 00              Li Xuejing...

000000d6 <__c.2039>:
      d6:	4d 65 6d 62 65 72 73 3a 0d 0a 00                    Members:...

000000e1 <__c.2037>:
      e1:	44 44 53 2d 53 69 67 6e 61 6c 67 65 6e 65 72 61     DDS-Signalgenera
      f1:	74 6f 72 0d 0a 00                                   tor...

000000f7 <__c.2035>:
      f7:	50 72 6f 6a 65 63 74 20 30 34 3a 0d 0a 00           Project 04:...

00000105 <font>:
     105:	00 00 00 00 00 00 00 3e 45 51 45 3e 00 3e 6b 6f     .......>EQE>.>ko
     115:	6b 3e 00 1c 3e 7c 3e 1c 00 18 3c 7e 3c 18 00 30     k>..>|>...<~<..0
     125:	36 7f 36 30 00 18 5c 7e 5c 18 00 00 00 00 00 00     6.60..\~\.......
	...
     145:	00 00 00 30 48 4a 36 0e 00 06 29 79 29 06 00 00     ...0HJ6...)y)...
     155:	00 00 00 00 00 60 7e 0a 35 3f 00 2a 1c 36 1c 2a     .....`~.5?.*.6.*
     165:	00 00 7f 3e 1c 08 00 08 1c 3e 7f 00 00 14 36 7f     ...>.....>....6.
     175:	36 14 00 00 5f 00 5f 00 00 06 09 7f 01 7f 00 22     6..._._........"
     185:	4d 55 59 22 00 60 60 60 60 00 00 14 b6 ff b6 14     MUY".````.......
     195:	00 04 06 7f 06 04 00 10 30 7f 30 10 00 08 08 3e     ........0.0....>
     1a5:	1c 08 00 08 1c 3e 08 08 00 78 40 40 40 40 00 08     .....>...x@@@@..
     1b5:	3e 08 3e 08 00 30 3c 3f 3c 30 00 03 0f 3f 0f 03     >.>..0<?<0...?..
	...
     1cd:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     1dd:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     1ed:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     1fd:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     20d:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     21d:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     22d:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     23d:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     24d:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     25d:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     26d:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     27d:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     28d:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     29d:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     2ad:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     2bd:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     2cd:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     2dd:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     2ed:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     2fd:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     30d:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     31d:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     32d:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     33d:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     34d:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     35d:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     36d:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     37d:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     38d:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     39d:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     3ad:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     3bd:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     3cd:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     3dd:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     3ed:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     3fd:	01 00 00 3c 26 23 26 3c 00 1e a1 e1 21 12 00 3d     ...<&#&<....!..=
     40d:	40 20 7d 00 00 38 54 54 55 09 00 20 55 55 55 78     @ }..8TTU.. UUUx
     41d:	00 20 55 54 55 78 00 20 55 55 54 78 00 20 57 55     . UTUx. UUTx. WU
     42d:	57 78 00 1c a2 e2 22 14 00 38 55 55 55 08 00 38     Wx...."..8UUU..8
     43d:	55 54 55 08 00 38 55 55 54 08 00 00 01 7c 41 00     UTU..8UUT....|A.
     44d:	00 00 01 7d 41 00 00 00 01 7c 40 00 00 70 29 24     ...}A....|@..p)$
     45d:	29 70 00 78 2f 25 2f 78 00 7c 54 54 55 45 00 34     )p.x/%/x.|TTUE.4
     46d:	54 7c 54 58 00 7e 09 7f 49 49 00 38 45 45 39 00     T|TX.~..II.8EE9.
     47d:	00 38 45 44 39 00 00 39 45 44 38 00 00 3c 41 21     .8ED9..9ED8..<A!
     48d:	7d 00 00 3d 41 20 7c 00 00 9c a1 60 3d 00 00 3d     }..=A |....`=..=
     49d:	42 42 3d 00 00 3c 41 40 3d 00 80 70 68 58 38 04     BB=..<A@=..phX8.
     4ad:	00 48 3e 49 49 62 00 7e 61 5d 43 3f 00 22 14 08     .H>IIb.~a]C?."..
     4bd:	14 22 00 40 88 7e 09 02 00 20 54 55 55 78 00 00     .".@.~... TUUx..
     4cd:	00 7d 41 00 00 38 44 45 39 00 00 3c 40 21 7d 00     .}A..8DE9..<@!}.
     4dd:	00 7a 09 0a 71 00 00 7a 11 22 79 00 00 08 55 55     .z..q..z."y...UU
     4ed:	55 5e 00 4e 51 51 4e 00 00 30 48 4d 40 20 3e 41     U^.NQQN..0HM@ >A
     4fd:	5d 4b 55 3e 04 04 04 04 04 1c 00 17 08 4c 6a 50     ]KU>.........LjP
     50d:	00 17 08 34 2a 78 00 00 30 7d 30 00 00 08 14 00     ...4*x..0}0.....
     51d:	08 14 00 14 08 00 14 08 44 11 44 11 44 11 aa 55     ........D.D.D..U
     52d:	aa 55 aa 55 bb ee bb ee bb ee 00 00 00 ff 00 00     .U.U............
     53d:	08 08 08 ff 00 00 00 70 28 25 29 70 00 70 29 25     .......p(%)p.p)%
     54d:	29 70 00 70 29 25 28 70 3e 41 5d 55 41 3e 0a fb     )p.p)%(p>A]UA>..
     55d:	00 ff 00 00 00 ff 00 ff 00 00 0a fa 02 fe 00 00     ................
     56d:	0a 0b 08 0f 00 00 00 18 24 66 24 00 00 29 2a 7c     ........$f$..)*|
     57d:	2a 29 08 08 08 f8 00 00 00 00 00 0f 08 08 08 08     *)..............
     58d:	08 0f 08 08 08 08 08 f8 08 08 00 00 00 ff 08 08     ................
     59d:	08 08 08 08 08 08 08 08 08 ff 08 08 00 20 56 55     ............. VU
     5ad:	56 79 00 70 2a 25 2a 71 00 0f 08 0b 0a 0a 00 fe     Vy.p*%*q........
     5bd:	02 fa 0a 0a 0a 0b 08 0b 0a 0a 0a fa 02 fa 0a 0a     ................
     5cd:	00 ff 00 fb 0a 0a 0a 0a 0a 0a 0a 0a 0a fb 00 fb     ................
     5dd:	0a 0a 00 5d 22 22 22 5d 00 22 55 59 30 00 00 08     ...]"""]."UY0...
     5ed:	7f 49 41 3e 00 7c 55 55 55 44 00 7c 55 54 55 44     .IA>.|UUUD.|UTUD
     5fd:	00 7c 55 55 54 44 00 00 00 07 00 00 00 00 44 7d     .|UUTD........D}
     60d:	45 00 00 00 45 7d 45 00 00 00 45 7c 45 00 08 08     E...E}E...E|E...
     61d:	08 0f 00 00 00 00 00 f8 08 08 ff ff ff ff ff ff     ................
     62d:	f0 f0 f0 f0 f0 f0 00 00 00 77 00 00 00 00 45 7d     .........w....E}
     63d:	44 00 0f 0f 0f 0f 0f 0f 00 3c 42 43 3d 00 00 fe     D........<BC=...
     64d:	4a 4a 34 00 00 3c 43 43 3d 00 00 3d 43 42 3c 00     JJ4..<CC=..=CB<.
     65d:	00 32 49 4a 31 00 00 3a 45 46 39 00 00 fc 20 20     .2IJ1..:EF9...  
     66d:	1c 00 00 fe aa 28 10 00 00 ff a5 24 18 00 00 3c     .....(.....$...<
     67d:	40 41 3d 00 00 3c 41 41 3d 00 00 3d 41 40 3c 00     @A=..<AA=..=A@<.
     68d:	00 9c a0 61 3d 00 00 04 08 71 09 04 00 00 02 02     ...a=....q......
     69d:	02 00 00 00 07 03 00 00 00 00 08 08 08 00 00 00     ................
     6ad:	24 2e 24 00 00 24 24 24 24 24 05 17 0a 34 2a 78     $.$..$$$$$...4*x
     6bd:	00 06 09 7f 01 7f 00 22 4d 55 59 22 00 08 08 2a     ......."MUY"...*
     6cd:	08 08 00 00 08 18 18 00 00 06 09 09 06 00 00 00     ................
     6dd:	08 00 08 00 00 00 08 00 00 00 00 02 0f 00 00 00     ................
     6ed:	00 09 0f 05 00 00 00 09 0d 0a 00 00 00 3c 3c 3c     .............<<<
     6fd:	3c 00 00 00 00 00 00 00 00                          <........

00000706 <__ctors_end>:
     706:	11 24       	eor	r1, r1
     708:	1f be       	out	0x3f, r1	; 63
     70a:	cf ef       	ldi	r28, 0xFF	; 255
     70c:	d0 e4       	ldi	r29, 0x40	; 64
     70e:	de bf       	out	0x3e, r29	; 62
     710:	cd bf       	out	0x3d, r28	; 61

00000712 <__do_copy_data>:
     712:	11 e0       	ldi	r17, 0x01	; 1
     714:	a0 e0       	ldi	r26, 0x00	; 0
     716:	b1 e0       	ldi	r27, 0x01	; 1
     718:	e8 eb       	ldi	r30, 0xB8	; 184
     71a:	f2 e1       	ldi	r31, 0x12	; 18
     71c:	00 e0       	ldi	r16, 0x00	; 0
     71e:	0b bf       	out	0x3b, r16	; 59
     720:	02 c0       	rjmp	.+4      	; 0x726 <__do_copy_data+0x14>
     722:	07 90       	elpm	r0, Z+
     724:	0d 92       	st	X+, r0
     726:	a4 30       	cpi	r26, 0x04	; 4
     728:	b1 07       	cpc	r27, r17
     72a:	d9 f7       	brne	.-10     	; 0x722 <__do_copy_data+0x10>

0000072c <__do_clear_bss>:
     72c:	25 e0       	ldi	r18, 0x05	; 5
     72e:	a4 e0       	ldi	r26, 0x04	; 4
     730:	b1 e0       	ldi	r27, 0x01	; 1
     732:	01 c0       	rjmp	.+2      	; 0x736 <.do_clear_bss_start>

00000734 <.do_clear_bss_loop>:
     734:	1d 92       	st	X+, r1

00000736 <.do_clear_bss_start>:
     736:	aa 36       	cpi	r26, 0x6A	; 106
     738:	b2 07       	cpc	r27, r18
     73a:	e1 f7       	brne	.-8      	; 0x734 <.do_clear_bss_loop>
     73c:	e9 d0       	rcall	.+466    	; 0x910 <main>
     73e:	ba c5       	rjmp	.+2932   	; 0x12b4 <_exit>

00000740 <__bad_interrupt>:
     740:	5f cc       	rjmp	.-1858   	; 0x0 <__vectors>

00000742 <start>:
	}
}

void start ()
{
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);
     742:	85 e1       	ldi	r24, 0x15	; 21
     744:	ce d2       	rcall	.+1436   	; 0xce2 <Backlight_LED>
	LCD_PutString_P(PSTR("Project 04:\r\n"));
     746:	87 ef       	ldi	r24, 0xF7	; 247
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	80 d2       	rcall	.+1280   	; 0xc4c <LCD_PutString_P>
	LCD_PutString_P(PSTR("DDS-Signalgenerator\r\n"));
     74c:	81 ee       	ldi	r24, 0xE1	; 225
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	7d d2       	rcall	.+1274   	; 0xc4c <LCD_PutString_P>
	LCD_PutString_P(PSTR("Members:\r\n"));
     752:	86 ed       	ldi	r24, 0xD6	; 214
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	7a d2       	rcall	.+1268   	; 0xc4c <LCD_PutString_P>
	LCD_PutString_P(PSTR("Li Xuejing\r\n"));
     758:	89 ec       	ldi	r24, 0xC9	; 201
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	77 d2       	rcall	.+1262   	; 0xc4c <LCD_PutString_P>
	LCD_PutString_P(PSTR("Zhang Yue\r\n"));
     75e:	8d eb       	ldi	r24, 0xBD	; 189
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	74 d2       	rcall	.+1256   	; 0xc4c <LCD_PutString_P>
	LCD_PutString_P(PSTR("Wang Shihang\r\n"));
     764:	8e ea       	ldi	r24, 0xAE	; 174
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	71 d2       	rcall	.+1250   	; 0xc4c <LCD_PutString_P>
	LCD_Update();
     76a:	b7 d1       	rcall	.+878    	; 0xada <LCD_Update>
	wait_joy_button();
     76c:	67 e0       	ldi	r22, 0x07	; 7
     76e:	84 e1       	ldi	r24, 0x14	; 20
     770:	7e d2       	rcall	.+1276   	; 0xc6e <LCD_GotoXY>
     772:	80 e1       	ldi	r24, 0x10	; 16
     774:	13 d2       	rcall	.+1062   	; 0xb9c <LCD_PutChar>
     776:	b1 d1       	rcall	.+866    	; 0xada <LCD_Update>
     778:	03 99       	sbic	0x00, 3	; 0
     77a:	fe cf       	rjmp	.-4      	; 0x778 <start+0x36>
     77c:	03 9b       	sbis	0x00, 3	; 0
     77e:	fe cf       	rjmp	.-4      	; 0x77c <start+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     780:	2f ef       	ldi	r18, 0xFF	; 255
     782:	89 ef       	ldi	r24, 0xF9	; 249
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	21 50       	subi	r18, 0x01	; 1
     788:	80 40       	sbci	r24, 0x00	; 0
     78a:	90 40       	sbci	r25, 0x00	; 0
     78c:	e1 f7       	brne	.-8      	; 0x786 <start+0x44>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <start+0x4e>
     790:	00 00       	nop
     792:	03 99       	sbic	0x00, 3	; 0
     794:	fe cf       	rjmp	.-4      	; 0x792 <start+0x50>
}
     796:	08 95       	ret

00000798 <AD9850_setup>:

void AD9850_setup()
{
	DDRD |= ((1<<DATA)|(1<<WCLK)|(1<<FQUP)|(1<<RESET));		//???AD9850?????????
     798:	8a b1       	in	r24, 0x0a	; 10
     79a:	8c 65       	ori	r24, 0x5C	; 92
     79c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<DATA)|(1<<WCLK)|(1<<FQUP)|(1<<RESET));	//????????????
     79e:	8b b1       	in	r24, 0x0b	; 11
     7a0:	83 7a       	andi	r24, 0xA3	; 163
     7a2:	8b b9       	out	0x0b, r24	; 11
     7a4:	08 95       	ret

000007a6 <AD9850_reset>:
}

void AD9850_reset()
{
	PORTD &= ~((1<<WCLK)|(1<<FQUP));
     7a6:	8b b1       	in	r24, 0x0b	; 11
     7a8:	87 7e       	andi	r24, 0xE7	; 231
     7aa:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<RESET);									//pulse RESET
     7ac:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ae:	8a e1       	ldi	r24, 0x1A	; 26
     7b0:	8a 95       	dec	r24
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <AD9850_reset+0xa>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <AD9850_reset+0x10>
	_delay_us(5);
	PORTD |= (1<<RESET);
     7b6:	5e 9a       	sbi	0x0b, 6	; 11
     7b8:	8a e1       	ldi	r24, 0x1A	; 26
     7ba:	8a 95       	dec	r24
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <AD9850_reset+0x14>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <AD9850_reset+0x1a>
	_delay_us(5);
	PORTD &= ~(1<<RESET);
     7c0:	5e 98       	cbi	0x0b, 6	; 11
     7c2:	8a e1       	ldi	r24, 0x1A	; 26
     7c4:	8a 95       	dec	r24
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <AD9850_reset+0x1e>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <AD9850_reset+0x24>
	_delay_us(5);
	
	PORTD &= ~(1<<WCLK);									//pulse WCLK
     7ca:	5b 98       	cbi	0x0b, 3	; 11
     7cc:	8a e1       	ldi	r24, 0x1A	; 26
     7ce:	8a 95       	dec	r24
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <AD9850_reset+0x28>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <AD9850_reset+0x2e>
	_delay_us(5);
	PORTD |= (1<<WCLK);
     7d4:	5b 9a       	sbi	0x0b, 3	; 11
     7d6:	8a e1       	ldi	r24, 0x1A	; 26
     7d8:	8a 95       	dec	r24
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <AD9850_reset+0x32>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <AD9850_reset+0x38>
	_delay_us(5);
	PORTD &= ~(1<<WCLK);
     7de:	5b 98       	cbi	0x0b, 3	; 11
     7e0:	8a e1       	ldi	r24, 0x1A	; 26
     7e2:	8a 95       	dec	r24
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <AD9850_reset+0x3c>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <AD9850_reset+0x42>
	_delay_us(5);
	
	PORTD &= ~(1<<DATA);									//make sure DATA pin is LOW
     7e8:	5a 98       	cbi	0x0b, 2	; 11
	
	PORTD &= ~(1<<FQUP);									//pulse FQUP
     7ea:	5c 98       	cbi	0x0b, 4	; 11
     7ec:	8a e1       	ldi	r24, 0x1A	; 26
     7ee:	8a 95       	dec	r24
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <AD9850_reset+0x48>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <AD9850_reset+0x4e>
	_delay_us(5);
	PORTD |= (1<<FQUP);
     7f4:	5c 9a       	sbi	0x0b, 4	; 11
     7f6:	8a e1       	ldi	r24, 0x1A	; 26
     7f8:	8a 95       	dec	r24
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <AD9850_reset+0x52>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <AD9850_reset+0x58>
	_delay_us(5);
	PORTD &= ~(1<<FQUP);
     7fe:	5c 98       	cbi	0x0b, 4	; 11
     800:	8a e1       	ldi	r24, 0x1A	; 26
     802:	8a 95       	dec	r24
     804:	f1 f7       	brne	.-4      	; 0x802 <AD9850_reset+0x5c>
     806:	00 c0       	rjmp	.+0      	; 0x808 <AD9850_reset+0x62>
     808:	08 95       	ret

0000080a <AD9850_Setfrequency>:
void AD9850_Setfrequency(double freq)
{
	int i;
	double x;
	x =  pow(2,32)/125;
	freq = freq/1000;
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	4a e7       	ldi	r20, 0x7A	; 122
     810:	54 e4       	ldi	r21, 0x44	; 68
     812:	98 d3       	rcall	.+1840   	; 0xf44 <__divsf3>
	uint32_t tuning_word = freq * x;
     814:	2f e6       	ldi	r18, 0x6F	; 111
     816:	32 e1       	ldi	r19, 0x12	; 18
     818:	43 e0       	ldi	r20, 0x03	; 3
     81a:	5c e4       	ldi	r21, 0x4C	; 76
     81c:	b5 d4       	rcall	.+2410   	; 0x1188 <__mulsf3>
     81e:	fa d3       	rcall	.+2036   	; 0x1014 <__fixunssfsi>
	PORTD &= ~(1<<FQUP);
     820:	5c 98       	cbi	0x0b, 4	; 11
	
	//write W0
	uint8_t W0 = tuning_word;
     822:	28 e0       	ldi	r18, 0x08	; 8
     824:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W0&0x01)
     826:	60 ff       	sbrs	r22, 0
     828:	02 c0       	rjmp	.+4      	; 0x82e <AD9850_Setfrequency+0x24>
		{
			PORTD |= (1<<DATA);
     82a:	5a 9a       	sbi	0x0b, 2	; 11
     82c:	01 c0       	rjmp	.+2      	; 0x830 <AD9850_Setfrequency+0x26>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     82e:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     830:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     832:	5b 98       	cbi	0x0b, 3	; 11
		W0 = W0>>1;
     834:	66 95       	lsr	r22
     836:	21 50       	subi	r18, 0x01	; 1
     838:	31 09       	sbc	r19, r1
	uint32_t tuning_word = freq * x;
	PORTD &= ~(1<<FQUP);
	
	//write W0
	uint8_t W0 = tuning_word;
	for(i=0; i<8; i++ )
     83a:	a9 f7       	brne	.-22     	; 0x826 <AD9850_Setfrequency+0x1c>
		PORTD &= ~(1<<WCLK);
		W0 = W0>>1;
	}
	
	//write W1
	uint8_t W1 = tuning_word>>8;
     83c:	28 e0       	ldi	r18, 0x08	; 8
     83e:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W1&0x01)
     840:	70 ff       	sbrs	r23, 0
     842:	02 c0       	rjmp	.+4      	; 0x848 <AD9850_Setfrequency+0x3e>
		{
			PORTD |= (1<<DATA);
     844:	5a 9a       	sbi	0x0b, 2	; 11
     846:	01 c0       	rjmp	.+2      	; 0x84a <AD9850_Setfrequency+0x40>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     848:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     84a:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     84c:	5b 98       	cbi	0x0b, 3	; 11
		W1 = W1>>1;
     84e:	76 95       	lsr	r23
     850:	21 50       	subi	r18, 0x01	; 1
     852:	31 09       	sbc	r19, r1
		W0 = W0>>1;
	}
	
	//write W1
	uint8_t W1 = tuning_word>>8;
	for(i=0; i<8; i++ )
     854:	a9 f7       	brne	.-22     	; 0x840 <AD9850_Setfrequency+0x36>
		PORTD &= ~(1<<WCLK);
		W1 = W1>>1;
	}
	
	//write W2
	uint8_t W2 = tuning_word>>16;
     856:	28 e0       	ldi	r18, 0x08	; 8
     858:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W2&0x01)
     85a:	80 ff       	sbrs	r24, 0
     85c:	02 c0       	rjmp	.+4      	; 0x862 <AD9850_Setfrequency+0x58>
		{
			PORTD |= (1<<DATA);
     85e:	5a 9a       	sbi	0x0b, 2	; 11
     860:	01 c0       	rjmp	.+2      	; 0x864 <AD9850_Setfrequency+0x5a>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     862:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     864:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     866:	5b 98       	cbi	0x0b, 3	; 11
		W2 = W2>>2;
     868:	86 95       	lsr	r24
     86a:	86 95       	lsr	r24
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	31 09       	sbc	r19, r1
		W1 = W1>>1;
	}
	
	//write W2
	uint8_t W2 = tuning_word>>16;
	for(i=0; i<8; i++ )
     870:	a1 f7       	brne	.-24     	; 0x85a <AD9850_Setfrequency+0x50>
		PORTD &= ~(1<<WCLK);
		W2 = W2>>2;
	}
	
	//write W3
	uint8_t W3 = tuning_word>>24;
     872:	28 e0       	ldi	r18, 0x08	; 8
     874:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W3&0x01)
     876:	90 ff       	sbrs	r25, 0
     878:	02 c0       	rjmp	.+4      	; 0x87e <AD9850_Setfrequency+0x74>
		{
			PORTD |= (1<<DATA);
     87a:	5a 9a       	sbi	0x0b, 2	; 11
     87c:	01 c0       	rjmp	.+2      	; 0x880 <AD9850_Setfrequency+0x76>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     87e:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     880:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     882:	5b 98       	cbi	0x0b, 3	; 11
		W3 = W3>>1;
     884:	96 95       	lsr	r25
     886:	21 50       	subi	r18, 0x01	; 1
     888:	31 09       	sbc	r19, r1
		W2 = W2>>2;
	}
	
	//write W3
	uint8_t W3 = tuning_word>>24;
	for(i=0; i<8; i++ )
     88a:	a9 f7       	brne	.-22     	; 0x876 <AD9850_Setfrequency+0x6c>
     88c:	88 e0       	ldi	r24, 0x08	; 8
     88e:	90 e0       	ldi	r25, 0x00	; 0
	
	//write W4
	uint8_t W4 = 0x00;
	for(i=0; i<8; i++ )
	{
		PORTD &= ~(1<<DATA);
     890:	5a 98       	cbi	0x0b, 2	; 11
		PORTD |= (1<<WCLK);
     892:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     894:	5b 98       	cbi	0x0b, 3	; 11
     896:	01 97       	sbiw	r24, 0x01	; 1
		W3 = W3>>1;
	}
	
	//write W4
	uint8_t W4 = 0x00;
	for(i=0; i<8; i++ )
     898:	d9 f7       	brne	.-10     	; 0x890 <AD9850_Setfrequency+0x86>
		PORTD |= (1<<WCLK);
		PORTD &= ~(1<<WCLK);
		W4 = W4>>1;
	}
	
	PORTD |= (1<<FQUP);
     89a:	5c 9a       	sbi	0x0b, 4	; 11
     89c:	8a e1       	ldi	r24, 0x1A	; 26
     89e:	8a 95       	dec	r24
     8a0:	f1 f7       	brne	.-4      	; 0x89e <AD9850_Setfrequency+0x94>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <AD9850_Setfrequency+0x9a>
	_delay_us(5);
	PORTD &= ~(1<<FQUP);
     8a4:	5c 98       	cbi	0x0b, 4	; 11
     8a6:	08 95       	ret

000008a8 <adc_display>:
}

void adc_display()
{
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	a0 97       	sbiw	r28, 0x20	; 32
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
	char getfrequency_buffer[32];
	LCD_Clear();
     8bc:	59 d1       	rcall	.+690    	; 0xb70 <LCD_Clear>
	Backlight_LED(BL_BLUE_ON);
     8be:	80 e1       	ldi	r24, 0x10	; 16
     8c0:	10 d2       	rcall	.+1056   	; 0xce2 <Backlight_LED>
	// initialize adc and lcd
	
	LCD_GotoXY(0,0);
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	d3 d1       	rcall	.+934    	; 0xc6e <LCD_GotoXY>
	// display the labels on LCD
	LCD_PutString_P(PSTR("The Frequence ist   \r\n\n"));
     8c8:	86 e9       	ldi	r24, 0x96	; 150
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	bf d1       	rcall	.+894    	; 0xc4c <LCD_PutString_P>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8ce:	4a e0       	ldi	r20, 0x0A	; 10
     8d0:	be 01       	movw	r22, r28
     8d2:	6f 5f       	subi	r22, 0xFF	; 255
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	80 91 00 01 	lds	r24, 0x0100
     8da:	90 91 01 01 	lds	r25, 0x0101
     8de:	b7 d4       	rcall	.+2414   	; 0x124e <__itoa_ncheck>
	itoa(AD_freq, getfrequency_buffer, 10);
	LCD_PutString(getfrequency_buffer);
     8e0:	ce 01       	movw	r24, r28
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	a5 d1       	rcall	.+842    	; 0xc30 <LCD_PutString>
	LCD_PutString_P(PSTR("      KHz"));
     8e6:	8c e8       	ldi	r24, 0x8C	; 140
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	b0 d1       	rcall	.+864    	; 0xc4c <LCD_PutString_P>
	LCD_PutChar(0x10);
     8ec:	80 e1       	ldi	r24, 0x10	; 16
     8ee:	56 d1       	rcall	.+684    	; 0xb9c <LCD_PutChar>
	LCD_Update();
     8f0:	f4 d0       	rcall	.+488    	; 0xada <LCD_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f2:	8f e3       	ldi	r24, 0x3F	; 63
     8f4:	9c e9       	ldi	r25, 0x9C	; 156
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <adc_display+0x4e>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <adc_display+0x54>
     8fc:	00 00       	nop
	_delay_ms(10);
}
     8fe:	a0 96       	adiw	r28, 0x20	; 32
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <main>:


int main(void)
{
	// set PA3-PA7 as input and activated internal Pull-Up
	DDRA &= ~((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     910:	81 b1       	in	r24, 0x01	; 1
     912:	87 70       	andi	r24, 0x07	; 7
     914:	81 b9       	out	0x01, r24	; 1
	PORTA |= ((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     916:	82 b1       	in	r24, 0x02	; 2
     918:	88 6f       	ori	r24, 0xF8	; 248
     91a:	82 b9       	out	0x02, r24	; 2
	
	// set PB0-PB3 as output
	DDRB = 0x0F;
     91c:	8f e0       	ldi	r24, 0x0F	; 15
     91e:	84 b9       	out	0x04, r24	; 4
	// set PB0-PB3 on high-level
	PORTB |= 0x0F;		// Required for DMM Board DMM Board 2013
     920:	85 b1       	in	r24, 0x05	; 5
     922:	8f 60       	ori	r24, 0x0F	; 15
     924:	85 b9       	out	0x05, r24	; 5
	
	LCD_Init();
     926:	b9 d1       	rcall	.+882    	; 0xc9a <LCD_Init>
    UART_Init();
     928:	91 d2       	rcall	.+1314   	; 0xe4c <UART_Init>
	start ();
     92a:	0b df       	rcall	.-490    	; 0x742 <start>
	
	AD9850_setup();
     92c:	35 df       	rcall	.-406    	; 0x798 <AD9850_setup>
	AD9850_reset();
     92e:	3b df       	rcall	.-394    	; 0x7a6 <AD9850_reset>
	for(;;)
	{
		if(~PINA&(1<<PINA7))
     930:	07 99       	sbic	0x00, 7	; 0
     932:	14 c0       	rjmp	.+40     	; 0x95c <main+0x4c>
			AD_freq +=1000;
     934:	80 91 00 01 	lds	r24, 0x0100
     938:	90 91 01 01 	lds	r25, 0x0101
     93c:	a0 91 02 01 	lds	r26, 0x0102
     940:	b0 91 03 01 	lds	r27, 0x0103
     944:	88 51       	subi	r24, 0x18	; 24
     946:	9c 4f       	sbci	r25, 0xFC	; 252
     948:	af 4f       	sbci	r26, 0xFF	; 255
     94a:	bf 4f       	sbci	r27, 0xFF	; 255
     94c:	80 93 00 01 	sts	0x0100, r24
     950:	90 93 01 01 	sts	0x0101, r25
     954:	a0 93 02 01 	sts	0x0102, r26
     958:	b0 93 03 01 	sts	0x0103, r27
     95c:	2f ef       	ldi	r18, 0xFF	; 255
     95e:	81 ee       	ldi	r24, 0xE1	; 225
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	21 50       	subi	r18, 0x01	; 1
     964:	80 40       	sbci	r24, 0x00	; 0
     966:	90 40       	sbci	r25, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <main+0x52>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <main+0x5c>
     96c:	00 00       	nop
			_delay_ms(100);
		
		if (~PINA&(1<<PINA6))
     96e:	06 99       	sbic	0x00, 6	; 0
     970:	14 c0       	rjmp	.+40     	; 0x99a <main+0x8a>
			AD_freq -=1000;
     972:	80 91 00 01 	lds	r24, 0x0100
     976:	90 91 01 01 	lds	r25, 0x0101
     97a:	a0 91 02 01 	lds	r26, 0x0102
     97e:	b0 91 03 01 	lds	r27, 0x0103
     982:	88 5e       	subi	r24, 0xE8	; 232
     984:	93 40       	sbci	r25, 0x03	; 3
     986:	a1 09       	sbc	r26, r1
     988:	b1 09       	sbc	r27, r1
     98a:	80 93 00 01 	sts	0x0100, r24
     98e:	90 93 01 01 	sts	0x0101, r25
     992:	a0 93 02 01 	sts	0x0102, r26
     996:	b0 93 03 01 	sts	0x0103, r27
     99a:	2f ef       	ldi	r18, 0xFF	; 255
     99c:	81 ee       	ldi	r24, 0xE1	; 225
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	21 50       	subi	r18, 0x01	; 1
     9a2:	80 40       	sbci	r24, 0x00	; 0
     9a4:	90 40       	sbci	r25, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <main+0x90>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <main+0x9a>
     9aa:	00 00       	nop
			_delay_ms(100);
		
		if (~PINA&(1<<PINA5))
     9ac:	05 99       	sbic	0x00, 5	; 0
     9ae:	14 c0       	rjmp	.+40     	; 0x9d8 <main+0xc8>
			AD_freq -=100;
     9b0:	80 91 00 01 	lds	r24, 0x0100
     9b4:	90 91 01 01 	lds	r25, 0x0101
     9b8:	a0 91 02 01 	lds	r26, 0x0102
     9bc:	b0 91 03 01 	lds	r27, 0x0103
     9c0:	84 56       	subi	r24, 0x64	; 100
     9c2:	91 09       	sbc	r25, r1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	80 93 00 01 	sts	0x0100, r24
     9cc:	90 93 01 01 	sts	0x0101, r25
     9d0:	a0 93 02 01 	sts	0x0102, r26
     9d4:	b0 93 03 01 	sts	0x0103, r27
     9d8:	2f ef       	ldi	r18, 0xFF	; 255
     9da:	89 ef       	ldi	r24, 0xF9	; 249
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	21 50       	subi	r18, 0x01	; 1
     9e0:	80 40       	sbci	r24, 0x00	; 0
     9e2:	90 40       	sbci	r25, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <main+0xce>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <main+0xd8>
     9e8:	00 00       	nop
			_delay_ms(20);
			
		if (~PINA&(1<<PINA4))
     9ea:	04 99       	sbic	0x00, 4	; 0
     9ec:	14 c0       	rjmp	.+40     	; 0xa16 <main+0x106>
			AD_freq +=100;
     9ee:	80 91 00 01 	lds	r24, 0x0100
     9f2:	90 91 01 01 	lds	r25, 0x0101
     9f6:	a0 91 02 01 	lds	r26, 0x0102
     9fa:	b0 91 03 01 	lds	r27, 0x0103
     9fe:	8c 59       	subi	r24, 0x9C	; 156
     a00:	9f 4f       	sbci	r25, 0xFF	; 255
     a02:	af 4f       	sbci	r26, 0xFF	; 255
     a04:	bf 4f       	sbci	r27, 0xFF	; 255
     a06:	80 93 00 01 	sts	0x0100, r24
     a0a:	90 93 01 01 	sts	0x0101, r25
     a0e:	a0 93 02 01 	sts	0x0102, r26
     a12:	b0 93 03 01 	sts	0x0103, r27
     a16:	2f ef       	ldi	r18, 0xFF	; 255
     a18:	81 ee       	ldi	r24, 0xE1	; 225
     a1a:	94 e0       	ldi	r25, 0x04	; 4
     a1c:	21 50       	subi	r18, 0x01	; 1
     a1e:	80 40       	sbci	r24, 0x00	; 0
     a20:	90 40       	sbci	r25, 0x00	; 0
     a22:	e1 f7       	brne	.-8      	; 0xa1c <main+0x10c>
     a24:	00 c0       	rjmp	.+0      	; 0xa26 <main+0x116>
     a26:	00 00       	nop
			_delay_ms(100);
		
		AD9850_Setfrequency(AD_freq);
     a28:	60 91 00 01 	lds	r22, 0x0100
     a2c:	70 91 01 01 	lds	r23, 0x0101
     a30:	80 91 02 01 	lds	r24, 0x0102
     a34:	90 91 03 01 	lds	r25, 0x0103
     a38:	19 d3       	rcall	.+1586   	; 0x106c <__floatunsisf>
     a3a:	e7 de       	rcall	.-562    	; 0x80a <AD9850_Setfrequency>
		adc_display();
     a3c:	35 df       	rcall	.-406    	; 0x8a8 <adc_display>
	}
     a3e:	78 cf       	rjmp	.-272    	; 0x930 <main+0x20>

00000a40 <dataflash_init>:
void
dataflash_init (void)
{
  // AT45DB081 doesn't actually need an intialization,
  // only the ChipSelect should be configured as an output.
  DDRB |= (1 << PB4);
     a40:	24 9a       	sbi	0x04, 4	; 4
  DATAFLASH_Chip_Unselect;
     a42:	2c 9a       	sbi	0x05, 4	; 5
  SPI_MasterInit();
     a44:	5a c1       	rjmp	.+692    	; 0xcfa <SPI_MasterInit>
     a46:	08 95       	ret

00000a48 <_fifo_get>:
uint8_t fifo_get_wait (fifo_t* f)
{
  while (!f->count);
  
  return _fifo_get(f);	
}
     a48:	fc 01       	movw	r30, r24
     a4a:	a2 81       	ldd	r26, Z+2	; 0x02
     a4c:	b3 81       	ldd	r27, Z+3	; 0x03
     a4e:	9d 01       	movw	r18, r26
     a50:	2f 5f       	subi	r18, 0xFF	; 255
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	8c 91       	ld	r24, X
     a56:	96 81       	ldd	r25, Z+6	; 0x06
     a58:	91 50       	subi	r25, 0x01	; 1
     a5a:	19 f4       	brne	.+6      	; 0xa62 <_fifo_get+0x1a>
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	29 1b       	sub	r18, r25
     a60:	31 09       	sbc	r19, r1
     a62:	33 83       	std	Z+3, r19	; 0x03
     a64:	22 83       	std	Z+2, r18	; 0x02
     a66:	96 83       	std	Z+6, r25	; 0x06
     a68:	2f b7       	in	r18, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	90 81       	ld	r25, Z
     a6e:	91 50       	subi	r25, 0x01	; 1
     a70:	90 83       	st	Z, r25
     a72:	2f bf       	out	0x3f, r18	; 63
     a74:	08 95       	ret

00000a76 <fifo_init>:
     a76:	fc 01       	movw	r30, r24
     a78:	10 82       	st	Z, r1
     a7a:	75 83       	std	Z+5, r23	; 0x05
     a7c:	64 83       	std	Z+4, r22	; 0x04
     a7e:	73 83       	std	Z+3, r23	; 0x03
     a80:	62 83       	std	Z+2, r22	; 0x02
     a82:	41 83       	std	Z+1, r20	; 0x01
     a84:	47 83       	std	Z+7, r20	; 0x07
     a86:	46 83       	std	Z+6, r20	; 0x06
     a88:	08 95       	ret

00000a8a <fifo_get_nowait>:

int16_t fifo_get_nowait (fifo_t* f)
{
  if (!f->count)
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 81       	ld	r18, Z
     a8e:	22 23       	and	r18, r18
     a90:	19 f0       	breq	.+6      	; 0xa98 <fifo_get_nowait+0xe>
    return -1;
    
  return (int)_fifo_get(f);	
     a92:	da df       	rcall	.-76     	; 0xa48 <_fifo_get>
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	08 95       	ret
}

int16_t fifo_get_nowait (fifo_t* f)
{
  if (!f->count)
    return -1;
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
    
  return (int)_fifo_get(f);	
}
     a9c:	08 95       	ret

00000a9e <fifo_put>:

uint8_t fifo_put (fifo_t* f, const uint8_t data)
{
     a9e:	fc 01       	movw	r30, r24
  if (f->count >= f->size)
     aa0:	90 81       	ld	r25, Z
     aa2:	81 81       	ldd	r24, Z+1	; 0x01
     aa4:	98 17       	cp	r25, r24
     aa6:	b8 f4       	brcc	.+46     	; 0xad6 <fifo_put+0x38>
    return 0;
    
  uint8_t* pwrite = f->pwrite;
     aa8:	a4 81       	ldd	r26, Z+4	; 0x04
     aaa:	b5 81       	ldd	r27, Z+5	; 0x05
  
  *(pwrite++) = data;
     aac:	9d 01       	movw	r18, r26
     aae:	2f 5f       	subi	r18, 0xFF	; 255
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	6c 93       	st	X, r22
  
  uint8_t write2end = f->write2end;
     ab4:	87 81       	ldd	r24, Z+7	; 0x07
  
  if (--write2end == 0)
     ab6:	81 50       	subi	r24, 0x01	; 1
     ab8:	19 f4       	brne	.+6      	; 0xac0 <fifo_put+0x22>
    {
      write2end = f->size;
     aba:	81 81       	ldd	r24, Z+1	; 0x01
      pwrite -= write2end;
     abc:	28 1b       	sub	r18, r24
     abe:	31 09       	sbc	r19, r1
    }
  
  f->write2end = write2end;
     ac0:	87 83       	std	Z+7, r24	; 0x07
  f->pwrite = pwrite;
     ac2:	35 83       	std	Z+5, r19	; 0x05
     ac4:	24 83       	std	Z+4, r18	; 0x04

  uint8_t sreg = SREG;
     ac6:	9f b7       	in	r25, 0x3f	; 63
  cli();
     ac8:	f8 94       	cli
  f->count++;
     aca:	80 81       	ld	r24, Z
     acc:	8f 5f       	subi	r24, 0xFF	; 255
     ace:	80 83       	st	Z, r24
  SREG = sreg;
     ad0:	9f bf       	out	0x3f, r25	; 63
  
  return 1;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	08 95       	ret
}

uint8_t fifo_put (fifo_t* f, const uint8_t data)
{
  if (f->count >= f->size)
    return 0;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
  cli();
  f->count++;
  SREG = sreg;
  
  return 1;
}
     ad8:	08 95       	ret

00000ada <LCD_Update>:
  unsigned char x;
  
  for (x = 0; x < 128; x++)
    lcd_framebuffer[line][x] = 0x00;
  
  lcd_frameupdate |= (1 << line);
     ada:	bf 92       	push	r11
     adc:	cf 92       	push	r12
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	bf b6       	in	r11, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	0a e0       	ldi	r16, 0x0A	; 10
     af2:	15 e0       	ldi	r17, 0x05	; 5
     af4:	0f 2e       	mov	r0, r31
     af6:	fa e0       	ldi	r31, 0x0A	; 10
     af8:	cf 2e       	mov	r12, r31
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	df 2e       	mov	r13, r31
     afe:	f0 2d       	mov	r31, r0
     b00:	0f 2e       	mov	r0, r31
     b02:	f7 e0       	ldi	r31, 0x07	; 7
     b04:	ef 2e       	mov	r14, r31
     b06:	f1 2c       	mov	r15, r1
     b08:	f0 2d       	mov	r31, r0
     b0a:	80 91 06 01 	lds	r24, 0x0106
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 2c       	mov	r0, r14
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <LCD_Update+0x3e>
     b14:	95 95       	asr	r25
     b16:	87 95       	ror	r24
     b18:	0a 94       	dec	r0
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <LCD_Update+0x3a>
     b1c:	80 ff       	sbrs	r24, 0
     b1e:	13 c0       	rjmp	.+38     	; 0xb46 <LCD_Update+0x6c>
     b20:	46 98       	cbi	0x08, 6	; 8
     b22:	47 98       	cbi	0x08, 7	; 8
     b24:	8e 2d       	mov	r24, r14
     b26:	80 6b       	ori	r24, 0xB0	; 176
     b28:	fa d0       	rcall	.+500    	; 0xd1e <SPI_MasterTransfer>
     b2a:	80 e1       	ldi	r24, 0x10	; 16
     b2c:	f8 d0       	rcall	.+496    	; 0xd1e <SPI_MasterTransfer>
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	f6 d0       	rcall	.+492    	; 0xd1e <SPI_MasterTransfer>
     b32:	47 9a       	sbi	0x08, 7	; 8
     b34:	e8 01       	movw	r28, r16
     b36:	c0 58       	subi	r28, 0x80	; 128
     b38:	d1 09       	sbc	r29, r1
     b3a:	89 91       	ld	r24, Y+
     b3c:	f0 d0       	rcall	.+480    	; 0xd1e <SPI_MasterTransfer>
     b3e:	c0 17       	cp	r28, r16
     b40:	d1 07       	cpc	r29, r17
     b42:	d9 f7       	brne	.-10     	; 0xb3a <LCD_Update+0x60>
     b44:	46 9a       	sbi	0x08, 6	; 8
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	e8 1a       	sub	r14, r24
     b4a:	f1 08       	sbc	r15, r1
     b4c:	00 58       	subi	r16, 0x80	; 128
     b4e:	11 09       	sbc	r17, r1
     b50:	0c 15       	cp	r16, r12
     b52:	1d 05       	cpc	r17, r13
     b54:	d1 f6       	brne	.-76     	; 0xb0a <LCD_Update+0x30>
     b56:	10 92 06 01 	sts	0x0106, r1
     b5a:	bf be       	out	0x3f, r11	; 63
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	bf 90       	pop	r11
     b6e:	08 95       	ret

00000b70 <LCD_Clear>:
     b70:	ea e0       	ldi	r30, 0x0A	; 10
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	2a e0       	ldi	r18, 0x0A	; 10
     b76:	35 e0       	ldi	r19, 0x05	; 5
     b78:	08 c0       	rjmp	.+16     	; 0xb8a <LCD_Clear+0x1a>
     b7a:	11 92       	st	Z+, r1
     b7c:	e8 17       	cp	r30, r24
     b7e:	f9 07       	cpc	r31, r25
     b80:	e1 f7       	brne	.-8      	; 0xb7a <LCD_Clear+0xa>
     b82:	fc 01       	movw	r30, r24
     b84:	82 17       	cp	r24, r18
     b86:	93 07       	cpc	r25, r19
     b88:	21 f0       	breq	.+8      	; 0xb92 <LCD_Clear+0x22>
     b8a:	cf 01       	movw	r24, r30
     b8c:	80 58       	subi	r24, 0x80	; 128
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	f4 cf       	rjmp	.-24     	; 0xb7a <LCD_Clear+0xa>
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	80 93 06 01 	sts	0x0106, r24
     b98:	a0 cf       	rjmp	.-192    	; 0xada <LCD_Update>
     b9a:	08 95       	ret

00000b9c <LCD_PutChar>:
     b9c:	8a 30       	cpi	r24, 0x0A	; 10
     b9e:	29 f0       	breq	.+10     	; 0xbaa <LCD_PutChar+0xe>
     ba0:	8d 30       	cpi	r24, 0x0D	; 13
     ba2:	61 f4       	brne	.+24     	; 0xbbc <LCD_PutChar+0x20>
     ba4:	10 92 05 01 	sts	0x0105, r1
     ba8:	08 95       	ret
     baa:	80 91 04 01 	lds	r24, 0x0104
     bae:	87 30       	cpi	r24, 0x07	; 7
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <LCD_PutChar+0x18>
     bb2:	3d c0       	rjmp	.+122    	; 0xc2e <LCD_PutChar+0x92>
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 04 01 	sts	0x0104, r24
     bba:	08 95       	ret
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	fc 01       	movw	r30, r24
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	e8 0f       	add	r30, r24
     bc6:	f9 1f       	adc	r31, r25
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	eb 5f       	subi	r30, 0xFB	; 251
     bce:	fe 4f       	sbci	r31, 0xFE	; 254
     bd0:	80 91 05 01 	lds	r24, 0x0105
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	dc 01       	movw	r26, r24
     bd8:	aa 0f       	add	r26, r26
     bda:	bb 1f       	adc	r27, r27
     bdc:	a8 0f       	add	r26, r24
     bde:	b9 1f       	adc	r27, r25
     be0:	aa 0f       	add	r26, r26
     be2:	bb 1f       	adc	r27, r27
     be4:	80 91 04 01 	lds	r24, 0x0104
     be8:	90 e8       	ldi	r25, 0x80	; 128
     bea:	89 9f       	mul	r24, r25
     bec:	a0 0d       	add	r26, r0
     bee:	b1 1d       	adc	r27, r1
     bf0:	11 24       	eor	r1, r1
     bf2:	a6 5f       	subi	r26, 0xF6	; 246
     bf4:	be 4f       	sbci	r27, 0xFE	; 254
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	94 91       	lpm	r25, Z
     bfa:	9d 93       	st	X+, r25
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	31 96       	adiw	r30, 0x01	; 1
     c00:	86 30       	cpi	r24, 0x06	; 6
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <LCD_PutChar+0x5c>
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	00 90 04 01 	lds	r0, 0x0104
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <LCD_PutChar+0x76>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	0a 94       	dec	r0
     c14:	e2 f7       	brpl	.-8      	; 0xc0e <LCD_PutChar+0x72>
     c16:	90 91 06 01 	lds	r25, 0x0106
     c1a:	89 2b       	or	r24, r25
     c1c:	80 93 06 01 	sts	0x0106, r24
     c20:	80 91 05 01 	lds	r24, 0x0105
     c24:	84 31       	cpi	r24, 0x14	; 20
     c26:	18 f4       	brcc	.+6      	; 0xc2e <LCD_PutChar+0x92>
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	80 93 05 01 	sts	0x0105, r24
     c2e:	08 95       	ret

00000c30 <LCD_PutString>:
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	ec 01       	movw	r28, r24
     c36:	88 81       	ld	r24, Y
     c38:	88 23       	and	r24, r24
     c3a:	29 f0       	breq	.+10     	; 0xc46 <LCD_PutString+0x16>
     c3c:	89 91       	ld	r24, Y+
     c3e:	ae df       	rcall	.-164    	; 0xb9c <LCD_PutChar>
     c40:	88 81       	ld	r24, Y
     c42:	81 11       	cpse	r24, r1
     c44:	fb cf       	rjmp	.-10     	; 0xc3c <LCD_PutString+0xc>
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <LCD_PutString_P>:
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	fc 01       	movw	r30, r24
     c52:	84 91       	lpm	r24, Z
     c54:	ef 01       	movw	r28, r30
     c56:	21 96       	adiw	r28, 0x01	; 1
     c58:	88 23       	and	r24, r24
     c5a:	31 f0       	breq	.+12     	; 0xc68 <LCD_PutString_P+0x1c>
     c5c:	9f df       	rcall	.-194    	; 0xb9c <LCD_PutChar>
     c5e:	fe 01       	movw	r30, r28
     c60:	84 91       	lpm	r24, Z
     c62:	21 96       	adiw	r28, 0x01	; 1
     c64:	81 11       	cpse	r24, r1
     c66:	fa cf       	rjmp	.-12     	; 0xc5c <LCD_PutString_P+0x10>
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <LCD_GotoXY>:
     c6e:	80 93 05 01 	sts	0x0105, r24
     c72:	60 93 04 01 	sts	0x0104, r22
     c76:	08 95       	ret

00000c78 <Backlight_Off>:
}

void
Backlight_Off (void)
{
  TWI_Start();
     c78:	6b d0       	rcall	.+214    	; 0xd50 <TWI_Start>
  TWI_Address_RW(0xc4);
     c7a:	84 ec       	ldi	r24, 0xC4	; 196
     c7c:	84 d0       	rcall	.+264    	; 0xd86 <TWI_Address_RW>
  TWI_Write(0x11);
     c7e:	81 e1       	ldi	r24, 0x11	; 17
     c80:	9f d0       	rcall	.+318    	; 0xdc0 <TWI_Write>
  TWI_Write(0x00);
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	9d d0       	rcall	.+314    	; 0xdc0 <TWI_Write>
  TWI_Write(0x00);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	9b d0       	rcall	.+310    	; 0xdc0 <TWI_Write>
  TWI_Write(0x00);
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	99 d0       	rcall	.+306    	; 0xdc0 <TWI_Write>
  TWI_Write(0x00);
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	97 d0       	rcall	.+302    	; 0xdc0 <TWI_Write>
  TWI_Write(0x00);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	95 d0       	rcall	.+298    	; 0xdc0 <TWI_Write>
  TWI_Stop();
     c96:	b1 c0       	rjmp	.+354    	; 0xdfa <TWI_Stop>
     c98:	08 95       	ret

00000c9a <LCD_Init>:
  SPI_MasterTransfer(data);
}

void
LCD_Init (void)
{
     c9a:	cf 93       	push	r28
  SPI_MasterInit();
     c9c:	2e d0       	rcall	.+92     	; 0xcfa <SPI_MasterInit>

  /* Set Register Select and Chip Select as Output */
  DDRC |= (1<<PC7)|(1<<PC6);
     c9e:	87 b1       	in	r24, 0x07	; 7
     ca0:	80 6c       	ori	r24, 0xC0	; 192
     ca2:	87 b9       	out	0x07, r24	; 7
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
     ca4:	cf b7       	in	r28, 0x3f	; 63
  cli();
     ca6:	f8 94       	cli
  
  /* Starting Init Command Sequence */
  LCD_Command_Mode;
     ca8:	47 98       	cbi	0x08, 7	; 8
  LCD_Chip_Select;
     caa:	46 98       	cbi	0x08, 6	; 8
uint8_t lcd_texty = 0;

void
LCD_Send (uint8_t data)
{
  SPI_MasterTransfer(data);
     cac:	82 ee       	ldi	r24, 0xE2	; 226
     cae:	37 d0       	rcall	.+110    	; 0xd1e <SPI_MasterTransfer>
     cb0:	83 ea       	ldi	r24, 0xA3	; 163
     cb2:	35 d0       	rcall	.+106    	; 0xd1e <SPI_MasterTransfer>
     cb4:	81 e8       	ldi	r24, 0x81	; 129
     cb6:	33 d0       	rcall	.+102    	; 0xd1e <SPI_MasterTransfer>
     cb8:	88 e0       	ldi	r24, 0x08	; 8
     cba:	31 d0       	rcall	.+98     	; 0xd1e <SPI_MasterTransfer>
     cbc:	80 ea       	ldi	r24, 0xA0	; 160
     cbe:	2f d0       	rcall	.+94     	; 0xd1e <SPI_MasterTransfer>
     cc0:	88 ec       	ldi	r24, 0xC8	; 200
     cc2:	2d d0       	rcall	.+90     	; 0xd1e <SPI_MasterTransfer>
     cc4:	85 e2       	ldi	r24, 0x25	; 37
     cc6:	2b d0       	rcall	.+86     	; 0xd1e <SPI_MasterTransfer>
     cc8:	8f e2       	ldi	r24, 0x2F	; 47
     cca:	29 d0       	rcall	.+82     	; 0xd1e <SPI_MasterTransfer>
     ccc:	8f ea       	ldi	r24, 0xAF	; 175
     cce:	27 d0       	rcall	.+78     	; 0xd1e <SPI_MasterTransfer>
  LCD_Send(LCD_COMMON_OUTPUT_MODE_REVERSE);
  LCD_Send(LCD_V5_VOLTAGE_REGULATOR | 0x05);
  LCD_Send(LCD_POWER_CONTROLLER_SET | 0x07);
  LCD_Send(LCD_DISPLAY_ON);
  
  LCD_Chip_Unselect;
     cd0:	46 9a       	sbi	0x08, 6	; 8
  LCD_Data_Mode;
     cd2:	47 9a       	sbi	0x08, 7	; 8
  
  LCD_Clear();
     cd4:	4d df       	rcall	.-358    	; 0xb70 <LCD_Clear>
  
  /* Restore Status Register */
  SREG = sreg;
     cd6:	cf bf       	out	0x3f, r28	; 63
  
  // Initialize TWI for Backlight Control
  TWI_Init();
     cd8:	27 d0       	rcall	.+78     	; 0xd28 <TWI_Init>
  Backlight_Off();
     cda:	ce df       	rcall	.-100    	; 0xc78 <Backlight_Off>
  
  // Initialize Dataflash
  dataflash_init();
     cdc:	b1 de       	rcall	.-670    	; 0xa40 <dataflash_init>
}
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <Backlight_LED>:
  TWI_Stop();
}

void
Backlight_LED (uint8_t led_selector)
{
     ce2:	cf 93       	push	r28
     ce4:	c8 2f       	mov	r28, r24
  TWI_Start();
     ce6:	34 d0       	rcall	.+104    	; 0xd50 <TWI_Start>
  TWI_Address_RW(0xc4);
     ce8:	84 ec       	ldi	r24, 0xC4	; 196
     cea:	4d d0       	rcall	.+154    	; 0xd86 <TWI_Address_RW>
  TWI_Write(0x15);
     cec:	85 e1       	ldi	r24, 0x15	; 21
     cee:	68 d0       	rcall	.+208    	; 0xdc0 <TWI_Write>
  TWI_Write(led_selector);
     cf0:	8c 2f       	mov	r24, r28
     cf2:	66 d0       	rcall	.+204    	; 0xdc0 <TWI_Write>
  TWI_Stop();
     cf4:	82 d0       	rcall	.+260    	; 0xdfa <TWI_Stop>
}
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <SPI_MasterInit>:

void
SPI_MasterInit (void)
{
  /* Check if already initialized */
  if (!(SPI_flag & 1))
     cfa:	80 91 07 01 	lds	r24, 0x0107
     cfe:	80 fd       	sbrc	r24, 0
     d00:	0d c0       	rjmp	.+26     	; 0xd1c <SPI_MasterInit+0x22>
    {
      /* Set MOSI and SCK output */
      DDRB |= (1<<PB5)|(1<<PB7);
     d02:	84 b1       	in	r24, 0x04	; 4
     d04:	80 6a       	ori	r24, 0xA0	; 160
     d06:	84 b9       	out	0x04, r24	; 4
      
      /* Enable SPI, Master */
      SPCR = (1<<SPE)|(1<<MSTR);
     d08:	80 e5       	ldi	r24, 0x50	; 80
     d0a:	8c bd       	out	0x2c, r24	; 44
      
      /* Set Double SPI Speed Bit, SPI clock will be fck/2 */
      SPSR = (1<<SPI2X);
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	8d bd       	out	0x2d, r24	; 45
      
      /* Set SPI Init Flag */
      SPI_flag = 1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	90 93 08 01 	sts	0x0108, r25
     d18:	80 93 07 01 	sts	0x0107, r24
     d1c:	08 95       	ret

00000d1e <SPI_MasterTransfer>:

void
SPI_MasterTransfer (unsigned char c)
{
  /* Start transmission */
  SPDR = c;
     d1e:	8e bd       	out	0x2e, r24	; 46
  
  /* Wait for transmission complete */
  while (!(SPSR & (1<<SPIF)));
     d20:	0d b4       	in	r0, 0x2d	; 45
     d22:	07 fe       	sbrs	r0, 7
     d24:	fd cf       	rjmp	.-6      	; 0xd20 <SPI_MasterTransfer+0x2>
}
     d26:	08 95       	ret

00000d28 <TWI_Init>:

void
TWI_Init (void)
{
  // Port Setup
  DDRC &= ~((1 << PC0)|(1 << PC1));
     d28:	87 b1       	in	r24, 0x07	; 7
     d2a:	8c 7f       	andi	r24, 0xFC	; 252
     d2c:	87 b9       	out	0x07, r24	; 7
  PORTC |= (1 << PC0)|(1 << PC1);
     d2e:	88 b1       	in	r24, 0x08	; 8
     d30:	83 60       	ori	r24, 0x03	; 3
     d32:	88 b9       	out	0x08, r24	; 8
  
  // Setup TWI Speed to 400kHZ (TWPS = 1)
  TWBR = 3;
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	80 93 b8 00 	sts	0x00B8, r24
  
  // Using TIMER2 to detect timeout
  TCCR2B = (7 << CS20);
     d3a:	87 e0       	ldi	r24, 0x07	; 7
     d3c:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = (1 << OCIE2A);
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	80 93 70 00 	sts	0x0070, r24
  
  OCR2A = 125;
     d46:	8d e7       	ldi	r24, 0x7D	; 125
     d48:	80 93 b3 00 	sts	0x00B3, r24
  
  // Interrupts REQUIRED!
  sei();
     d4c:	78 94       	sei
     d4e:	08 95       	ret

00000d50 <TWI_Start>:
}

int16_t
TWI_Start (void)
{
  twi_timeout = 10;
     d50:	8a e0       	ldi	r24, 0x0A	; 10
     d52:	80 93 09 01 	sts	0x0109, r24
  
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
     d56:	84 ea       	ldi	r24, 0xA4	; 164
     d58:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     d5c:	ec eb       	ldi	r30, 0xBC	; 188
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 91 09 01 	lds	r24, 0x0109
     d64:	88 23       	and	r24, r24
     d66:	19 f0       	breq	.+6      	; 0xd6e <TWI_Start+0x1e>
     d68:	80 81       	ld	r24, Z
     d6a:	88 23       	and	r24, r24
     d6c:	cc f7       	brge	.-14     	; 0xd60 <TWI_Start+0x10>
  
  if (twi_timeout)
     d6e:	80 91 09 01 	lds	r24, 0x0109
     d72:	88 23       	and	r24, r24
     d74:	29 f0       	breq	.+10     	; 0xd80 <TWI_Start+0x30>
    return (int16_t) (TWSR & 0xf8);
     d76:	80 91 b9 00 	lds	r24, 0x00B9
     d7a:	88 7f       	andi	r24, 0xF8	; 248
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	08 95       	ret
  else
    return -1;
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	9f ef       	ldi	r25, 0xFF	; 255
}
     d84:	08 95       	ret

00000d86 <TWI_Address_RW>:

int16_t
TWI_Address_RW (uint8_t address)
{
  twi_timeout = 10;
     d86:	9a e0       	ldi	r25, 0x0A	; 10
     d88:	90 93 09 01 	sts	0x0109, r25
  
  TWDR = address;
     d8c:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
     d90:	84 e8       	ldi	r24, 0x84	; 132
     d92:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     d96:	ec eb       	ldi	r30, 0xBC	; 188
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 91 09 01 	lds	r24, 0x0109
     d9e:	88 23       	and	r24, r24
     da0:	19 f0       	breq	.+6      	; 0xda8 <TWI_Address_RW+0x22>
     da2:	80 81       	ld	r24, Z
     da4:	88 23       	and	r24, r24
     da6:	cc f7       	brge	.-14     	; 0xd9a <TWI_Address_RW+0x14>
  
  if (twi_timeout)
     da8:	80 91 09 01 	lds	r24, 0x0109
     dac:	88 23       	and	r24, r24
     dae:	29 f0       	breq	.+10     	; 0xdba <TWI_Address_RW+0x34>
    return (int16_t) (TWSR & 0xf8);
     db0:	80 91 b9 00 	lds	r24, 0x00B9
     db4:	88 7f       	andi	r24, 0xF8	; 248
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	08 95       	ret
  else
    return -1;
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	9f ef       	ldi	r25, 0xFF	; 255
}
     dbe:	08 95       	ret

00000dc0 <TWI_Write>:

int16_t
TWI_Write (uint8_t data)
{
  twi_timeout = 10;
     dc0:	9a e0       	ldi	r25, 0x0A	; 10
     dc2:	90 93 09 01 	sts	0x0109, r25
  
  TWDR = data;
     dc6:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
     dca:	84 e8       	ldi	r24, 0x84	; 132
     dcc:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     dd0:	ec eb       	ldi	r30, 0xBC	; 188
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 91 09 01 	lds	r24, 0x0109
     dd8:	88 23       	and	r24, r24
     dda:	19 f0       	breq	.+6      	; 0xde2 <TWI_Write+0x22>
     ddc:	80 81       	ld	r24, Z
     dde:	88 23       	and	r24, r24
     de0:	cc f7       	brge	.-14     	; 0xdd4 <TWI_Write+0x14>
  
  if (twi_timeout)
     de2:	80 91 09 01 	lds	r24, 0x0109
     de6:	88 23       	and	r24, r24
     de8:	29 f0       	breq	.+10     	; 0xdf4 <TWI_Write+0x34>
    return (int16_t) (TWSR & 0xf8);
     dea:	80 91 b9 00 	lds	r24, 0x00B9
     dee:	88 7f       	andi	r24, 0xF8	; 248
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	08 95       	ret
  else
    return -1;
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	9f ef       	ldi	r25, 0xFF	; 255
}
     df8:	08 95       	ret

00000dfa <TWI_Stop>:

void
TWI_Stop (void)
{
  twi_timeout = 10;
     dfa:	8a e0       	ldi	r24, 0x0A	; 10
     dfc:	80 93 09 01 	sts	0x0109, r24
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
     e00:	84 e9       	ldi	r24, 0x94	; 148
     e02:	80 93 bc 00 	sts	0x00BC, r24
     e06:	08 95       	ret

00000e08 <__vector_9>:
}

// ISR will be called every 8ms to decrease twi_timeout if > 0
ISR (TIMER2_COMPA_vect)
{
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
     e12:	0b b6       	in	r0, 0x3b	; 59
     e14:	0f 92       	push	r0
     e16:	8f 93       	push	r24
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
  OCR2A += 125;
     e1c:	e3 eb       	ldi	r30, 0xB3	; 179
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	83 58       	subi	r24, 0x83	; 131
     e24:	80 83       	st	Z, r24

  if (twi_timeout)
     e26:	80 91 09 01 	lds	r24, 0x0109
     e2a:	88 23       	and	r24, r24
     e2c:	29 f0       	breq	.+10     	; 0xe38 <__vector_9+0x30>
    twi_timeout--;
     e2e:	80 91 09 01 	lds	r24, 0x0109
     e32:	81 50       	subi	r24, 0x01	; 1
     e34:	80 93 09 01 	sts	0x0109, r24
}
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	8f 91       	pop	r24
     e3e:	0f 90       	pop	r0
     e40:	0b be       	out	0x3b, r0	; 59
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <UART_Init>:

  // Enable DRE Interrupt
  UCSR0B |= (1 << UDRIE0);
   
  return ret;
}
     e4c:	8f b7       	in	r24, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	27 e6       	ldi	r18, 0x67	; 103
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	30 93 c5 00 	sts	0x00C5, r19
     e58:	20 93 c4 00 	sts	0x00C4, r18
     e5c:	98 e9       	ldi	r25, 0x98	; 152
     e5e:	90 93 c1 00 	sts	0x00C1, r25
     e62:	90 ec       	ldi	r25, 0xC0	; 192
     e64:	90 93 c0 00 	sts	0x00C0, r25
     e68:	8f bf       	out	0x3f, r24	; 63
     e6a:	40 e1       	ldi	r20, 0x10	; 16
     e6c:	6a e5       	ldi	r22, 0x5A	; 90
     e6e:	75 e0       	ldi	r23, 0x05	; 5
     e70:	82 e5       	ldi	r24, 0x52	; 82
     e72:	95 e0       	ldi	r25, 0x05	; 5
     e74:	00 de       	rcall	.-1024   	; 0xa76 <fifo_init>
     e76:	40 e4       	ldi	r20, 0x40	; 64
     e78:	62 e1       	ldi	r22, 0x12	; 18
     e7a:	75 e0       	ldi	r23, 0x05	; 5
     e7c:	8a e0       	ldi	r24, 0x0A	; 10
     e7e:	95 e0       	ldi	r25, 0x05	; 5
     e80:	fa cd       	rjmp	.-1036   	; 0xa76 <fifo_init>
     e82:	08 95       	ret

00000e84 <__vector_20>:

// Receive Interrupt Routine
ISR(USART0_RX_vect)
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	0b b6       	in	r0, 0x3b	; 59
     e90:	0f 92       	push	r0
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
  fifo_put(&uart_infifo, UDR0);
     eaa:	60 91 c6 00 	lds	r22, 0x00C6
     eae:	82 e5       	ldi	r24, 0x52	; 82
     eb0:	95 e0       	ldi	r25, 0x05	; 5
     eb2:	f5 dd       	rcall	.-1046   	; 0xa9e <fifo_put>
}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0b be       	out	0x3b, r0	; 59
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <__vector_21>:

// Data Register Empty Interrupt
ISR(USART0_UDRE_vect)
{
     eda:	1f 92       	push	r1
     edc:	0f 92       	push	r0
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	0f 92       	push	r0
     ee2:	11 24       	eor	r1, r1
     ee4:	0b b6       	in	r0, 0x3b	; 59
     ee6:	0f 92       	push	r0
     ee8:	2f 93       	push	r18
     eea:	3f 93       	push	r19
     eec:	4f 93       	push	r20
     eee:	5f 93       	push	r21
     ef0:	6f 93       	push	r22
     ef2:	7f 93       	push	r23
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
     efc:	ef 93       	push	r30
     efe:	ff 93       	push	r31
  if (uart_outfifo.count > 0)
     f00:	80 91 0a 05 	lds	r24, 0x050A
     f04:	88 23       	and	r24, r24
     f06:	31 f0       	breq	.+12     	; 0xf14 <__vector_21+0x3a>
    UDR0 = fifo_get_nowait(&uart_outfifo);
     f08:	8a e0       	ldi	r24, 0x0A	; 10
     f0a:	95 e0       	ldi	r25, 0x05	; 5
     f0c:	be dd       	rcall	.-1156   	; 0xa8a <fifo_get_nowait>
     f0e:	80 93 c6 00 	sts	0x00C6, r24
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__vector_21+0x44>
  else
    UCSR0B &= ~(1 << UDRIE0);
     f14:	e1 ec       	ldi	r30, 0xC1	; 193
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8f 7d       	andi	r24, 0xDF	; 223
     f1c:	80 83       	st	Z, r24
}
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0b be       	out	0x3b, r0	; 59
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <__divsf3>:
     f44:	0c d0       	rcall	.+24     	; 0xf5e <__divsf3x>
     f46:	e6 c0       	rjmp	.+460    	; 0x1114 <__fp_round>
     f48:	de d0       	rcall	.+444    	; 0x1106 <__fp_pscB>
     f4a:	40 f0       	brcs	.+16     	; 0xf5c <__divsf3+0x18>
     f4c:	d5 d0       	rcall	.+426    	; 0x10f8 <__fp_pscA>
     f4e:	30 f0       	brcs	.+12     	; 0xf5c <__divsf3+0x18>
     f50:	21 f4       	brne	.+8      	; 0xf5a <__divsf3+0x16>
     f52:	5f 3f       	cpi	r21, 0xFF	; 255
     f54:	19 f0       	breq	.+6      	; 0xf5c <__divsf3+0x18>
     f56:	c7 c0       	rjmp	.+398    	; 0x10e6 <__fp_inf>
     f58:	51 11       	cpse	r21, r1
     f5a:	10 c1       	rjmp	.+544    	; 0x117c <__fp_szero>
     f5c:	ca c0       	rjmp	.+404    	; 0x10f2 <__fp_nan>

00000f5e <__divsf3x>:
     f5e:	eb d0       	rcall	.+470    	; 0x1136 <__fp_split3>
     f60:	98 f3       	brcs	.-26     	; 0xf48 <__divsf3+0x4>

00000f62 <__divsf3_pse>:
     f62:	99 23       	and	r25, r25
     f64:	c9 f3       	breq	.-14     	; 0xf58 <__divsf3+0x14>
     f66:	55 23       	and	r21, r21
     f68:	b1 f3       	breq	.-20     	; 0xf56 <__divsf3+0x12>
     f6a:	95 1b       	sub	r25, r21
     f6c:	55 0b       	sbc	r21, r21
     f6e:	bb 27       	eor	r27, r27
     f70:	aa 27       	eor	r26, r26
     f72:	62 17       	cp	r22, r18
     f74:	73 07       	cpc	r23, r19
     f76:	84 07       	cpc	r24, r20
     f78:	38 f0       	brcs	.+14     	; 0xf88 <__divsf3_pse+0x26>
     f7a:	9f 5f       	subi	r25, 0xFF	; 255
     f7c:	5f 4f       	sbci	r21, 0xFF	; 255
     f7e:	22 0f       	add	r18, r18
     f80:	33 1f       	adc	r19, r19
     f82:	44 1f       	adc	r20, r20
     f84:	aa 1f       	adc	r26, r26
     f86:	a9 f3       	breq	.-22     	; 0xf72 <__divsf3_pse+0x10>
     f88:	33 d0       	rcall	.+102    	; 0xff0 <__divsf3_pse+0x8e>
     f8a:	0e 2e       	mov	r0, r30
     f8c:	3a f0       	brmi	.+14     	; 0xf9c <__divsf3_pse+0x3a>
     f8e:	e0 e8       	ldi	r30, 0x80	; 128
     f90:	30 d0       	rcall	.+96     	; 0xff2 <__divsf3_pse+0x90>
     f92:	91 50       	subi	r25, 0x01	; 1
     f94:	50 40       	sbci	r21, 0x00	; 0
     f96:	e6 95       	lsr	r30
     f98:	00 1c       	adc	r0, r0
     f9a:	ca f7       	brpl	.-14     	; 0xf8e <__divsf3_pse+0x2c>
     f9c:	29 d0       	rcall	.+82     	; 0xff0 <__divsf3_pse+0x8e>
     f9e:	fe 2f       	mov	r31, r30
     fa0:	27 d0       	rcall	.+78     	; 0xff0 <__divsf3_pse+0x8e>
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	bb 1f       	adc	r27, r27
     faa:	26 17       	cp	r18, r22
     fac:	37 07       	cpc	r19, r23
     fae:	48 07       	cpc	r20, r24
     fb0:	ab 07       	cpc	r26, r27
     fb2:	b0 e8       	ldi	r27, 0x80	; 128
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <__divsf3_pse+0x56>
     fb6:	bb 0b       	sbc	r27, r27
     fb8:	80 2d       	mov	r24, r0
     fba:	bf 01       	movw	r22, r30
     fbc:	ff 27       	eor	r31, r31
     fbe:	93 58       	subi	r25, 0x83	; 131
     fc0:	5f 4f       	sbci	r21, 0xFF	; 255
     fc2:	2a f0       	brmi	.+10     	; 0xfce <__divsf3_pse+0x6c>
     fc4:	9e 3f       	cpi	r25, 0xFE	; 254
     fc6:	51 05       	cpc	r21, r1
     fc8:	68 f0       	brcs	.+26     	; 0xfe4 <__divsf3_pse+0x82>
     fca:	8d c0       	rjmp	.+282    	; 0x10e6 <__fp_inf>
     fcc:	d7 c0       	rjmp	.+430    	; 0x117c <__fp_szero>
     fce:	5f 3f       	cpi	r21, 0xFF	; 255
     fd0:	ec f3       	brlt	.-6      	; 0xfcc <__divsf3_pse+0x6a>
     fd2:	98 3e       	cpi	r25, 0xE8	; 232
     fd4:	dc f3       	brlt	.-10     	; 0xfcc <__divsf3_pse+0x6a>
     fd6:	86 95       	lsr	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	b7 95       	ror	r27
     fde:	f7 95       	ror	r31
     fe0:	9f 5f       	subi	r25, 0xFF	; 255
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <__divsf3_pse+0x74>
     fe4:	88 0f       	add	r24, r24
     fe6:	91 1d       	adc	r25, r1
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	97 f9       	bld	r25, 7
     fee:	08 95       	ret
     ff0:	e1 e0       	ldi	r30, 0x01	; 1
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	bb 1f       	adc	r27, r27
     ffa:	62 17       	cp	r22, r18
     ffc:	73 07       	cpc	r23, r19
     ffe:	84 07       	cpc	r24, r20
    1000:	ba 07       	cpc	r27, r26
    1002:	20 f0       	brcs	.+8      	; 0x100c <__divsf3_pse+0xaa>
    1004:	62 1b       	sub	r22, r18
    1006:	73 0b       	sbc	r23, r19
    1008:	84 0b       	sbc	r24, r20
    100a:	ba 0b       	sbc	r27, r26
    100c:	ee 1f       	adc	r30, r30
    100e:	88 f7       	brcc	.-30     	; 0xff2 <__divsf3_pse+0x90>
    1010:	e0 95       	com	r30
    1012:	08 95       	ret

00001014 <__fixunssfsi>:
    1014:	98 d0       	rcall	.+304    	; 0x1146 <__fp_splitA>
    1016:	88 f0       	brcs	.+34     	; 0x103a <__fixunssfsi+0x26>
    1018:	9f 57       	subi	r25, 0x7F	; 127
    101a:	90 f0       	brcs	.+36     	; 0x1040 <__fixunssfsi+0x2c>
    101c:	b9 2f       	mov	r27, r25
    101e:	99 27       	eor	r25, r25
    1020:	b7 51       	subi	r27, 0x17	; 23
    1022:	a0 f0       	brcs	.+40     	; 0x104c <__fixunssfsi+0x38>
    1024:	d1 f0       	breq	.+52     	; 0x105a <__fixunssfsi+0x46>
    1026:	66 0f       	add	r22, r22
    1028:	77 1f       	adc	r23, r23
    102a:	88 1f       	adc	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	1a f0       	brmi	.+6      	; 0x1036 <__fixunssfsi+0x22>
    1030:	ba 95       	dec	r27
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__fixunssfsi+0x12>
    1034:	12 c0       	rjmp	.+36     	; 0x105a <__fixunssfsi+0x46>
    1036:	b1 30       	cpi	r27, 0x01	; 1
    1038:	81 f0       	breq	.+32     	; 0x105a <__fixunssfsi+0x46>
    103a:	9f d0       	rcall	.+318    	; 0x117a <__fp_zero>
    103c:	b1 e0       	ldi	r27, 0x01	; 1
    103e:	08 95       	ret
    1040:	9c c0       	rjmp	.+312    	; 0x117a <__fp_zero>
    1042:	67 2f       	mov	r22, r23
    1044:	78 2f       	mov	r23, r24
    1046:	88 27       	eor	r24, r24
    1048:	b8 5f       	subi	r27, 0xF8	; 248
    104a:	39 f0       	breq	.+14     	; 0x105a <__fixunssfsi+0x46>
    104c:	b9 3f       	cpi	r27, 0xF9	; 249
    104e:	cc f3       	brlt	.-14     	; 0x1042 <__fixunssfsi+0x2e>
    1050:	86 95       	lsr	r24
    1052:	77 95       	ror	r23
    1054:	67 95       	ror	r22
    1056:	b3 95       	inc	r27
    1058:	d9 f7       	brne	.-10     	; 0x1050 <__fixunssfsi+0x3c>
    105a:	3e f4       	brtc	.+14     	; 0x106a <__fixunssfsi+0x56>
    105c:	90 95       	com	r25
    105e:	80 95       	com	r24
    1060:	70 95       	com	r23
    1062:	61 95       	neg	r22
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	8f 4f       	sbci	r24, 0xFF	; 255
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	08 95       	ret

0000106c <__floatunsisf>:
    106c:	e8 94       	clt
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <__floatsisf+0x12>

00001070 <__floatsisf>:
    1070:	97 fb       	bst	r25, 7
    1072:	3e f4       	brtc	.+14     	; 0x1082 <__floatsisf+0x12>
    1074:	90 95       	com	r25
    1076:	80 95       	com	r24
    1078:	70 95       	com	r23
    107a:	61 95       	neg	r22
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	8f 4f       	sbci	r24, 0xFF	; 255
    1080:	9f 4f       	sbci	r25, 0xFF	; 255
    1082:	99 23       	and	r25, r25
    1084:	a9 f0       	breq	.+42     	; 0x10b0 <__floatsisf+0x40>
    1086:	f9 2f       	mov	r31, r25
    1088:	96 e9       	ldi	r25, 0x96	; 150
    108a:	bb 27       	eor	r27, r27
    108c:	93 95       	inc	r25
    108e:	f6 95       	lsr	r31
    1090:	87 95       	ror	r24
    1092:	77 95       	ror	r23
    1094:	67 95       	ror	r22
    1096:	b7 95       	ror	r27
    1098:	f1 11       	cpse	r31, r1
    109a:	f8 cf       	rjmp	.-16     	; 0x108c <__floatsisf+0x1c>
    109c:	fa f4       	brpl	.+62     	; 0x10dc <__floatsisf+0x6c>
    109e:	bb 0f       	add	r27, r27
    10a0:	11 f4       	brne	.+4      	; 0x10a6 <__floatsisf+0x36>
    10a2:	60 ff       	sbrs	r22, 0
    10a4:	1b c0       	rjmp	.+54     	; 0x10dc <__floatsisf+0x6c>
    10a6:	6f 5f       	subi	r22, 0xFF	; 255
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	8f 4f       	sbci	r24, 0xFF	; 255
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	16 c0       	rjmp	.+44     	; 0x10dc <__floatsisf+0x6c>
    10b0:	88 23       	and	r24, r24
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <__floatsisf+0x48>
    10b4:	96 e9       	ldi	r25, 0x96	; 150
    10b6:	11 c0       	rjmp	.+34     	; 0x10da <__floatsisf+0x6a>
    10b8:	77 23       	and	r23, r23
    10ba:	21 f0       	breq	.+8      	; 0x10c4 <__floatsisf+0x54>
    10bc:	9e e8       	ldi	r25, 0x8E	; 142
    10be:	87 2f       	mov	r24, r23
    10c0:	76 2f       	mov	r23, r22
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <__floatsisf+0x5e>
    10c4:	66 23       	and	r22, r22
    10c6:	71 f0       	breq	.+28     	; 0x10e4 <__floatsisf+0x74>
    10c8:	96 e8       	ldi	r25, 0x86	; 134
    10ca:	86 2f       	mov	r24, r22
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	2a f0       	brmi	.+10     	; 0x10dc <__floatsisf+0x6c>
    10d2:	9a 95       	dec	r25
    10d4:	66 0f       	add	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	88 1f       	adc	r24, r24
    10da:	da f7       	brpl	.-10     	; 0x10d2 <__floatsisf+0x62>
    10dc:	88 0f       	add	r24, r24
    10de:	96 95       	lsr	r25
    10e0:	87 95       	ror	r24
    10e2:	97 f9       	bld	r25, 7
    10e4:	08 95       	ret

000010e6 <__fp_inf>:
    10e6:	97 f9       	bld	r25, 7
    10e8:	9f 67       	ori	r25, 0x7F	; 127
    10ea:	80 e8       	ldi	r24, 0x80	; 128
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	08 95       	ret

000010f2 <__fp_nan>:
    10f2:	9f ef       	ldi	r25, 0xFF	; 255
    10f4:	80 ec       	ldi	r24, 0xC0	; 192
    10f6:	08 95       	ret

000010f8 <__fp_pscA>:
    10f8:	00 24       	eor	r0, r0
    10fa:	0a 94       	dec	r0
    10fc:	16 16       	cp	r1, r22
    10fe:	17 06       	cpc	r1, r23
    1100:	18 06       	cpc	r1, r24
    1102:	09 06       	cpc	r0, r25
    1104:	08 95       	ret

00001106 <__fp_pscB>:
    1106:	00 24       	eor	r0, r0
    1108:	0a 94       	dec	r0
    110a:	12 16       	cp	r1, r18
    110c:	13 06       	cpc	r1, r19
    110e:	14 06       	cpc	r1, r20
    1110:	05 06       	cpc	r0, r21
    1112:	08 95       	ret

00001114 <__fp_round>:
    1114:	09 2e       	mov	r0, r25
    1116:	03 94       	inc	r0
    1118:	00 0c       	add	r0, r0
    111a:	11 f4       	brne	.+4      	; 0x1120 <__fp_round+0xc>
    111c:	88 23       	and	r24, r24
    111e:	52 f0       	brmi	.+20     	; 0x1134 <__fp_round+0x20>
    1120:	bb 0f       	add	r27, r27
    1122:	40 f4       	brcc	.+16     	; 0x1134 <__fp_round+0x20>
    1124:	bf 2b       	or	r27, r31
    1126:	11 f4       	brne	.+4      	; 0x112c <__fp_round+0x18>
    1128:	60 ff       	sbrs	r22, 0
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <__fp_round+0x20>
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	8f 4f       	sbci	r24, 0xFF	; 255
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	08 95       	ret

00001136 <__fp_split3>:
    1136:	57 fd       	sbrc	r21, 7
    1138:	90 58       	subi	r25, 0x80	; 128
    113a:	44 0f       	add	r20, r20
    113c:	55 1f       	adc	r21, r21
    113e:	59 f0       	breq	.+22     	; 0x1156 <__fp_splitA+0x10>
    1140:	5f 3f       	cpi	r21, 0xFF	; 255
    1142:	71 f0       	breq	.+28     	; 0x1160 <__fp_splitA+0x1a>
    1144:	47 95       	ror	r20

00001146 <__fp_splitA>:
    1146:	88 0f       	add	r24, r24
    1148:	97 fb       	bst	r25, 7
    114a:	99 1f       	adc	r25, r25
    114c:	61 f0       	breq	.+24     	; 0x1166 <__fp_splitA+0x20>
    114e:	9f 3f       	cpi	r25, 0xFF	; 255
    1150:	79 f0       	breq	.+30     	; 0x1170 <__fp_splitA+0x2a>
    1152:	87 95       	ror	r24
    1154:	08 95       	ret
    1156:	12 16       	cp	r1, r18
    1158:	13 06       	cpc	r1, r19
    115a:	14 06       	cpc	r1, r20
    115c:	55 1f       	adc	r21, r21
    115e:	f2 cf       	rjmp	.-28     	; 0x1144 <__fp_split3+0xe>
    1160:	46 95       	lsr	r20
    1162:	f1 df       	rcall	.-30     	; 0x1146 <__fp_splitA>
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <__fp_splitA+0x30>
    1166:	16 16       	cp	r1, r22
    1168:	17 06       	cpc	r1, r23
    116a:	18 06       	cpc	r1, r24
    116c:	99 1f       	adc	r25, r25
    116e:	f1 cf       	rjmp	.-30     	; 0x1152 <__fp_splitA+0xc>
    1170:	86 95       	lsr	r24
    1172:	71 05       	cpc	r23, r1
    1174:	61 05       	cpc	r22, r1
    1176:	08 94       	sec
    1178:	08 95       	ret

0000117a <__fp_zero>:
    117a:	e8 94       	clt

0000117c <__fp_szero>:
    117c:	bb 27       	eor	r27, r27
    117e:	66 27       	eor	r22, r22
    1180:	77 27       	eor	r23, r23
    1182:	cb 01       	movw	r24, r22
    1184:	97 f9       	bld	r25, 7
    1186:	08 95       	ret

00001188 <__mulsf3>:
    1188:	0b d0       	rcall	.+22     	; 0x11a0 <__mulsf3x>
    118a:	c4 cf       	rjmp	.-120    	; 0x1114 <__fp_round>
    118c:	b5 df       	rcall	.-150    	; 0x10f8 <__fp_pscA>
    118e:	28 f0       	brcs	.+10     	; 0x119a <__mulsf3+0x12>
    1190:	ba df       	rcall	.-140    	; 0x1106 <__fp_pscB>
    1192:	18 f0       	brcs	.+6      	; 0x119a <__mulsf3+0x12>
    1194:	95 23       	and	r25, r21
    1196:	09 f0       	breq	.+2      	; 0x119a <__mulsf3+0x12>
    1198:	a6 cf       	rjmp	.-180    	; 0x10e6 <__fp_inf>
    119a:	ab cf       	rjmp	.-170    	; 0x10f2 <__fp_nan>
    119c:	11 24       	eor	r1, r1
    119e:	ee cf       	rjmp	.-36     	; 0x117c <__fp_szero>

000011a0 <__mulsf3x>:
    11a0:	ca df       	rcall	.-108    	; 0x1136 <__fp_split3>
    11a2:	a0 f3       	brcs	.-24     	; 0x118c <__mulsf3+0x4>

000011a4 <__mulsf3_pse>:
    11a4:	95 9f       	mul	r25, r21
    11a6:	d1 f3       	breq	.-12     	; 0x119c <__mulsf3+0x14>
    11a8:	95 0f       	add	r25, r21
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	55 1f       	adc	r21, r21
    11ae:	62 9f       	mul	r22, r18
    11b0:	f0 01       	movw	r30, r0
    11b2:	72 9f       	mul	r23, r18
    11b4:	bb 27       	eor	r27, r27
    11b6:	f0 0d       	add	r31, r0
    11b8:	b1 1d       	adc	r27, r1
    11ba:	63 9f       	mul	r22, r19
    11bc:	aa 27       	eor	r26, r26
    11be:	f0 0d       	add	r31, r0
    11c0:	b1 1d       	adc	r27, r1
    11c2:	aa 1f       	adc	r26, r26
    11c4:	64 9f       	mul	r22, r20
    11c6:	66 27       	eor	r22, r22
    11c8:	b0 0d       	add	r27, r0
    11ca:	a1 1d       	adc	r26, r1
    11cc:	66 1f       	adc	r22, r22
    11ce:	82 9f       	mul	r24, r18
    11d0:	22 27       	eor	r18, r18
    11d2:	b0 0d       	add	r27, r0
    11d4:	a1 1d       	adc	r26, r1
    11d6:	62 1f       	adc	r22, r18
    11d8:	73 9f       	mul	r23, r19
    11da:	b0 0d       	add	r27, r0
    11dc:	a1 1d       	adc	r26, r1
    11de:	62 1f       	adc	r22, r18
    11e0:	83 9f       	mul	r24, r19
    11e2:	a0 0d       	add	r26, r0
    11e4:	61 1d       	adc	r22, r1
    11e6:	22 1f       	adc	r18, r18
    11e8:	74 9f       	mul	r23, r20
    11ea:	33 27       	eor	r19, r19
    11ec:	a0 0d       	add	r26, r0
    11ee:	61 1d       	adc	r22, r1
    11f0:	23 1f       	adc	r18, r19
    11f2:	84 9f       	mul	r24, r20
    11f4:	60 0d       	add	r22, r0
    11f6:	21 1d       	adc	r18, r1
    11f8:	82 2f       	mov	r24, r18
    11fa:	76 2f       	mov	r23, r22
    11fc:	6a 2f       	mov	r22, r26
    11fe:	11 24       	eor	r1, r1
    1200:	9f 57       	subi	r25, 0x7F	; 127
    1202:	50 40       	sbci	r21, 0x00	; 0
    1204:	8a f0       	brmi	.+34     	; 0x1228 <__mulsf3_pse+0x84>
    1206:	e1 f0       	breq	.+56     	; 0x1240 <__mulsf3_pse+0x9c>
    1208:	88 23       	and	r24, r24
    120a:	4a f0       	brmi	.+18     	; 0x121e <__mulsf3_pse+0x7a>
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	bb 1f       	adc	r27, r27
    1212:	66 1f       	adc	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	88 1f       	adc	r24, r24
    1218:	91 50       	subi	r25, 0x01	; 1
    121a:	50 40       	sbci	r21, 0x00	; 0
    121c:	a9 f7       	brne	.-22     	; 0x1208 <__mulsf3_pse+0x64>
    121e:	9e 3f       	cpi	r25, 0xFE	; 254
    1220:	51 05       	cpc	r21, r1
    1222:	70 f0       	brcs	.+28     	; 0x1240 <__mulsf3_pse+0x9c>
    1224:	60 cf       	rjmp	.-320    	; 0x10e6 <__fp_inf>
    1226:	aa cf       	rjmp	.-172    	; 0x117c <__fp_szero>
    1228:	5f 3f       	cpi	r21, 0xFF	; 255
    122a:	ec f3       	brlt	.-6      	; 0x1226 <__mulsf3_pse+0x82>
    122c:	98 3e       	cpi	r25, 0xE8	; 232
    122e:	dc f3       	brlt	.-10     	; 0x1226 <__mulsf3_pse+0x82>
    1230:	86 95       	lsr	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	b7 95       	ror	r27
    1238:	f7 95       	ror	r31
    123a:	e7 95       	ror	r30
    123c:	9f 5f       	subi	r25, 0xFF	; 255
    123e:	c1 f7       	brne	.-16     	; 0x1230 <__mulsf3_pse+0x8c>
    1240:	fe 2b       	or	r31, r30
    1242:	88 0f       	add	r24, r24
    1244:	91 1d       	adc	r25, r1
    1246:	96 95       	lsr	r25
    1248:	87 95       	ror	r24
    124a:	97 f9       	bld	r25, 7
    124c:	08 95       	ret

0000124e <__itoa_ncheck>:
    124e:	bb 27       	eor	r27, r27
    1250:	4a 30       	cpi	r20, 0x0A	; 10
    1252:	31 f4       	brne	.+12     	; 0x1260 <__itoa_ncheck+0x12>
    1254:	99 23       	and	r25, r25
    1256:	22 f4       	brpl	.+8      	; 0x1260 <__itoa_ncheck+0x12>
    1258:	bd e2       	ldi	r27, 0x2D	; 45
    125a:	90 95       	com	r25
    125c:	81 95       	neg	r24
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <__utoa_common>

00001262 <__utoa_ncheck>:
    1262:	bb 27       	eor	r27, r27

00001264 <__utoa_common>:
    1264:	fb 01       	movw	r30, r22
    1266:	55 27       	eor	r21, r21
    1268:	aa 27       	eor	r26, r26
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	aa 1f       	adc	r26, r26
    1270:	a4 17       	cp	r26, r20
    1272:	10 f0       	brcs	.+4      	; 0x1278 <__utoa_common+0x14>
    1274:	a4 1b       	sub	r26, r20
    1276:	83 95       	inc	r24
    1278:	50 51       	subi	r21, 0x10	; 16
    127a:	b9 f7       	brne	.-18     	; 0x126a <__utoa_common+0x6>
    127c:	a0 5d       	subi	r26, 0xD0	; 208
    127e:	aa 33       	cpi	r26, 0x3A	; 58
    1280:	08 f0       	brcs	.+2      	; 0x1284 <__utoa_common+0x20>
    1282:	a9 5d       	subi	r26, 0xD9	; 217
    1284:	a1 93       	st	Z+, r26
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	79 f7       	brne	.-34     	; 0x1268 <__utoa_common+0x4>
    128a:	b1 11       	cpse	r27, r1
    128c:	b1 93       	st	Z+, r27
    128e:	11 92       	st	Z+, r1
    1290:	cb 01       	movw	r24, r22
    1292:	00 c0       	rjmp	.+0      	; 0x1294 <strrev>

00001294 <strrev>:
    1294:	dc 01       	movw	r26, r24
    1296:	fc 01       	movw	r30, r24
    1298:	67 2f       	mov	r22, r23
    129a:	71 91       	ld	r23, Z+
    129c:	77 23       	and	r23, r23
    129e:	e1 f7       	brne	.-8      	; 0x1298 <strrev+0x4>
    12a0:	32 97       	sbiw	r30, 0x02	; 2
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <strrev+0x18>
    12a4:	7c 91       	ld	r23, X
    12a6:	6d 93       	st	X+, r22
    12a8:	70 83       	st	Z, r23
    12aa:	62 91       	ld	r22, -Z
    12ac:	ae 17       	cp	r26, r30
    12ae:	bf 07       	cpc	r27, r31
    12b0:	c8 f3       	brcs	.-14     	; 0x12a4 <strrev+0x10>
    12b2:	08 95       	ret

000012b4 <_exit>:
    12b4:	f8 94       	cli

000012b6 <__stop_program>:
    12b6:	ff cf       	rjmp	.-2      	; 0x12b6 <__stop_program>
