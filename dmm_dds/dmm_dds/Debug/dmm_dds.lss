
dmm_dds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001504  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004bb  008001a0  008001a0  00001638  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e85  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c02  00000000  00000000  000047cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e23  00000000  00000000  000053cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000083c  00000000  00000000  000071f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000870  00000000  00000000  00007a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000280b  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b8  00000000  00000000  0000aaab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c3       	rjmp	.+1814   	; 0x718 <__ctors_end>
       2:	00 00       	nop
       4:	a6 c3       	rjmp	.+1868   	; 0x752 <__bad_interrupt>
       6:	00 00       	nop
       8:	a4 c3       	rjmp	.+1864   	; 0x752 <__bad_interrupt>
       a:	00 00       	nop
       c:	a2 c3       	rjmp	.+1860   	; 0x752 <__bad_interrupt>
       e:	00 00       	nop
      10:	a0 c3       	rjmp	.+1856   	; 0x752 <__bad_interrupt>
      12:	00 00       	nop
      14:	9e c3       	rjmp	.+1852   	; 0x752 <__bad_interrupt>
      16:	00 00       	nop
      18:	9c c3       	rjmp	.+1848   	; 0x752 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9a c3       	rjmp	.+1844   	; 0x752 <__bad_interrupt>
      1e:	00 00       	nop
      20:	98 c3       	rjmp	.+1840   	; 0x752 <__bad_interrupt>
      22:	00 00       	nop
      24:	0d c7       	rjmp	.+3610   	; 0xe40 <__vector_9>
      26:	00 00       	nop
      28:	94 c3       	rjmp	.+1832   	; 0x752 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	92 c3       	rjmp	.+1828   	; 0x752 <__bad_interrupt>
      2e:	00 00       	nop
      30:	90 c3       	rjmp	.+1824   	; 0x752 <__bad_interrupt>
      32:	00 00       	nop
      34:	8e c3       	rjmp	.+1820   	; 0x752 <__bad_interrupt>
      36:	00 00       	nop
      38:	8c c3       	rjmp	.+1816   	; 0x752 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8a c3       	rjmp	.+1812   	; 0x752 <__bad_interrupt>
      3e:	00 00       	nop
      40:	88 c3       	rjmp	.+1808   	; 0x752 <__bad_interrupt>
      42:	00 00       	nop
      44:	86 c3       	rjmp	.+1804   	; 0x752 <__bad_interrupt>
      46:	00 00       	nop
      48:	84 c3       	rjmp	.+1800   	; 0x752 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	82 c3       	rjmp	.+1796   	; 0x752 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c7       	rjmp	.+3634   	; 0xe84 <__vector_20>
      52:	00 00       	nop
      54:	7e c3       	rjmp	.+1788   	; 0x752 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c7       	rjmp	.+3788   	; 0xf26 <__vector_22>
      5a:	00 00       	nop
      5c:	7a c3       	rjmp	.+1780   	; 0x752 <__bad_interrupt>
      5e:	00 00       	nop
      60:	78 c3       	rjmp	.+1776   	; 0x752 <__bad_interrupt>
      62:	00 00       	nop
      64:	76 c3       	rjmp	.+1772   	; 0x752 <__bad_interrupt>
      66:	00 00       	nop
      68:	74 c3       	rjmp	.+1768   	; 0x752 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	72 c3       	rjmp	.+1764   	; 0x752 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a9 c7       	rjmp	.+3922   	; 0xfc4 <__vector_28>
      72:	00 00       	nop
      74:	6e c3       	rjmp	.+1756   	; 0x752 <__bad_interrupt>
      76:	00 00       	nop
      78:	fa c7       	rjmp	.+4084   	; 0x106e <__vector_30>
      7a:	00 00       	nop
      7c:	6a c3       	rjmp	.+1748   	; 0x752 <__bad_interrupt>
      7e:	00 00       	nop
      80:	68 c3       	rjmp	.+1744   	; 0x752 <__bad_interrupt>
      82:	00 00       	nop
      84:	66 c3       	rjmp	.+1740   	; 0x752 <__bad_interrupt>
      86:	00 00       	nop
      88:	64 c3       	rjmp	.+1736   	; 0x752 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	20 20       	and	r2, r0
      8e:	20 20       	and	r2, r0
      90:	20 20       	and	r2, r0
      92:	4b 48       	sbci	r20, 0x8B	; 139
      94:	7a 00       	.word	0x007a	; ????

00000096 <__c.2280>:
      96:	54 68 65 20 46 72 65 71 75 65 6e 63 65 20 69 73     The Frequence is
      a6:	74 20 20 20 0d 0a 0a 00                             t   ....

000000ae <__c.2247>:
      ae:	74 68 65 20 66 72 65 71 75 65 6e 63 65 0d 0a 00     the frequence...

000000be <__c.2245>:
      be:	77 61 69 74 69 6e 67 20 66 6f 72 0d 0a 20 00        waiting for.. .

000000cd <__c.2228>:
      cd:	4c 69 20 58 75 65 6a 69 6e 67 0d 0a 00              Li Xuejing...

000000da <__c.2226>:
      da:	57 61 6e 67 20 53 68 69 68 61 6e 67 0d 0a 00        Wang Shihang...

000000e9 <__c.2224>:
      e9:	4d 65 6d 62 65 72 73 3a 0d 0a 00                    Members:...

000000f4 <__c.2222>:
      f4:	44 44 53 2d 53 69 67 6e 61 6c 67 65 6e 65 72 61     DDS-Signalgenera
     104:	74 6f 72 0d 0a 00                                   tor...

0000010a <__c.2220>:
     10a:	50 72 6f 6a 65 63 74 20 30 34 3a 0d 0a 00           Project 04:...

00000118 <font>:
     118:	00 00 00 00 00 00 00 3e 45 51 45 3e 00 3e 6b 6f     .......>EQE>.>ko
     128:	6b 3e 00 1c 3e 7c 3e 1c 00 18 3c 7e 3c 18 00 30     k>..>|>...<~<..0
     138:	36 7f 36 30 00 18 5c 7e 5c 18 00 00 00 00 00 00     6.60..\~\.......
	...
     158:	00 00 00 30 48 4a 36 0e 00 06 29 79 29 06 00 00     ...0HJ6...)y)...
     168:	00 00 00 00 00 60 7e 0a 35 3f 00 2a 1c 36 1c 2a     .....`~.5?.*.6.*
     178:	00 00 7f 3e 1c 08 00 08 1c 3e 7f 00 00 14 36 7f     ...>.....>....6.
     188:	36 14 00 00 5f 00 5f 00 00 06 09 7f 01 7f 00 22     6..._._........"
     198:	4d 55 59 22 00 60 60 60 60 00 00 14 b6 ff b6 14     MUY".````.......
     1a8:	00 04 06 7f 06 04 00 10 30 7f 30 10 00 08 08 3e     ........0.0....>
     1b8:	1c 08 00 08 1c 3e 08 08 00 78 40 40 40 40 00 08     .....>...x@@@@..
     1c8:	3e 08 3e 08 00 30 3c 3f 3c 30 00 03 0f 3f 0f 03     >.>..0<?<0...?..
	...
     1e0:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     1f0:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     200:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     210:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     220:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     230:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     240:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     250:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     260:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     270:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     280:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     290:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     2a0:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     2b0:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     2c0:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     2d0:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     2e0:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     2f0:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     300:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     310:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     320:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     330:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     340:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     350:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     360:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     370:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     380:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     390:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     3a0:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     3b0:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     3c0:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     3d0:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     3e0:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     3f0:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     400:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     410:	01 00 00 3c 26 23 26 3c 00 1e a1 e1 21 12 00 3d     ...<&#&<....!..=
     420:	40 20 7d 00 00 38 54 54 55 09 00 20 55 55 55 78     @ }..8TTU.. UUUx
     430:	00 20 55 54 55 78 00 20 55 55 54 78 00 20 57 55     . UTUx. UUTx. WU
     440:	57 78 00 1c a2 e2 22 14 00 38 55 55 55 08 00 38     Wx...."..8UUU..8
     450:	55 54 55 08 00 38 55 55 54 08 00 00 01 7c 41 00     UTU..8UUT....|A.
     460:	00 00 01 7d 41 00 00 00 01 7c 40 00 00 70 29 24     ...}A....|@..p)$
     470:	29 70 00 78 2f 25 2f 78 00 7c 54 54 55 45 00 34     )p.x/%/x.|TTUE.4
     480:	54 7c 54 58 00 7e 09 7f 49 49 00 38 45 45 39 00     T|TX.~..II.8EE9.
     490:	00 38 45 44 39 00 00 39 45 44 38 00 00 3c 41 21     .8ED9..9ED8..<A!
     4a0:	7d 00 00 3d 41 20 7c 00 00 9c a1 60 3d 00 00 3d     }..=A |....`=..=
     4b0:	42 42 3d 00 00 3c 41 40 3d 00 80 70 68 58 38 04     BB=..<A@=..phX8.
     4c0:	00 48 3e 49 49 62 00 7e 61 5d 43 3f 00 22 14 08     .H>IIb.~a]C?."..
     4d0:	14 22 00 40 88 7e 09 02 00 20 54 55 55 78 00 00     .".@.~... TUUx..
     4e0:	00 7d 41 00 00 38 44 45 39 00 00 3c 40 21 7d 00     .}A..8DE9..<@!}.
     4f0:	00 7a 09 0a 71 00 00 7a 11 22 79 00 00 08 55 55     .z..q..z."y...UU
     500:	55 5e 00 4e 51 51 4e 00 00 30 48 4d 40 20 3e 41     U^.NQQN..0HM@ >A
     510:	5d 4b 55 3e 04 04 04 04 04 1c 00 17 08 4c 6a 50     ]KU>.........LjP
     520:	00 17 08 34 2a 78 00 00 30 7d 30 00 00 08 14 00     ...4*x..0}0.....
     530:	08 14 00 14 08 00 14 08 44 11 44 11 44 11 aa 55     ........D.D.D..U
     540:	aa 55 aa 55 bb ee bb ee bb ee 00 00 00 ff 00 00     .U.U............
     550:	08 08 08 ff 00 00 00 70 28 25 29 70 00 70 29 25     .......p(%)p.p)%
     560:	29 70 00 70 29 25 28 70 3e 41 5d 55 41 3e 0a fb     )p.p)%(p>A]UA>..
     570:	00 ff 00 00 00 ff 00 ff 00 00 0a fa 02 fe 00 00     ................
     580:	0a 0b 08 0f 00 00 00 18 24 66 24 00 00 29 2a 7c     ........$f$..)*|
     590:	2a 29 08 08 08 f8 00 00 00 00 00 0f 08 08 08 08     *)..............
     5a0:	08 0f 08 08 08 08 08 f8 08 08 00 00 00 ff 08 08     ................
     5b0:	08 08 08 08 08 08 08 08 08 ff 08 08 00 20 56 55     ............. VU
     5c0:	56 79 00 70 2a 25 2a 71 00 0f 08 0b 0a 0a 00 fe     Vy.p*%*q........
     5d0:	02 fa 0a 0a 0a 0b 08 0b 0a 0a 0a fa 02 fa 0a 0a     ................
     5e0:	00 ff 00 fb 0a 0a 0a 0a 0a 0a 0a 0a 0a fb 00 fb     ................
     5f0:	0a 0a 00 5d 22 22 22 5d 00 22 55 59 30 00 00 08     ...]"""]."UY0...
     600:	7f 49 41 3e 00 7c 55 55 55 44 00 7c 55 54 55 44     .IA>.|UUUD.|UTUD
     610:	00 7c 55 55 54 44 00 00 00 07 00 00 00 00 44 7d     .|UUTD........D}
     620:	45 00 00 00 45 7d 45 00 00 00 45 7c 45 00 08 08     E...E}E...E|E...
     630:	08 0f 00 00 00 00 00 f8 08 08 ff ff ff ff ff ff     ................
     640:	f0 f0 f0 f0 f0 f0 00 00 00 77 00 00 00 00 45 7d     .........w....E}
     650:	44 00 0f 0f 0f 0f 0f 0f 00 3c 42 43 3d 00 00 fe     D........<BC=...
     660:	4a 4a 34 00 00 3c 43 43 3d 00 00 3d 43 42 3c 00     JJ4..<CC=..=CB<.
     670:	00 32 49 4a 31 00 00 3a 45 46 39 00 00 fc 20 20     .2IJ1..:EF9...  
     680:	1c 00 00 fe aa 28 10 00 00 ff a5 24 18 00 00 3c     .....(.....$...<
     690:	40 41 3d 00 00 3c 41 41 3d 00 00 3d 41 40 3c 00     @A=..<AA=..=A@<.
     6a0:	00 9c a0 61 3d 00 00 04 08 71 09 04 00 00 02 02     ...a=....q......
     6b0:	02 00 00 00 07 03 00 00 00 00 08 08 08 00 00 00     ................
     6c0:	24 2e 24 00 00 24 24 24 24 24 05 17 0a 34 2a 78     $.$..$$$$$...4*x
     6d0:	00 06 09 7f 01 7f 00 22 4d 55 59 22 00 08 08 2a     ......."MUY"...*
     6e0:	08 08 00 00 08 18 18 00 00 06 09 09 06 00 00 00     ................
     6f0:	08 00 08 00 00 00 08 00 00 00 00 02 0f 00 00 00     ................
     700:	00 09 0f 05 00 00 00 09 0d 0a 00 00 00 3c 3c 3c     .............<<<
     710:	3c 00 00 00 00 00 00 00                             <.......

00000718 <__ctors_end>:
     718:	11 24       	eor	r1, r1
     71a:	1f be       	out	0x3f, r1	; 63
     71c:	cf ef       	ldi	r28, 0xFF	; 255
     71e:	d0 e4       	ldi	r29, 0x40	; 64
     720:	de bf       	out	0x3e, r29	; 62
     722:	cd bf       	out	0x3d, r28	; 61

00000724 <__do_copy_data>:
     724:	11 e0       	ldi	r17, 0x01	; 1
     726:	a0 e0       	ldi	r26, 0x00	; 0
     728:	b1 e0       	ldi	r27, 0x01	; 1
     72a:	e4 e0       	ldi	r30, 0x04	; 4
     72c:	f5 e1       	ldi	r31, 0x15	; 21
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	0b bf       	out	0x3b, r16	; 59
     732:	02 c0       	rjmp	.+4      	; 0x738 <__do_copy_data+0x14>
     734:	07 90       	elpm	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	a0 3a       	cpi	r26, 0xA0	; 160
     73a:	b1 07       	cpc	r27, r17
     73c:	d9 f7       	brne	.-10     	; 0x734 <__do_copy_data+0x10>

0000073e <__do_clear_bss>:
     73e:	26 e0       	ldi	r18, 0x06	; 6
     740:	a0 ea       	ldi	r26, 0xA0	; 160
     742:	b1 e0       	ldi	r27, 0x01	; 1
     744:	01 c0       	rjmp	.+2      	; 0x748 <.do_clear_bss_start>

00000746 <.do_clear_bss_loop>:
     746:	1d 92       	st	X+, r1

00000748 <.do_clear_bss_start>:
     748:	ab 35       	cpi	r26, 0x5B	; 91
     74a:	b2 07       	cpc	r27, r18
     74c:	e1 f7       	brne	.-8      	; 0x746 <.do_clear_bss_loop>
     74e:	3f d1       	rcall	.+638    	; 0x9ce <main>
     750:	d7 c6       	rjmp	.+3502   	; 0x1500 <_exit>

00000752 <__bad_interrupt>:
     752:	56 cc       	rjmp	.-1876   	; 0x0 <__vectors>

00000754 <start>:
	}
}

void start ()
{
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);
     754:	85 e1       	ldi	r24, 0x15	; 21
     756:	e1 d2       	rcall	.+1474   	; 0xd1a <Backlight_LED>
	LCD_PutString_P(PSTR("Project 04:\r\n"));
     758:	8a e0       	ldi	r24, 0x0A	; 10
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	93 d2       	rcall	.+1318   	; 0xc84 <LCD_PutString_P>
	LCD_PutString_P(PSTR("DDS-Signalgenerator\r\n"));
     75e:	84 ef       	ldi	r24, 0xF4	; 244
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	90 d2       	rcall	.+1312   	; 0xc84 <LCD_PutString_P>
	LCD_PutString_P(PSTR("Members:\r\n"));
     764:	89 ee       	ldi	r24, 0xE9	; 233
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	8d d2       	rcall	.+1306   	; 0xc84 <LCD_PutString_P>
	LCD_PutString_P(PSTR("Wang Shihang\r\n"));
     76a:	8a ed       	ldi	r24, 0xDA	; 218
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	8a d2       	rcall	.+1300   	; 0xc84 <LCD_PutString_P>
	LCD_PutString_P(PSTR("Li Xuejing\r\n"));
     770:	8d ec       	ldi	r24, 0xCD	; 205
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	87 d2       	rcall	.+1294   	; 0xc84 <LCD_PutString_P>

	LCD_Update();
     776:	ca d1       	rcall	.+916    	; 0xb0c <LCD_Update>
	wait_joy_button();
     778:	67 e0       	ldi	r22, 0x07	; 7
     77a:	84 e1       	ldi	r24, 0x14	; 20
     77c:	94 d2       	rcall	.+1320   	; 0xca6 <LCD_GotoXY>
     77e:	80 e1       	ldi	r24, 0x10	; 16
     780:	23 d2       	rcall	.+1094   	; 0xbc8 <LCD_PutChar>
     782:	c4 d1       	rcall	.+904    	; 0xb0c <LCD_Update>
     784:	03 99       	sbic	0x00, 3	; 0
     786:	fe cf       	rjmp	.-4      	; 0x784 <start+0x30>
     788:	03 9b       	sbis	0x00, 3	; 0
     78a:	fe cf       	rjmp	.-4      	; 0x788 <start+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     78c:	2f ef       	ldi	r18, 0xFF	; 255
     78e:	89 ef       	ldi	r24, 0xF9	; 249
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	21 50       	subi	r18, 0x01	; 1
     794:	80 40       	sbci	r24, 0x00	; 0
     796:	90 40       	sbci	r25, 0x00	; 0
     798:	e1 f7       	brne	.-8      	; 0x792 <start+0x3e>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <start+0x48>
     79c:	00 00       	nop
     79e:	03 99       	sbic	0x00, 3	; 0
     7a0:	fe cf       	rjmp	.-4      	; 0x79e <start+0x4a>
}
     7a2:	08 95       	ret

000007a4 <AD9850_setup>:

void AD9850_setup()
{
	DDRC |= ((1<<DATA)|(1<<WCLK)|(1<<FQUP)|(1<<RESET));		//???AD9850?????????
     7a4:	87 b1       	in	r24, 0x07	; 7
     7a6:	8c 63       	ori	r24, 0x3C	; 60
     7a8:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~((1<<DATA)|(1<<WCLK)|(1<<FQUP)|(1<<RESET));	//????????????
     7aa:	88 b1       	in	r24, 0x08	; 8
     7ac:	83 7c       	andi	r24, 0xC3	; 195
     7ae:	88 b9       	out	0x08, r24	; 8
     7b0:	08 95       	ret

000007b2 <AD9850_reset>:
}

void AD9850_reset()
{
	PORTC &= ~((1<<WCLK)|(1<<FQUP));
     7b2:	88 b1       	in	r24, 0x08	; 8
     7b4:	87 7e       	andi	r24, 0xE7	; 231
     7b6:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1<<RESET);									//pulse RESET
     7b8:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ba:	8a e1       	ldi	r24, 0x1A	; 26
     7bc:	8a 95       	dec	r24
     7be:	f1 f7       	brne	.-4      	; 0x7bc <AD9850_reset+0xa>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <AD9850_reset+0x10>
	_delay_us(5);
	PORTC |= (1<<RESET);
     7c2:	42 9a       	sbi	0x08, 2	; 8
     7c4:	8a e1       	ldi	r24, 0x1A	; 26
     7c6:	8a 95       	dec	r24
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <AD9850_reset+0x14>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <AD9850_reset+0x1a>
	_delay_us(5);
	PORTC &= ~(1<<RESET);
     7cc:	42 98       	cbi	0x08, 2	; 8
     7ce:	8a e1       	ldi	r24, 0x1A	; 26
     7d0:	8a 95       	dec	r24
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <AD9850_reset+0x1e>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <AD9850_reset+0x24>
	_delay_us(5);

	PORTC &= ~(1<<WCLK);									//pulse WCLK
     7d6:	44 98       	cbi	0x08, 4	; 8
     7d8:	8a e1       	ldi	r24, 0x1A	; 26
     7da:	8a 95       	dec	r24
     7dc:	f1 f7       	brne	.-4      	; 0x7da <AD9850_reset+0x28>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <AD9850_reset+0x2e>
	_delay_us(5);
	PORTC |= (1<<WCLK);
     7e0:	44 9a       	sbi	0x08, 4	; 8
     7e2:	8a e1       	ldi	r24, 0x1A	; 26
     7e4:	8a 95       	dec	r24
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <AD9850_reset+0x32>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <AD9850_reset+0x38>
	_delay_us(5);
	PORTC &= ~(1<<WCLK);
     7ea:	44 98       	cbi	0x08, 4	; 8
     7ec:	8a e1       	ldi	r24, 0x1A	; 26
     7ee:	8a 95       	dec	r24
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <AD9850_reset+0x3c>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <AD9850_reset+0x42>
	_delay_us(5);

	PORTC &= ~(1<<DATA);									//make sure DATA pin is LOW
     7f4:	45 98       	cbi	0x08, 5	; 8

	PORTC &= ~(1<<FQUP);									//pulse FQUP
     7f6:	43 98       	cbi	0x08, 3	; 8
     7f8:	8a e1       	ldi	r24, 0x1A	; 26
     7fa:	8a 95       	dec	r24
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <AD9850_reset+0x48>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <AD9850_reset+0x4e>
	_delay_us(5);
	PORTC |= (1<<FQUP);
     800:	43 9a       	sbi	0x08, 3	; 8
     802:	8a e1       	ldi	r24, 0x1A	; 26
     804:	8a 95       	dec	r24
     806:	f1 f7       	brne	.-4      	; 0x804 <AD9850_reset+0x52>
     808:	00 c0       	rjmp	.+0      	; 0x80a <AD9850_reset+0x58>
	_delay_us(5);
	PORTC &= ~(1<<FQUP);
     80a:	43 98       	cbi	0x08, 3	; 8
     80c:	8a e1       	ldi	r24, 0x1A	; 26
     80e:	8a 95       	dec	r24
     810:	f1 f7       	brne	.-4      	; 0x80e <AD9850_reset+0x5c>
     812:	00 c0       	rjmp	.+0      	; 0x814 <AD9850_reset+0x62>
     814:	08 95       	ret

00000816 <get_frequence>:
void get_frequence()
{
   // uart_init1();
    //uart_init0();
	
	LCD_Clear();
     816:	c2 d1       	rcall	.+900    	; 0xb9c <LCD_Clear>
	LCD_GotoXY(0,0);
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	44 d2       	rcall	.+1160   	; 0xca6 <LCD_GotoXY>
	LCD_PutString_P(PSTR("waiting for\r\n "));
     81e:	8e eb       	ldi	r24, 0xBE	; 190
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	30 d2       	rcall	.+1120   	; 0xc84 <LCD_PutString_P>
	LCD_PutString_P(PSTR("the frequence\r\n"));
     824:	8e ea       	ldi	r24, 0xAE	; 174
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	2d d2       	rcall	.+1114   	; 0xc84 <LCD_PutString_P>
	LCD_GotoXY(20,7);
     82a:	67 e0       	ldi	r22, 0x07	; 7
     82c:	84 e1       	ldi	r24, 0x14	; 20
     82e:	3b d2       	rcall	.+1142   	; 0xca6 <LCD_GotoXY>
    LCD_PutChar(0x10);
     830:	80 e1       	ldi	r24, 0x10	; 16
     832:	ca d1       	rcall	.+916    	; 0xbc8 <LCD_PutChar>
	LCD_Update();
     834:	6b d1       	rcall	.+726    	; 0xb0c <LCD_Update>

    sei();
     836:	78 94       	sei
    while(1)
    {
		//uart0_tx_frame();
        if(data_ok == 1)
     838:	80 91 ba 01 	lds	r24, 0x01BA
     83c:	81 30       	cpi	r24, 0x01	; 1
     83e:	e1 f7       	brne	.-8      	; 0x838 <get_frequence+0x22>
        {
			
			
			data1 = (uint16_t)(data_frame_in[0] << 8);
     840:	80 91 bb 05 	lds	r24, 0x05BB
			data1 += (uint16_t)(data_frame_in[1]);
     844:	20 91 bc 05 	lds	r18, 0x05BC
		//uart0_tx_frame();
        if(data_ok == 1)
        {
			
			
			data1 = (uint16_t)(data_frame_in[0] << 8);
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	98 2f       	mov	r25, r24
     84c:	88 27       	eor	r24, r24
			data1 += (uint16_t)(data_frame_in[1]);
     84e:	82 0f       	add	r24, r18
     850:	91 1d       	adc	r25, r1
     852:	90 93 a3 01 	sts	0x01A3, r25
     856:	80 93 a2 01 	sts	0x01A2, r24
			data2 = (uint16_t)(data_frame_in[2] << 8);
     85a:	20 91 bd 05 	lds	r18, 0x05BD
			data2 += (uint16_t) data_frame_in[3]; // 32bit Variable mit daten drin
     85e:	40 91 be 05 	lds	r20, 0x05BE
        {
			
			
			data1 = (uint16_t)(data_frame_in[0] << 8);
			data1 += (uint16_t)(data_frame_in[1]);
			data2 = (uint16_t)(data_frame_in[2] << 8);
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	32 2f       	mov	r19, r18
     866:	22 27       	eor	r18, r18
			data2 += (uint16_t) data_frame_in[3]; // 32bit Variable mit daten drin
     868:	24 0f       	add	r18, r20
     86a:	31 1d       	adc	r19, r1
     86c:	30 93 a1 01 	sts	0x01A1, r19
     870:	20 93 a0 01 	sts	0x01A0, r18

			AD_freq = data1;
     874:	a0 e0       	ldi	r26, 0x00	; 0
     876:	b0 e0       	ldi	r27, 0x00	; 0
			AD_freq <<= 16;
     878:	dc 01       	movw	r26, r24
     87a:	99 27       	eor	r25, r25
     87c:	88 27       	eor	r24, r24
			AD_freq += data2;
     87e:	82 0f       	add	r24, r18
     880:	93 1f       	adc	r25, r19
     882:	a1 1d       	adc	r26, r1
     884:	b1 1d       	adc	r27, r1
     886:	80 93 a4 01 	sts	0x01A4, r24
     88a:	90 93 a5 01 	sts	0x01A5, r25
     88e:	a0 93 a6 01 	sts	0x01A6, r26
     892:	b0 93 a7 01 	sts	0x01A7, r27
			
			
			uart1_tx_frame(3);
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	52 d4       	rcall	.+2212   	; 0x1140 <uart1_tx_frame>
			data_ok = 0;
     89c:	10 92 ba 01 	sts	0x01BA, r1
     8a0:	08 95       	ret

000008a2 <AD9850_Setfrequency>:
void AD9850_Setfrequency(double freq)
{
	int i;
	double x;
	x =  pow(2,32)/125000;
	freq = freq/1000;
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	4a e7       	ldi	r20, 0x7A	; 122
     8a8:	54 e4       	ldi	r21, 0x44	; 68
     8aa:	50 d4       	rcall	.+2208   	; 0x114c <__divsf3>
	uint32_t tuning_word = freq * x;
     8ac:	2d eb       	ldi	r18, 0xBD	; 189
     8ae:	37 e3       	ldi	r19, 0x37	; 55
     8b0:	46 e0       	ldi	r20, 0x06	; 6
     8b2:	57 e4       	ldi	r21, 0x47	; 71
     8b4:	6d d5       	rcall	.+2778   	; 0x1390 <__mulsf3>
     8b6:	b2 d4       	rcall	.+2404   	; 0x121c <__fixunssfsi>
	PORTC &= ~(1<<FQUP);
     8b8:	43 98       	cbi	0x08, 3	; 8

	//write W0
	uint8_t W0 = tuning_word;
     8ba:	28 e0       	ldi	r18, 0x08	; 8
     8bc:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W0&0x01)
     8be:	60 ff       	sbrs	r22, 0
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <AD9850_Setfrequency+0x24>
		{
			PORTC |= (1<<DATA);
     8c2:	45 9a       	sbi	0x08, 5	; 8
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <AD9850_Setfrequency+0x26>
		}
		else
		{
			PORTC &= ~(1<<DATA);
     8c6:	45 98       	cbi	0x08, 5	; 8
		}
		PORTC |= (1<<WCLK);
     8c8:	44 9a       	sbi	0x08, 4	; 8
		PORTC &= ~(1<<WCLK);
     8ca:	44 98       	cbi	0x08, 4	; 8
		W0 = W0>>1;
     8cc:	66 95       	lsr	r22
     8ce:	21 50       	subi	r18, 0x01	; 1
     8d0:	31 09       	sbc	r19, r1
	uint32_t tuning_word = freq * x;
	PORTC &= ~(1<<FQUP);

	//write W0
	uint8_t W0 = tuning_word;
	for(i=0; i<8; i++ )
     8d2:	21 15       	cp	r18, r1
     8d4:	31 05       	cpc	r19, r1
     8d6:	99 f7       	brne	.-26     	; 0x8be <AD9850_Setfrequency+0x1c>
		PORTC &= ~(1<<WCLK);
		W0 = W0>>1;
	}

	//write W1
	uint8_t W1 = tuning_word>>8;
     8d8:	28 e0       	ldi	r18, 0x08	; 8
     8da:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W1&0x01)
     8dc:	70 ff       	sbrs	r23, 0
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <AD9850_Setfrequency+0x42>
		{
			PORTC |= (1<<DATA);
     8e0:	45 9a       	sbi	0x08, 5	; 8
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <AD9850_Setfrequency+0x44>
		}
		else
		{
			PORTC &= ~(1<<DATA);
     8e4:	45 98       	cbi	0x08, 5	; 8
		}
		PORTC |= (1<<WCLK);
     8e6:	44 9a       	sbi	0x08, 4	; 8
		PORTC &= ~(1<<WCLK);
     8e8:	44 98       	cbi	0x08, 4	; 8
		W1 = W1>>1;
     8ea:	76 95       	lsr	r23
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	31 09       	sbc	r19, r1
		W0 = W0>>1;
	}

	//write W1
	uint8_t W1 = tuning_word>>8;
	for(i=0; i<8; i++ )
     8f0:	21 15       	cp	r18, r1
     8f2:	31 05       	cpc	r19, r1
     8f4:	99 f7       	brne	.-26     	; 0x8dc <AD9850_Setfrequency+0x3a>
		PORTC &= ~(1<<WCLK);
		W1 = W1>>1;
	}

	//write W2
	uint8_t W2 = tuning_word>>16;
     8f6:	28 e0       	ldi	r18, 0x08	; 8
     8f8:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W2&0x01)
     8fa:	80 ff       	sbrs	r24, 0
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <AD9850_Setfrequency+0x60>
		{
			PORTC |= (1<<DATA);
     8fe:	45 9a       	sbi	0x08, 5	; 8
     900:	01 c0       	rjmp	.+2      	; 0x904 <AD9850_Setfrequency+0x62>
		}
		else
		{
			PORTC &= ~(1<<DATA);
     902:	45 98       	cbi	0x08, 5	; 8
		}
		PORTC |= (1<<WCLK);
     904:	44 9a       	sbi	0x08, 4	; 8
		PORTC &= ~(1<<WCLK);
     906:	44 98       	cbi	0x08, 4	; 8
		W2 = W2>>2;
     908:	86 95       	lsr	r24
     90a:	86 95       	lsr	r24
     90c:	21 50       	subi	r18, 0x01	; 1
     90e:	31 09       	sbc	r19, r1
		W1 = W1>>1;
	}

	//write W2
	uint8_t W2 = tuning_word>>16;
	for(i=0; i<8; i++ )
     910:	21 15       	cp	r18, r1
     912:	31 05       	cpc	r19, r1
     914:	91 f7       	brne	.-28     	; 0x8fa <AD9850_Setfrequency+0x58>
		PORTC &= ~(1<<WCLK);
		W2 = W2>>2;
	}

	//write W3
	uint8_t W3 = tuning_word>>24;
     916:	29 2f       	mov	r18, r25
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W3&0x01)
     91c:	20 ff       	sbrs	r18, 0
     91e:	02 c0       	rjmp	.+4      	; 0x924 <AD9850_Setfrequency+0x82>
		{
			PORTC |= (1<<DATA);
     920:	45 9a       	sbi	0x08, 5	; 8
     922:	01 c0       	rjmp	.+2      	; 0x926 <AD9850_Setfrequency+0x84>
		}
		else
		{
			PORTC &= ~(1<<DATA);
     924:	45 98       	cbi	0x08, 5	; 8
		}
		PORTC |= (1<<WCLK);
     926:	44 9a       	sbi	0x08, 4	; 8
		PORTC &= ~(1<<WCLK);
     928:	44 98       	cbi	0x08, 4	; 8
		W3 = W3>>1;
     92a:	26 95       	lsr	r18
     92c:	01 97       	sbiw	r24, 0x01	; 1
		W2 = W2>>2;
	}

	//write W3
	uint8_t W3 = tuning_word>>24;
	for(i=0; i<8; i++ )
     92e:	00 97       	sbiw	r24, 0x00	; 0
     930:	a9 f7       	brne	.-22     	; 0x91c <AD9850_Setfrequency+0x7a>
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	90 e0       	ldi	r25, 0x00	; 0

	//write W4
	uint8_t W4 = 0x00;
	for(i=0; i<8; i++ )
	{
		PORTC &= ~(1<<DATA);
     936:	45 98       	cbi	0x08, 5	; 8
		PORTC |= (1<<WCLK);
     938:	44 9a       	sbi	0x08, 4	; 8
		PORTC &= ~(1<<WCLK);
     93a:	44 98       	cbi	0x08, 4	; 8
     93c:	01 97       	sbiw	r24, 0x01	; 1
		W3 = W3>>1;
	}

	//write W4
	uint8_t W4 = 0x00;
	for(i=0; i<8; i++ )
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	d1 f7       	brne	.-12     	; 0x936 <AD9850_Setfrequency+0x94>
		PORTC |= (1<<WCLK);
		PORTC &= ~(1<<WCLK);
		W4 = W4>>1;
	}

	PORTC |= (1<<FQUP);
     942:	43 9a       	sbi	0x08, 3	; 8
     944:	8a e1       	ldi	r24, 0x1A	; 26
     946:	8a 95       	dec	r24
     948:	f1 f7       	brne	.-4      	; 0x946 <AD9850_Setfrequency+0xa4>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <AD9850_Setfrequency+0xaa>
	_delay_us(5);
	PORTC &= ~(1<<FQUP);
     94c:	43 98       	cbi	0x08, 3	; 8
     94e:	08 95       	ret

00000950 <frequence_display>:
}

void frequence_display()
{
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	a0 97       	sbiw	r28, 0x20	; 32
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
	char getfrequency_buffer[32];
	LCD_Clear();
     964:	1b d1       	rcall	.+566    	; 0xb9c <LCD_Clear>
	Backlight_LED(BL_BLUE_ON);
     966:	80 e1       	ldi	r24, 0x10	; 16
     968:	d8 d1       	rcall	.+944    	; 0xd1a <Backlight_LED>
	// initialize adc and lcd

	LCD_GotoXY(0,0);
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	9b d1       	rcall	.+822    	; 0xca6 <LCD_GotoXY>
	// display the labels on LCD
	LCD_PutString_P(PSTR("The Frequence ist   \r\n\n"));
     970:	86 e9       	ldi	r24, 0x96	; 150
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	87 d1       	rcall	.+782    	; 0xc84 <LCD_PutString_P>
	itoa(((uint32_t)AD_freq/1000), getfrequency_buffer, 10);
     976:	60 91 a4 01 	lds	r22, 0x01A4
     97a:	70 91 a5 01 	lds	r23, 0x01A5
     97e:	80 91 a6 01 	lds	r24, 0x01A6
     982:	90 91 a7 01 	lds	r25, 0x01A7
     986:	28 ee       	ldi	r18, 0xE8	; 232
     988:	33 e0       	ldi	r19, 0x03	; 3
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	63 d5       	rcall	.+2758   	; 0x1456 <__udivmodsi4>
     990:	da 01       	movw	r26, r20
     992:	c9 01       	movw	r24, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     994:	4a e0       	ldi	r20, 0x0A	; 10
     996:	be 01       	movw	r22, r28
     998:	6f 5f       	subi	r22, 0xFF	; 255
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	7e d5       	rcall	.+2812   	; 0x149a <__itoa_ncheck>
	//sprintf(getfrequency_buffer,"%0i; %0i; %0i; %0i",data_frame_in[0],data_frame_in[1],data_frame_in[2],data_frame_in[3]);
	LCD_PutString(getfrequency_buffer);
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	62 d1       	rcall	.+708    	; 0xc68 <LCD_PutString>
	LCD_PutString_P(PSTR("      KHz"));
     9a4:	8c e8       	ldi	r24, 0x8C	; 140
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	6d d1       	rcall	.+730    	; 0xc84 <LCD_PutString_P>
	LCD_PutChar(0x10);
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	0d d1       	rcall	.+538    	; 0xbc8 <LCD_PutChar>
	LCD_Update();
     9ae:	ae d0       	rcall	.+348    	; 0xb0c <LCD_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b0:	8f e3       	ldi	r24, 0x3F	; 63
     9b2:	9c e9       	ldi	r25, 0x9C	; 156
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <frequence_display+0x64>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <frequence_display+0x6a>
     9ba:	00 00       	nop
	_delay_ms(10);
}
     9bc:	a0 96       	adiw	r28, 0x20	; 32
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <main>:


int main(void)
{
	// set PA3-PA7 as input and activated internal Pull-Up
	DDRA &= ~((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     9ce:	81 b1       	in	r24, 0x01	; 1
     9d0:	87 70       	andi	r24, 0x07	; 7
     9d2:	81 b9       	out	0x01, r24	; 1
	PORTA |= ((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     9d4:	82 b1       	in	r24, 0x02	; 2
     9d6:	88 6f       	ori	r24, 0xF8	; 248
     9d8:	82 b9       	out	0x02, r24	; 2

	// set PB0-PB3 as output
	DDRB = 0x0F;
     9da:	8f e0       	ldi	r24, 0x0F	; 15
     9dc:	84 b9       	out	0x04, r24	; 4
	// set PB0-PB3 on high-level
	PORTB |= 0x0F;		// Required for DMM Board DMM Board 2013
     9de:	85 b1       	in	r24, 0x05	; 5
     9e0:	8f 60       	ori	r24, 0x0F	; 15
     9e2:	85 b9       	out	0x05, r24	; 5

	void(*get_frequence_p)(void) = get_frequence;			//define a function pointer, point to function get_frequence

	LCD_Init();
     9e4:	76 d1       	rcall	.+748    	; 0xcd2 <LCD_Init>
    uart_init1();
     9e6:	92 d3       	rcall	.+1828   	; 0x110c <uart_init1>
	start ();
     9e8:	b5 de       	rcall	.-662    	; 0x754 <start>

	AD9850_setup();
     9ea:	dc de       	rcall	.-584    	; 0x7a4 <AD9850_setup>
	AD9850_reset();
     9ec:	e2 de       	rcall	.-572    	; 0x7b2 <AD9850_reset>

	get_frequence();
     9ee:	13 df       	rcall	.-474    	; 0x816 <get_frequence>

	for(;;)
	{
		if(~PINA&(1<<PINA7))
     9f0:	07 99       	sbic	0x00, 7	; 0
     9f2:	14 c0       	rjmp	.+40     	; 0xa1c <main+0x4e>
			AD_freq +=1000000;
     9f4:	80 91 a4 01 	lds	r24, 0x01A4
     9f8:	90 91 a5 01 	lds	r25, 0x01A5
     9fc:	a0 91 a6 01 	lds	r26, 0x01A6
     a00:	b0 91 a7 01 	lds	r27, 0x01A7
     a04:	80 5c       	subi	r24, 0xC0	; 192
     a06:	9d 4b       	sbci	r25, 0xBD	; 189
     a08:	a0 4f       	sbci	r26, 0xF0	; 240
     a0a:	bf 4f       	sbci	r27, 0xFF	; 255
     a0c:	80 93 a4 01 	sts	0x01A4, r24
     a10:	90 93 a5 01 	sts	0x01A5, r25
     a14:	a0 93 a6 01 	sts	0x01A6, r26
     a18:	b0 93 a7 01 	sts	0x01A7, r27
     a1c:	2f ef       	ldi	r18, 0xFF	; 255
     a1e:	81 ee       	ldi	r24, 0xE1	; 225
     a20:	94 e0       	ldi	r25, 0x04	; 4
     a22:	21 50       	subi	r18, 0x01	; 1
     a24:	80 40       	sbci	r24, 0x00	; 0
     a26:	90 40       	sbci	r25, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <main+0x54>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <main+0x5e>
     a2c:	00 00       	nop
			_delay_ms(100);

		if (~PINA&(1<<PINA6))
     a2e:	06 99       	sbic	0x00, 6	; 0
     a30:	14 c0       	rjmp	.+40     	; 0xa5a <main+0x8c>
			AD_freq -=1000000;
     a32:	80 91 a4 01 	lds	r24, 0x01A4
     a36:	90 91 a5 01 	lds	r25, 0x01A5
     a3a:	a0 91 a6 01 	lds	r26, 0x01A6
     a3e:	b0 91 a7 01 	lds	r27, 0x01A7
     a42:	80 54       	subi	r24, 0x40	; 64
     a44:	92 44       	sbci	r25, 0x42	; 66
     a46:	af 40       	sbci	r26, 0x0F	; 15
     a48:	b1 09       	sbc	r27, r1
     a4a:	80 93 a4 01 	sts	0x01A4, r24
     a4e:	90 93 a5 01 	sts	0x01A5, r25
     a52:	a0 93 a6 01 	sts	0x01A6, r26
     a56:	b0 93 a7 01 	sts	0x01A7, r27
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	81 ee       	ldi	r24, 0xE1	; 225
     a5e:	94 e0       	ldi	r25, 0x04	; 4
     a60:	21 50       	subi	r18, 0x01	; 1
     a62:	80 40       	sbci	r24, 0x00	; 0
     a64:	90 40       	sbci	r25, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <main+0x92>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <main+0x9c>
     a6a:	00 00       	nop
			_delay_ms(100);

		if (~PINA&(1<<PINA5))
     a6c:	05 99       	sbic	0x00, 5	; 0
     a6e:	14 c0       	rjmp	.+40     	; 0xa98 <main+0xca>
			AD_freq -=100000;
     a70:	80 91 a4 01 	lds	r24, 0x01A4
     a74:	90 91 a5 01 	lds	r25, 0x01A5
     a78:	a0 91 a6 01 	lds	r26, 0x01A6
     a7c:	b0 91 a7 01 	lds	r27, 0x01A7
     a80:	80 5a       	subi	r24, 0xA0	; 160
     a82:	96 48       	sbci	r25, 0x86	; 134
     a84:	a1 40       	sbci	r26, 0x01	; 1
     a86:	b1 09       	sbc	r27, r1
     a88:	80 93 a4 01 	sts	0x01A4, r24
     a8c:	90 93 a5 01 	sts	0x01A5, r25
     a90:	a0 93 a6 01 	sts	0x01A6, r26
     a94:	b0 93 a7 01 	sts	0x01A7, r27
     a98:	2f ef       	ldi	r18, 0xFF	; 255
     a9a:	89 ef       	ldi	r24, 0xF9	; 249
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	21 50       	subi	r18, 0x01	; 1
     aa0:	80 40       	sbci	r24, 0x00	; 0
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <main+0xd0>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <main+0xda>
     aa8:	00 00       	nop
			_delay_ms(20);

		if (~PINA&(1<<PINA4))
     aaa:	04 99       	sbic	0x00, 4	; 0
     aac:	14 c0       	rjmp	.+40     	; 0xad6 <main+0x108>
			AD_freq +=100000;
     aae:	80 91 a4 01 	lds	r24, 0x01A4
     ab2:	90 91 a5 01 	lds	r25, 0x01A5
     ab6:	a0 91 a6 01 	lds	r26, 0x01A6
     aba:	b0 91 a7 01 	lds	r27, 0x01A7
     abe:	80 56       	subi	r24, 0x60	; 96
     ac0:	99 47       	sbci	r25, 0x79	; 121
     ac2:	ae 4f       	sbci	r26, 0xFE	; 254
     ac4:	bf 4f       	sbci	r27, 0xFF	; 255
     ac6:	80 93 a4 01 	sts	0x01A4, r24
     aca:	90 93 a5 01 	sts	0x01A5, r25
     ace:	a0 93 a6 01 	sts	0x01A6, r26
     ad2:	b0 93 a7 01 	sts	0x01A7, r27
     ad6:	2f ef       	ldi	r18, 0xFF	; 255
     ad8:	81 ee       	ldi	r24, 0xE1	; 225
     ada:	94 e0       	ldi	r25, 0x04	; 4
     adc:	21 50       	subi	r18, 0x01	; 1
     ade:	80 40       	sbci	r24, 0x00	; 0
     ae0:	90 40       	sbci	r25, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <main+0x10e>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <main+0x118>
     ae6:	00 00       	nop
			_delay_ms(100);

		if (~PINA&(1<<PINA3))
     ae8:	03 9b       	sbis	0x00, 3	; 0
			(*get_frequence_p)();		//when Joystick Button is pressed, get the frequence from serial port again
     aea:	95 de       	rcall	.-726    	; 0x816 <get_frequence>
		
		AD9850_Setfrequency(AD_freq);
     aec:	60 91 a4 01 	lds	r22, 0x01A4
     af0:	70 91 a5 01 	lds	r23, 0x01A5
     af4:	80 91 a6 01 	lds	r24, 0x01A6
     af8:	90 91 a7 01 	lds	r25, 0x01A7
     afc:	bb d3       	rcall	.+1910   	; 0x1274 <__floatunsisf>
     afe:	d1 de       	rcall	.-606    	; 0x8a2 <AD9850_Setfrequency>
		frequence_display();
     b00:	27 df       	rcall	.-434    	; 0x950 <frequence_display>
	}
     b02:	76 cf       	rjmp	.-276    	; 0x9f0 <main+0x22>

00000b04 <dataflash_init>:
void
dataflash_init (void)
{
  // AT45DB081 doesn't actually need an intialization,
  // only the ChipSelect should be configured as an output.
  DDRB |= (1 << PB4);
     b04:	24 9a       	sbi	0x04, 4	; 4
  DATAFLASH_Chip_Unselect;
     b06:	2c 9a       	sbi	0x05, 4	; 5
  SPI_MasterInit();
     b08:	14 c1       	rjmp	.+552    	; 0xd32 <SPI_MasterInit>
     b0a:	08 95       	ret

00000b0c <LCD_Update>:
  unsigned char x;
  
  for (x = 0; x < 128; x++)
    lcd_framebuffer[line][x] = 0x00;
  
  lcd_frameupdate |= (1 << line);
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	cf b6       	in	r12, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	0f 2e       	mov	r0, r31
     b22:	fb e3       	ldi	r31, 0x3B	; 59
     b24:	ef 2e       	mov	r14, r31
     b26:	f5 e0       	ldi	r31, 0x05	; 5
     b28:	ff 2e       	mov	r15, r31
     b2a:	f0 2d       	mov	r31, r0
     b2c:	0f 2e       	mov	r0, r31
     b2e:	f7 e0       	ldi	r31, 0x07	; 7
     b30:	af 2e       	mov	r10, r31
     b32:	b1 2c       	mov	r11, r1
     b34:	f0 2d       	mov	r31, r0
     b36:	80 91 aa 01 	lds	r24, 0x01AA
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0a 2c       	mov	r0, r10
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <LCD_Update+0x38>
     b40:	95 95       	asr	r25
     b42:	87 95       	ror	r24
     b44:	0a 94       	dec	r0
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <LCD_Update+0x34>
     b48:	80 ff       	sbrs	r24, 0
     b4a:	12 c0       	rjmp	.+36     	; 0xb70 <LCD_Update+0x64>
     b4c:	46 98       	cbi	0x08, 6	; 8
     b4e:	47 98       	cbi	0x08, 7	; 8
     b50:	8a 2d       	mov	r24, r10
     b52:	80 6b       	ori	r24, 0xB0	; 176
     b54:	00 d1       	rcall	.+512    	; 0xd56 <SPI_MasterTransfer>
     b56:	80 e1       	ldi	r24, 0x10	; 16
     b58:	fe d0       	rcall	.+508    	; 0xd56 <SPI_MasterTransfer>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	fc d0       	rcall	.+504    	; 0xd56 <SPI_MasterTransfer>
     b5e:	47 9a       	sbi	0x08, 7	; 8
     b60:	e7 01       	movw	r28, r14
     b62:	10 e0       	ldi	r17, 0x00	; 0
     b64:	89 91       	ld	r24, Y+
     b66:	f7 d0       	rcall	.+494    	; 0xd56 <SPI_MasterTransfer>
     b68:	1f 5f       	subi	r17, 0xFF	; 255
     b6a:	10 38       	cpi	r17, 0x80	; 128
     b6c:	d9 f7       	brne	.-10     	; 0xb64 <LCD_Update+0x58>
     b6e:	46 9a       	sbi	0x08, 6	; 8
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	a8 1a       	sub	r10, r24
     b74:	b1 08       	sbc	r11, r1
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	e8 1a       	sub	r14, r24
     b7a:	f1 08       	sbc	r15, r1
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	a8 16       	cp	r10, r24
     b80:	b8 06       	cpc	r11, r24
     b82:	c9 f6       	brne	.-78     	; 0xb36 <LCD_Update+0x2a>
     b84:	10 92 aa 01 	sts	0x01AA, r1
     b88:	cf be       	out	0x3f, r12	; 63
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	08 95       	ret

00000b9c <LCD_Clear>:
     b9c:	eb eb       	ldi	r30, 0xBB	; 187
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	2b eb       	ldi	r18, 0xBB	; 187
     ba2:	35 e0       	ldi	r19, 0x05	; 5
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <LCD_Clear+0x1a>
     ba6:	11 92       	st	Z+, r1
     ba8:	e8 17       	cp	r30, r24
     baa:	f9 07       	cpc	r31, r25
     bac:	e1 f7       	brne	.-8      	; 0xba6 <LCD_Clear+0xa>
     bae:	28 17       	cp	r18, r24
     bb0:	39 07       	cpc	r19, r25
     bb2:	29 f0       	breq	.+10     	; 0xbbe <LCD_Clear+0x22>
     bb4:	fc 01       	movw	r30, r24
     bb6:	cf 01       	movw	r24, r30
     bb8:	80 58       	subi	r24, 0x80	; 128
     bba:	9f 4f       	sbci	r25, 0xFF	; 255
     bbc:	f4 cf       	rjmp	.-24     	; 0xba6 <LCD_Clear+0xa>
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	80 93 aa 01 	sts	0x01AA, r24
     bc4:	a3 cf       	rjmp	.-186    	; 0xb0c <LCD_Update>
     bc6:	08 95       	ret

00000bc8 <LCD_PutChar>:
     bc8:	8a 30       	cpi	r24, 0x0A	; 10
     bca:	29 f0       	breq	.+10     	; 0xbd6 <LCD_PutChar+0xe>
     bcc:	8d 30       	cpi	r24, 0x0D	; 13
     bce:	61 f4       	brne	.+24     	; 0xbe8 <LCD_PutChar+0x20>
     bd0:	10 92 a9 01 	sts	0x01A9, r1
     bd4:	08 95       	ret
     bd6:	80 91 a8 01 	lds	r24, 0x01A8
     bda:	87 30       	cpi	r24, 0x07	; 7
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <LCD_PutChar+0x18>
     bde:	43 c0       	rjmp	.+134    	; 0xc66 <LCD_PutChar+0x9e>
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	80 93 a8 01 	sts	0x01A8, r24
     be6:	08 95       	ret
     be8:	90 91 a8 01 	lds	r25, 0x01A8
     bec:	20 91 a9 01 	lds	r18, 0x01A9
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	d9 01       	movw	r26, r18
     bf4:	aa 0f       	add	r26, r26
     bf6:	bb 1f       	adc	r27, r27
     bf8:	2a 0f       	add	r18, r26
     bfa:	3b 1f       	adc	r19, r27
     bfc:	d9 01       	movw	r26, r18
     bfe:	aa 0f       	add	r26, r26
     c00:	bb 1f       	adc	r27, r27
     c02:	20 e8       	ldi	r18, 0x80	; 128
     c04:	92 9f       	mul	r25, r18
     c06:	a0 0d       	add	r26, r0
     c08:	b1 1d       	adc	r27, r1
     c0a:	11 24       	eor	r1, r1
     c0c:	a5 54       	subi	r26, 0x45	; 69
     c0e:	be 4f       	sbci	r27, 0xFE	; 254
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9c 01       	movw	r18, r24
     c14:	22 0f       	add	r18, r18
     c16:	33 1f       	adc	r19, r19
     c18:	82 0f       	add	r24, r18
     c1a:	93 1f       	adc	r25, r19
     c1c:	9c 01       	movw	r18, r24
     c1e:	22 0f       	add	r18, r18
     c20:	33 1f       	adc	r19, r19
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	28 5e       	subi	r18, 0xE8	; 232
     c28:	3e 4f       	sbci	r19, 0xFE	; 254
     c2a:	f9 01       	movw	r30, r18
     c2c:	e8 0f       	add	r30, r24
     c2e:	f9 1f       	adc	r31, r25
     c30:	e4 91       	lpm	r30, Z
     c32:	ed 93       	st	X+, r30
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	86 30       	cpi	r24, 0x06	; 6
     c38:	91 05       	cpc	r25, r1
     c3a:	b9 f7       	brne	.-18     	; 0xc2a <LCD_PutChar+0x62>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	00 90 a8 01 	lds	r0, 0x01A8
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <LCD_PutChar+0x82>
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	0a 94       	dec	r0
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <LCD_PutChar+0x7e>
     c4e:	90 91 aa 01 	lds	r25, 0x01AA
     c52:	89 2b       	or	r24, r25
     c54:	80 93 aa 01 	sts	0x01AA, r24
     c58:	80 91 a9 01 	lds	r24, 0x01A9
     c5c:	84 31       	cpi	r24, 0x14	; 20
     c5e:	18 f4       	brcc	.+6      	; 0xc66 <LCD_PutChar+0x9e>
     c60:	8f 5f       	subi	r24, 0xFF	; 255
     c62:	80 93 a9 01 	sts	0x01A9, r24
     c66:	08 95       	ret

00000c68 <LCD_PutString>:
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
     c6e:	88 81       	ld	r24, Y
     c70:	88 23       	and	r24, r24
     c72:	29 f0       	breq	.+10     	; 0xc7e <LCD_PutString+0x16>
     c74:	89 91       	ld	r24, Y+
     c76:	a8 df       	rcall	.-176    	; 0xbc8 <LCD_PutChar>
     c78:	88 81       	ld	r24, Y
     c7a:	81 11       	cpse	r24, r1
     c7c:	fb cf       	rjmp	.-10     	; 0xc74 <LCD_PutString+0xc>
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <LCD_PutString_P>:
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	fc 01       	movw	r30, r24
     c8a:	84 91       	lpm	r24, Z
     c8c:	ef 01       	movw	r28, r30
     c8e:	21 96       	adiw	r28, 0x01	; 1
     c90:	88 23       	and	r24, r24
     c92:	31 f0       	breq	.+12     	; 0xca0 <LCD_PutString_P+0x1c>
     c94:	99 df       	rcall	.-206    	; 0xbc8 <LCD_PutChar>
     c96:	fe 01       	movw	r30, r28
     c98:	84 91       	lpm	r24, Z
     c9a:	21 96       	adiw	r28, 0x01	; 1
     c9c:	81 11       	cpse	r24, r1
     c9e:	fa cf       	rjmp	.-12     	; 0xc94 <LCD_PutString_P+0x10>
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <LCD_GotoXY>:
     ca6:	80 93 a9 01 	sts	0x01A9, r24
     caa:	60 93 a8 01 	sts	0x01A8, r22
     cae:	08 95       	ret

00000cb0 <Backlight_Off>:
}

void
Backlight_Off (void)
{
  TWI_Start();
     cb0:	6b d0       	rcall	.+214    	; 0xd88 <TWI_Start>
  TWI_Address_RW(0xc4);
     cb2:	84 ec       	ldi	r24, 0xC4	; 196
     cb4:	84 d0       	rcall	.+264    	; 0xdbe <TWI_Address_RW>
  TWI_Write(0x11);
     cb6:	81 e1       	ldi	r24, 0x11	; 17
     cb8:	9f d0       	rcall	.+318    	; 0xdf8 <TWI_Write>
  TWI_Write(0x00);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	9d d0       	rcall	.+314    	; 0xdf8 <TWI_Write>
  TWI_Write(0x00);
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	9b d0       	rcall	.+310    	; 0xdf8 <TWI_Write>
  TWI_Write(0x00);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	99 d0       	rcall	.+306    	; 0xdf8 <TWI_Write>
  TWI_Write(0x00);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	97 d0       	rcall	.+302    	; 0xdf8 <TWI_Write>
  TWI_Write(0x00);
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	95 d0       	rcall	.+298    	; 0xdf8 <TWI_Write>
  TWI_Stop();
     cce:	b1 c0       	rjmp	.+354    	; 0xe32 <TWI_Stop>
     cd0:	08 95       	ret

00000cd2 <LCD_Init>:
  SPI_MasterTransfer(data);
}

void
LCD_Init (void)
{
     cd2:	cf 93       	push	r28
  SPI_MasterInit();
     cd4:	2e d0       	rcall	.+92     	; 0xd32 <SPI_MasterInit>

  /* Set Register Select and Chip Select as Output */
  DDRC |= (1<<PC7)|(1<<PC6);
     cd6:	87 b1       	in	r24, 0x07	; 7
     cd8:	80 6c       	ori	r24, 0xC0	; 192
     cda:	87 b9       	out	0x07, r24	; 7
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
     cdc:	cf b7       	in	r28, 0x3f	; 63
  cli();
     cde:	f8 94       	cli
  
  /* Starting Init Command Sequence */
  LCD_Command_Mode;
     ce0:	47 98       	cbi	0x08, 7	; 8
  LCD_Chip_Select;
     ce2:	46 98       	cbi	0x08, 6	; 8
uint8_t lcd_texty = 0;

void
LCD_Send (uint8_t data)
{
  SPI_MasterTransfer(data);
     ce4:	82 ee       	ldi	r24, 0xE2	; 226
     ce6:	37 d0       	rcall	.+110    	; 0xd56 <SPI_MasterTransfer>
     ce8:	83 ea       	ldi	r24, 0xA3	; 163
     cea:	35 d0       	rcall	.+106    	; 0xd56 <SPI_MasterTransfer>
     cec:	81 e8       	ldi	r24, 0x81	; 129
     cee:	33 d0       	rcall	.+102    	; 0xd56 <SPI_MasterTransfer>
     cf0:	88 e0       	ldi	r24, 0x08	; 8
     cf2:	31 d0       	rcall	.+98     	; 0xd56 <SPI_MasterTransfer>
     cf4:	80 ea       	ldi	r24, 0xA0	; 160
     cf6:	2f d0       	rcall	.+94     	; 0xd56 <SPI_MasterTransfer>
     cf8:	88 ec       	ldi	r24, 0xC8	; 200
     cfa:	2d d0       	rcall	.+90     	; 0xd56 <SPI_MasterTransfer>
     cfc:	85 e2       	ldi	r24, 0x25	; 37
     cfe:	2b d0       	rcall	.+86     	; 0xd56 <SPI_MasterTransfer>
     d00:	8f e2       	ldi	r24, 0x2F	; 47
     d02:	29 d0       	rcall	.+82     	; 0xd56 <SPI_MasterTransfer>
     d04:	8f ea       	ldi	r24, 0xAF	; 175
     d06:	27 d0       	rcall	.+78     	; 0xd56 <SPI_MasterTransfer>
  LCD_Send(LCD_COMMON_OUTPUT_MODE_REVERSE);
  LCD_Send(LCD_V5_VOLTAGE_REGULATOR | 0x05);
  LCD_Send(LCD_POWER_CONTROLLER_SET | 0x07);
  LCD_Send(LCD_DISPLAY_ON);
  
  LCD_Chip_Unselect;
     d08:	46 9a       	sbi	0x08, 6	; 8
  LCD_Data_Mode;
     d0a:	47 9a       	sbi	0x08, 7	; 8
  
  LCD_Clear();
     d0c:	47 df       	rcall	.-370    	; 0xb9c <LCD_Clear>
  
  /* Restore Status Register */
  SREG = sreg;
     d0e:	cf bf       	out	0x3f, r28	; 63
  
  // Initialize TWI for Backlight Control
  TWI_Init();
     d10:	27 d0       	rcall	.+78     	; 0xd60 <TWI_Init>
  Backlight_Off();
     d12:	ce df       	rcall	.-100    	; 0xcb0 <Backlight_Off>
  
  // Initialize Dataflash
  dataflash_init();
     d14:	f7 de       	rcall	.-530    	; 0xb04 <dataflash_init>
}
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <Backlight_LED>:
  TWI_Stop();
}

void
Backlight_LED (uint8_t led_selector)
{
     d1a:	cf 93       	push	r28
     d1c:	c8 2f       	mov	r28, r24
  TWI_Start();
     d1e:	34 d0       	rcall	.+104    	; 0xd88 <TWI_Start>
  TWI_Address_RW(0xc4);
     d20:	84 ec       	ldi	r24, 0xC4	; 196
     d22:	4d d0       	rcall	.+154    	; 0xdbe <TWI_Address_RW>
  TWI_Write(0x15);
     d24:	85 e1       	ldi	r24, 0x15	; 21
     d26:	68 d0       	rcall	.+208    	; 0xdf8 <TWI_Write>
  TWI_Write(led_selector);
     d28:	8c 2f       	mov	r24, r28
     d2a:	66 d0       	rcall	.+204    	; 0xdf8 <TWI_Write>
  TWI_Stop();
     d2c:	82 d0       	rcall	.+260    	; 0xe32 <TWI_Stop>
}
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <SPI_MasterInit>:

void
SPI_MasterInit (void)
{
  /* Check if already initialized */
  if (!(SPI_flag & 1))
     d32:	80 91 ab 01 	lds	r24, 0x01AB
     d36:	80 fd       	sbrc	r24, 0
     d38:	0d c0       	rjmp	.+26     	; 0xd54 <SPI_MasterInit+0x22>
    {
      /* Set MOSI and SCK output */
      DDRB |= (1<<PB5)|(1<<PB7);
     d3a:	84 b1       	in	r24, 0x04	; 4
     d3c:	80 6a       	ori	r24, 0xA0	; 160
     d3e:	84 b9       	out	0x04, r24	; 4
      
      /* Enable SPI, Master */
      SPCR = (1<<SPE)|(1<<MSTR);
     d40:	80 e5       	ldi	r24, 0x50	; 80
     d42:	8c bd       	out	0x2c, r24	; 44
      
      /* Set Double SPI Speed Bit, SPI clock will be fck/2 */
      SPSR = (1<<SPI2X);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8d bd       	out	0x2d, r24	; 45
      
      /* Set SPI Init Flag */
      SPI_flag = 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	90 93 ac 01 	sts	0x01AC, r25
     d50:	80 93 ab 01 	sts	0x01AB, r24
     d54:	08 95       	ret

00000d56 <SPI_MasterTransfer>:

void
SPI_MasterTransfer (unsigned char c)
{
  /* Start transmission */
  SPDR = c;
     d56:	8e bd       	out	0x2e, r24	; 46
  
  /* Wait for transmission complete */
  while (!(SPSR & (1<<SPIF)));
     d58:	0d b4       	in	r0, 0x2d	; 45
     d5a:	07 fe       	sbrs	r0, 7
     d5c:	fd cf       	rjmp	.-6      	; 0xd58 <SPI_MasterTransfer+0x2>
}
     d5e:	08 95       	ret

00000d60 <TWI_Init>:

void
TWI_Init (void)
{
  // Port Setup
  DDRC &= ~((1 << PC0)|(1 << PC1));
     d60:	87 b1       	in	r24, 0x07	; 7
     d62:	8c 7f       	andi	r24, 0xFC	; 252
     d64:	87 b9       	out	0x07, r24	; 7
  PORTC |= (1 << PC0)|(1 << PC1);
     d66:	88 b1       	in	r24, 0x08	; 8
     d68:	83 60       	ori	r24, 0x03	; 3
     d6a:	88 b9       	out	0x08, r24	; 8
  
  // Setup TWI Speed to 400kHZ (TWPS = 1)
  TWBR = 3;
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	80 93 b8 00 	sts	0x00B8, r24
  
  // Using TIMER2 to detect timeout
  TCCR2B = (7 << CS20);
     d72:	87 e0       	ldi	r24, 0x07	; 7
     d74:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = (1 << OCIE2A);
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	80 93 70 00 	sts	0x0070, r24
  
  OCR2A = 125;
     d7e:	8d e7       	ldi	r24, 0x7D	; 125
     d80:	80 93 b3 00 	sts	0x00B3, r24
  
  // Interrupts REQUIRED!
  sei();
     d84:	78 94       	sei
     d86:	08 95       	ret

00000d88 <TWI_Start>:
}

int16_t
TWI_Start (void)
{
  twi_timeout = 10;
     d88:	8a e0       	ldi	r24, 0x0A	; 10
     d8a:	80 93 ad 01 	sts	0x01AD, r24
  
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
     d8e:	84 ea       	ldi	r24, 0xA4	; 164
     d90:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     d94:	ec eb       	ldi	r30, 0xBC	; 188
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 91 ad 01 	lds	r24, 0x01AD
     d9c:	88 23       	and	r24, r24
     d9e:	19 f0       	breq	.+6      	; 0xda6 <TWI_Start+0x1e>
     da0:	80 81       	ld	r24, Z
     da2:	88 23       	and	r24, r24
     da4:	cc f7       	brge	.-14     	; 0xd98 <TWI_Start+0x10>
  
  if (twi_timeout)
     da6:	80 91 ad 01 	lds	r24, 0x01AD
     daa:	88 23       	and	r24, r24
     dac:	29 f0       	breq	.+10     	; 0xdb8 <TWI_Start+0x30>
    return (int16_t) (TWSR & 0xf8);
     dae:	80 91 b9 00 	lds	r24, 0x00B9
     db2:	88 7f       	andi	r24, 0xF8	; 248
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	08 95       	ret
  else
    return -1;
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	9f ef       	ldi	r25, 0xFF	; 255
}
     dbc:	08 95       	ret

00000dbe <TWI_Address_RW>:

int16_t
TWI_Address_RW (uint8_t address)
{
  twi_timeout = 10;
     dbe:	9a e0       	ldi	r25, 0x0A	; 10
     dc0:	90 93 ad 01 	sts	0x01AD, r25
  
  TWDR = address;
     dc4:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
     dc8:	84 e8       	ldi	r24, 0x84	; 132
     dca:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     dce:	ec eb       	ldi	r30, 0xBC	; 188
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 91 ad 01 	lds	r24, 0x01AD
     dd6:	88 23       	and	r24, r24
     dd8:	19 f0       	breq	.+6      	; 0xde0 <TWI_Address_RW+0x22>
     dda:	80 81       	ld	r24, Z
     ddc:	88 23       	and	r24, r24
     dde:	cc f7       	brge	.-14     	; 0xdd2 <TWI_Address_RW+0x14>
  
  if (twi_timeout)
     de0:	80 91 ad 01 	lds	r24, 0x01AD
     de4:	88 23       	and	r24, r24
     de6:	29 f0       	breq	.+10     	; 0xdf2 <TWI_Address_RW+0x34>
    return (int16_t) (TWSR & 0xf8);
     de8:	80 91 b9 00 	lds	r24, 0x00B9
     dec:	88 7f       	andi	r24, 0xF8	; 248
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	08 95       	ret
  else
    return -1;
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	9f ef       	ldi	r25, 0xFF	; 255
}
     df6:	08 95       	ret

00000df8 <TWI_Write>:

int16_t
TWI_Write (uint8_t data)
{
  twi_timeout = 10;
     df8:	9a e0       	ldi	r25, 0x0A	; 10
     dfa:	90 93 ad 01 	sts	0x01AD, r25
  
  TWDR = data;
     dfe:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
     e02:	84 e8       	ldi	r24, 0x84	; 132
     e04:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     e08:	ec eb       	ldi	r30, 0xBC	; 188
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 91 ad 01 	lds	r24, 0x01AD
     e10:	88 23       	and	r24, r24
     e12:	19 f0       	breq	.+6      	; 0xe1a <TWI_Write+0x22>
     e14:	80 81       	ld	r24, Z
     e16:	88 23       	and	r24, r24
     e18:	cc f7       	brge	.-14     	; 0xe0c <TWI_Write+0x14>
  
  if (twi_timeout)
     e1a:	80 91 ad 01 	lds	r24, 0x01AD
     e1e:	88 23       	and	r24, r24
     e20:	29 f0       	breq	.+10     	; 0xe2c <TWI_Write+0x34>
    return (int16_t) (TWSR & 0xf8);
     e22:	80 91 b9 00 	lds	r24, 0x00B9
     e26:	88 7f       	andi	r24, 0xF8	; 248
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	08 95       	ret
  else
    return -1;
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	9f ef       	ldi	r25, 0xFF	; 255
}
     e30:	08 95       	ret

00000e32 <TWI_Stop>:

void
TWI_Stop (void)
{
  twi_timeout = 10;
     e32:	8a e0       	ldi	r24, 0x0A	; 10
     e34:	80 93 ad 01 	sts	0x01AD, r24
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
     e38:	84 e9       	ldi	r24, 0x94	; 148
     e3a:	80 93 bc 00 	sts	0x00BC, r24
     e3e:	08 95       	ret

00000e40 <__vector_9>:
}

// ISR will be called every 8ms to decrease twi_timeout if > 0
ISR (TIMER2_COMPA_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	0b b6       	in	r0, 0x3b	; 59
     e4c:	0f 92       	push	r0
     e4e:	8f 93       	push	r24
     e50:	ef 93       	push	r30
     e52:	ff 93       	push	r31
  OCR2A += 125;
     e54:	e3 eb       	ldi	r30, 0xB3	; 179
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	83 58       	subi	r24, 0x83	; 131
     e5c:	80 83       	st	Z, r24

  if (twi_timeout)
     e5e:	80 91 ad 01 	lds	r24, 0x01AD
     e62:	88 23       	and	r24, r24
     e64:	29 f0       	breq	.+10     	; 0xe70 <__vector_9+0x30>
    twi_timeout--;
     e66:	80 91 ad 01 	lds	r24, 0x01AD
     e6a:	81 50       	subi	r24, 0x01	; 1
     e6c:	80 93 ad 01 	sts	0x01AD, r24
}
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	8f 91       	pop	r24
     e76:	0f 90       	pop	r0
     e78:	0b be       	out	0x3b, r0	; 59
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <__vector_20>:
uint8_t uart0_tx_frame()
{
	uart_tx_byte(PREAMBLE);
	uart_tx_byte(device_address);
	return 1;
}
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	0b b6       	in	r0, 0x3b	; 59
     e90:	0f 92       	push	r0
     e92:	2f 93       	push	r18
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
     e9c:	90 91 c6 00 	lds	r25, 0x00C6
     ea0:	9d 30       	cpi	r25, 0x0D	; 13
     ea2:	19 f1       	breq	.+70     	; 0xeea <__vector_20+0x66>
     ea4:	80 91 b9 01 	lds	r24, 0x01B9
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	19 f4       	brne	.+6      	; 0xeb2 <__vector_20+0x2e>
     eac:	90 93 b8 01 	sts	0x01B8, r25
     eb0:	18 c0       	rjmp	.+48     	; 0xee2 <__vector_20+0x5e>
     eb2:	2e ef       	ldi	r18, 0xFE	; 254
     eb4:	28 0f       	add	r18, r24
     eb6:	20 3a       	cpi	r18, 0xA0	; 160
     eb8:	80 f4       	brcc	.+32     	; 0xeda <__vector_20+0x56>
     eba:	20 91 b8 01 	lds	r18, 0x01B8
     ebe:	23 30       	cpi	r18, 0x03	; 3
     ec0:	61 f4       	brne	.+24     	; 0xeda <__vector_20+0x56>
     ec2:	e8 2f       	mov	r30, r24
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	e7 54       	subi	r30, 0x47	; 71
     ec8:	fa 4f       	sbci	r31, 0xFA	; 250
     eca:	90 83       	st	Z, r25
     ecc:	90 81       	ld	r25, Z
     ece:	20 91 b7 01 	lds	r18, 0x01B7
     ed2:	92 27       	eor	r25, r18
     ed4:	90 93 b7 01 	sts	0x01B7, r25
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <__vector_20+0x5e>
     eda:	82 3a       	cpi	r24, 0xA2	; 162
     edc:	11 f4       	brne	.+4      	; 0xee2 <__vector_20+0x5e>
     ede:	90 93 b6 01 	sts	0x01B6, r25
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	80 93 b9 01 	sts	0x01B9, r24
     ee8:	12 c0       	rjmp	.+36     	; 0xf0e <__vector_20+0x8a>
     eea:	90 91 b7 01 	lds	r25, 0x01B7
     eee:	80 91 b6 01 	lds	r24, 0x01B6
     ef2:	98 13       	cpse	r25, r24
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <__vector_20+0x78>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	80 93 ba 01 	sts	0x01BA, r24
     efc:	10 92 b9 01 	sts	0x01B9, r1
     f00:	10 92 b8 01 	sts	0x01B8, r1
     f04:	8b eb       	ldi	r24, 0xBB	; 187
     f06:	80 93 b6 01 	sts	0x01B6, r24
     f0a:	10 92 b7 01 	sts	0x01B7, r1
     f0e:	ff 91       	pop	r31
     f10:	ef 91       	pop	r30
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	2f 91       	pop	r18
     f18:	0f 90       	pop	r0
     f1a:	0b be       	out	0x3b, r0	; 59
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <__vector_22>:
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	0b b6       	in	r0, 0x3b	; 59
     f32:	0f 92       	push	r0
     f34:	2f 93       	push	r18
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
     f3e:	e0 91 b5 01 	lds	r30, 0x01B5
     f42:	e0 3a       	cpi	r30, 0xA0	; 160
     f44:	b0 f4       	brcc	.+44     	; 0xf72 <__vector_22+0x4c>
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	e0 50       	subi	r30, 0x00	; 0
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	80 81       	ld	r24, Z
     f4e:	80 93 c6 00 	sts	0x00C6, r24
     f52:	80 91 b5 01 	lds	r24, 0x01B5
     f56:	e8 2f       	mov	r30, r24
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	e0 50       	subi	r30, 0x00	; 0
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	90 81       	ld	r25, Z
     f60:	20 91 b4 01 	lds	r18, 0x01B4
     f64:	92 27       	eor	r25, r18
     f66:	90 93 b4 01 	sts	0x01B4, r25
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	80 93 b5 01 	sts	0x01B5, r24
     f70:	1d c0       	rjmp	.+58     	; 0xfac <__vector_22+0x86>
     f72:	e0 3a       	cpi	r30, 0xA0	; 160
     f74:	51 f4       	brne	.+20     	; 0xf8a <__vector_22+0x64>
     f76:	80 91 b4 01 	lds	r24, 0x01B4
     f7a:	80 93 c6 00 	sts	0x00C6, r24
     f7e:	80 91 b5 01 	lds	r24, 0x01B5
     f82:	8f 5f       	subi	r24, 0xFF	; 255
     f84:	80 93 b5 01 	sts	0x01B5, r24
     f88:	11 c0       	rjmp	.+34     	; 0xfac <__vector_22+0x86>
     f8a:	e1 3a       	cpi	r30, 0xA1	; 161
     f8c:	49 f4       	brne	.+18     	; 0xfa0 <__vector_22+0x7a>
     f8e:	8d e0       	ldi	r24, 0x0D	; 13
     f90:	80 93 c6 00 	sts	0x00C6, r24
     f94:	80 91 b5 01 	lds	r24, 0x01B5
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	80 93 b5 01 	sts	0x01B5, r24
     f9e:	06 c0       	rjmp	.+12     	; 0xfac <__vector_22+0x86>
     fa0:	10 92 b4 01 	sts	0x01B4, r1
     fa4:	10 92 b5 01 	sts	0x01B5, r1
     fa8:	10 92 ba 01 	sts	0x01BA, r1
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	2f 91       	pop	r18
     fb6:	0f 90       	pop	r0
     fb8:	0b be       	out	0x3b, r0	; 59
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <__vector_28>:
     fc4:	1f 92       	push	r1
     fc6:	0f 92       	push	r0
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	0f 92       	push	r0
     fcc:	11 24       	eor	r1, r1
     fce:	0b b6       	in	r0, 0x3b	; 59
     fd0:	0f 92       	push	r0
     fd2:	2f 93       	push	r18
     fd4:	8f 93       	push	r24
     fd6:	9f 93       	push	r25
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
     fdc:	90 91 ce 00 	lds	r25, 0x00CE
     fe0:	9d 30       	cpi	r25, 0x0D	; 13
     fe2:	19 f1       	breq	.+70     	; 0x102a <__vector_28+0x66>
     fe4:	80 91 b3 01 	lds	r24, 0x01B3
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	19 f4       	brne	.+6      	; 0xff2 <__vector_28+0x2e>
     fec:	90 93 b2 01 	sts	0x01B2, r25
     ff0:	18 c0       	rjmp	.+48     	; 0x1022 <__vector_28+0x5e>
     ff2:	2e ef       	ldi	r18, 0xFE	; 254
     ff4:	28 0f       	add	r18, r24
     ff6:	20 3a       	cpi	r18, 0xA0	; 160
     ff8:	80 f4       	brcc	.+32     	; 0x101a <__vector_28+0x56>
     ffa:	20 91 b2 01 	lds	r18, 0x01B2
     ffe:	23 30       	cpi	r18, 0x03	; 3
    1000:	61 f4       	brne	.+24     	; 0x101a <__vector_28+0x56>
    1002:	e8 2f       	mov	r30, r24
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	e7 54       	subi	r30, 0x47	; 71
    1008:	fa 4f       	sbci	r31, 0xFA	; 250
    100a:	90 83       	st	Z, r25
    100c:	90 81       	ld	r25, Z
    100e:	20 91 b1 01 	lds	r18, 0x01B1
    1012:	92 27       	eor	r25, r18
    1014:	90 93 b1 01 	sts	0x01B1, r25
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <__vector_28+0x5e>
    101a:	82 3a       	cpi	r24, 0xA2	; 162
    101c:	11 f4       	brne	.+4      	; 0x1022 <__vector_28+0x5e>
    101e:	90 93 b0 01 	sts	0x01B0, r25
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	80 93 b3 01 	sts	0x01B3, r24
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <__vector_28+0x92>
    102a:	90 91 b1 01 	lds	r25, 0x01B1
    102e:	80 91 b0 01 	lds	r24, 0x01B0
    1032:	98 13       	cpse	r25, r24
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <__vector_28+0x80>
    1036:	80 91 b2 01 	lds	r24, 0x01B2
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	19 f4       	brne	.+6      	; 0x1044 <__vector_28+0x80>
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 ba 01 	sts	0x01BA, r24
    1044:	10 92 b3 01 	sts	0x01B3, r1
    1048:	10 92 b2 01 	sts	0x01B2, r1
    104c:	8b eb       	ldi	r24, 0xBB	; 187
    104e:	80 93 b0 01 	sts	0x01B0, r24
    1052:	10 92 b1 01 	sts	0x01B1, r1
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	9f 91       	pop	r25
    105c:	8f 91       	pop	r24
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0b be       	out	0x3b, r0	; 59
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_30>:
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	0b b6       	in	r0, 0x3b	; 59
    107a:	0f 92       	push	r0
    107c:	2f 93       	push	r18
    107e:	8f 93       	push	r24
    1080:	9f 93       	push	r25
    1082:	ef 93       	push	r30
    1084:	ff 93       	push	r31
    1086:	e0 91 af 01 	lds	r30, 0x01AF
    108a:	e0 3a       	cpi	r30, 0xA0	; 160
    108c:	b0 f4       	brcc	.+44     	; 0x10ba <__vector_30+0x4c>
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	e0 50       	subi	r30, 0x00	; 0
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	80 81       	ld	r24, Z
    1096:	80 93 ce 00 	sts	0x00CE, r24
    109a:	80 91 af 01 	lds	r24, 0x01AF
    109e:	e8 2f       	mov	r30, r24
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	e0 50       	subi	r30, 0x00	; 0
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	90 81       	ld	r25, Z
    10a8:	20 91 ae 01 	lds	r18, 0x01AE
    10ac:	92 27       	eor	r25, r18
    10ae:	90 93 ae 01 	sts	0x01AE, r25
    10b2:	8f 5f       	subi	r24, 0xFF	; 255
    10b4:	80 93 af 01 	sts	0x01AF, r24
    10b8:	1d c0       	rjmp	.+58     	; 0x10f4 <__vector_30+0x86>
    10ba:	e0 3a       	cpi	r30, 0xA0	; 160
    10bc:	51 f4       	brne	.+20     	; 0x10d2 <__vector_30+0x64>
    10be:	80 91 ae 01 	lds	r24, 0x01AE
    10c2:	80 93 ce 00 	sts	0x00CE, r24
    10c6:	80 91 af 01 	lds	r24, 0x01AF
    10ca:	8f 5f       	subi	r24, 0xFF	; 255
    10cc:	80 93 af 01 	sts	0x01AF, r24
    10d0:	11 c0       	rjmp	.+34     	; 0x10f4 <__vector_30+0x86>
    10d2:	e1 3a       	cpi	r30, 0xA1	; 161
    10d4:	49 f4       	brne	.+18     	; 0x10e8 <__vector_30+0x7a>
    10d6:	8d e0       	ldi	r24, 0x0D	; 13
    10d8:	80 93 ce 00 	sts	0x00CE, r24
    10dc:	80 91 af 01 	lds	r24, 0x01AF
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	80 93 af 01 	sts	0x01AF, r24
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <__vector_30+0x86>
    10e8:	10 92 ae 01 	sts	0x01AE, r1
    10ec:	10 92 af 01 	sts	0x01AF, r1
    10f0:	10 92 ba 01 	sts	0x01BA, r1
    10f4:	ff 91       	pop	r31
    10f6:	ef 91       	pop	r30
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	2f 91       	pop	r18
    10fe:	0f 90       	pop	r0
    1100:	0b be       	out	0x3b, r0	; 59
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <uart_init1>:
    110c:	e8 ec       	ldi	r30, 0xC8	; 200
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	80 83       	st	Z, r24
    1114:	88 ed       	ldi	r24, 0xD8	; 216
    1116:	80 93 c9 00 	sts	0x00C9, r24
    111a:	86 e0       	ldi	r24, 0x06	; 6
    111c:	80 93 ca 00 	sts	0x00CA, r24
    1120:	10 92 cd 00 	sts	0x00CD, r1
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 cc 00 	sts	0x00CC, r24
    112a:	08 95       	ret

0000112c <uart1_tx_byte>:
	}
}

void uart1_tx_byte(unsigned char c)
{
	while (!(UCSR1A & (1<<UDRE1)))  /* warten bis Senden moeglich */
    112c:	e8 ec       	ldi	r30, 0xC8	; 200
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	90 81       	ld	r25, Z
    1132:	95 ff       	sbrs	r25, 5
    1134:	fd cf       	rjmp	.-6      	; 0x1130 <uart1_tx_byte+0x4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1136:	f8 94       	cli
	{
	}
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		UDR1 = c;
    1138:	80 93 ce 00 	sts	0x00CE, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    113c:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    113e:	08 95       	ret

00001140 <uart1_tx_frame>:
}


uint8_t uart1_tx_frame()
{
	uart1_tx_byte(PREAMBLE);
    1140:	8a ea       	ldi	r24, 0xAA	; 170
    1142:	f4 df       	rcall	.-24     	; 0x112c <uart1_tx_byte>
	uart1_tx_byte(device_address);
    1144:	83 e0       	ldi	r24, 0x03	; 3
    1146:	f2 df       	rcall	.-28     	; 0x112c <uart1_tx_byte>
	return 1;
}
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	08 95       	ret

0000114c <__divsf3>:
    114c:	0c d0       	rcall	.+24     	; 0x1166 <__divsf3x>
    114e:	e6 c0       	rjmp	.+460    	; 0x131c <__fp_round>
    1150:	de d0       	rcall	.+444    	; 0x130e <__fp_pscB>
    1152:	40 f0       	brcs	.+16     	; 0x1164 <__divsf3+0x18>
    1154:	d5 d0       	rcall	.+426    	; 0x1300 <__fp_pscA>
    1156:	30 f0       	brcs	.+12     	; 0x1164 <__divsf3+0x18>
    1158:	21 f4       	brne	.+8      	; 0x1162 <__divsf3+0x16>
    115a:	5f 3f       	cpi	r21, 0xFF	; 255
    115c:	19 f0       	breq	.+6      	; 0x1164 <__divsf3+0x18>
    115e:	c7 c0       	rjmp	.+398    	; 0x12ee <__fp_inf>
    1160:	51 11       	cpse	r21, r1
    1162:	10 c1       	rjmp	.+544    	; 0x1384 <__fp_szero>
    1164:	ca c0       	rjmp	.+404    	; 0x12fa <__fp_nan>

00001166 <__divsf3x>:
    1166:	eb d0       	rcall	.+470    	; 0x133e <__fp_split3>
    1168:	98 f3       	brcs	.-26     	; 0x1150 <__divsf3+0x4>

0000116a <__divsf3_pse>:
    116a:	99 23       	and	r25, r25
    116c:	c9 f3       	breq	.-14     	; 0x1160 <__divsf3+0x14>
    116e:	55 23       	and	r21, r21
    1170:	b1 f3       	breq	.-20     	; 0x115e <__divsf3+0x12>
    1172:	95 1b       	sub	r25, r21
    1174:	55 0b       	sbc	r21, r21
    1176:	bb 27       	eor	r27, r27
    1178:	aa 27       	eor	r26, r26
    117a:	62 17       	cp	r22, r18
    117c:	73 07       	cpc	r23, r19
    117e:	84 07       	cpc	r24, r20
    1180:	38 f0       	brcs	.+14     	; 0x1190 <__divsf3_pse+0x26>
    1182:	9f 5f       	subi	r25, 0xFF	; 255
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	22 0f       	add	r18, r18
    1188:	33 1f       	adc	r19, r19
    118a:	44 1f       	adc	r20, r20
    118c:	aa 1f       	adc	r26, r26
    118e:	a9 f3       	breq	.-22     	; 0x117a <__divsf3_pse+0x10>
    1190:	33 d0       	rcall	.+102    	; 0x11f8 <__divsf3_pse+0x8e>
    1192:	0e 2e       	mov	r0, r30
    1194:	3a f0       	brmi	.+14     	; 0x11a4 <__divsf3_pse+0x3a>
    1196:	e0 e8       	ldi	r30, 0x80	; 128
    1198:	30 d0       	rcall	.+96     	; 0x11fa <__divsf3_pse+0x90>
    119a:	91 50       	subi	r25, 0x01	; 1
    119c:	50 40       	sbci	r21, 0x00	; 0
    119e:	e6 95       	lsr	r30
    11a0:	00 1c       	adc	r0, r0
    11a2:	ca f7       	brpl	.-14     	; 0x1196 <__divsf3_pse+0x2c>
    11a4:	29 d0       	rcall	.+82     	; 0x11f8 <__divsf3_pse+0x8e>
    11a6:	fe 2f       	mov	r31, r30
    11a8:	27 d0       	rcall	.+78     	; 0x11f8 <__divsf3_pse+0x8e>
    11aa:	66 0f       	add	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	88 1f       	adc	r24, r24
    11b0:	bb 1f       	adc	r27, r27
    11b2:	26 17       	cp	r18, r22
    11b4:	37 07       	cpc	r19, r23
    11b6:	48 07       	cpc	r20, r24
    11b8:	ab 07       	cpc	r26, r27
    11ba:	b0 e8       	ldi	r27, 0x80	; 128
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <__divsf3_pse+0x56>
    11be:	bb 0b       	sbc	r27, r27
    11c0:	80 2d       	mov	r24, r0
    11c2:	bf 01       	movw	r22, r30
    11c4:	ff 27       	eor	r31, r31
    11c6:	93 58       	subi	r25, 0x83	; 131
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	2a f0       	brmi	.+10     	; 0x11d6 <__divsf3_pse+0x6c>
    11cc:	9e 3f       	cpi	r25, 0xFE	; 254
    11ce:	51 05       	cpc	r21, r1
    11d0:	68 f0       	brcs	.+26     	; 0x11ec <__divsf3_pse+0x82>
    11d2:	8d c0       	rjmp	.+282    	; 0x12ee <__fp_inf>
    11d4:	d7 c0       	rjmp	.+430    	; 0x1384 <__fp_szero>
    11d6:	5f 3f       	cpi	r21, 0xFF	; 255
    11d8:	ec f3       	brlt	.-6      	; 0x11d4 <__divsf3_pse+0x6a>
    11da:	98 3e       	cpi	r25, 0xE8	; 232
    11dc:	dc f3       	brlt	.-10     	; 0x11d4 <__divsf3_pse+0x6a>
    11de:	86 95       	lsr	r24
    11e0:	77 95       	ror	r23
    11e2:	67 95       	ror	r22
    11e4:	b7 95       	ror	r27
    11e6:	f7 95       	ror	r31
    11e8:	9f 5f       	subi	r25, 0xFF	; 255
    11ea:	c9 f7       	brne	.-14     	; 0x11de <__divsf3_pse+0x74>
    11ec:	88 0f       	add	r24, r24
    11ee:	91 1d       	adc	r25, r1
    11f0:	96 95       	lsr	r25
    11f2:	87 95       	ror	r24
    11f4:	97 f9       	bld	r25, 7
    11f6:	08 95       	ret
    11f8:	e1 e0       	ldi	r30, 0x01	; 1
    11fa:	66 0f       	add	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	bb 1f       	adc	r27, r27
    1202:	62 17       	cp	r22, r18
    1204:	73 07       	cpc	r23, r19
    1206:	84 07       	cpc	r24, r20
    1208:	ba 07       	cpc	r27, r26
    120a:	20 f0       	brcs	.+8      	; 0x1214 <__divsf3_pse+0xaa>
    120c:	62 1b       	sub	r22, r18
    120e:	73 0b       	sbc	r23, r19
    1210:	84 0b       	sbc	r24, r20
    1212:	ba 0b       	sbc	r27, r26
    1214:	ee 1f       	adc	r30, r30
    1216:	88 f7       	brcc	.-30     	; 0x11fa <__divsf3_pse+0x90>
    1218:	e0 95       	com	r30
    121a:	08 95       	ret

0000121c <__fixunssfsi>:
    121c:	98 d0       	rcall	.+304    	; 0x134e <__fp_splitA>
    121e:	88 f0       	brcs	.+34     	; 0x1242 <__fixunssfsi+0x26>
    1220:	9f 57       	subi	r25, 0x7F	; 127
    1222:	90 f0       	brcs	.+36     	; 0x1248 <__fixunssfsi+0x2c>
    1224:	b9 2f       	mov	r27, r25
    1226:	99 27       	eor	r25, r25
    1228:	b7 51       	subi	r27, 0x17	; 23
    122a:	a0 f0       	brcs	.+40     	; 0x1254 <__fixunssfsi+0x38>
    122c:	d1 f0       	breq	.+52     	; 0x1262 <__fixunssfsi+0x46>
    122e:	66 0f       	add	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	88 1f       	adc	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	1a f0       	brmi	.+6      	; 0x123e <__fixunssfsi+0x22>
    1238:	ba 95       	dec	r27
    123a:	c9 f7       	brne	.-14     	; 0x122e <__fixunssfsi+0x12>
    123c:	12 c0       	rjmp	.+36     	; 0x1262 <__fixunssfsi+0x46>
    123e:	b1 30       	cpi	r27, 0x01	; 1
    1240:	81 f0       	breq	.+32     	; 0x1262 <__fixunssfsi+0x46>
    1242:	9f d0       	rcall	.+318    	; 0x1382 <__fp_zero>
    1244:	b1 e0       	ldi	r27, 0x01	; 1
    1246:	08 95       	ret
    1248:	9c c0       	rjmp	.+312    	; 0x1382 <__fp_zero>
    124a:	67 2f       	mov	r22, r23
    124c:	78 2f       	mov	r23, r24
    124e:	88 27       	eor	r24, r24
    1250:	b8 5f       	subi	r27, 0xF8	; 248
    1252:	39 f0       	breq	.+14     	; 0x1262 <__fixunssfsi+0x46>
    1254:	b9 3f       	cpi	r27, 0xF9	; 249
    1256:	cc f3       	brlt	.-14     	; 0x124a <__fixunssfsi+0x2e>
    1258:	86 95       	lsr	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b3 95       	inc	r27
    1260:	d9 f7       	brne	.-10     	; 0x1258 <__fixunssfsi+0x3c>
    1262:	3e f4       	brtc	.+14     	; 0x1272 <__fixunssfsi+0x56>
    1264:	90 95       	com	r25
    1266:	80 95       	com	r24
    1268:	70 95       	com	r23
    126a:	61 95       	neg	r22
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	8f 4f       	sbci	r24, 0xFF	; 255
    1270:	9f 4f       	sbci	r25, 0xFF	; 255
    1272:	08 95       	ret

00001274 <__floatunsisf>:
    1274:	e8 94       	clt
    1276:	09 c0       	rjmp	.+18     	; 0x128a <__floatsisf+0x12>

00001278 <__floatsisf>:
    1278:	97 fb       	bst	r25, 7
    127a:	3e f4       	brtc	.+14     	; 0x128a <__floatsisf+0x12>
    127c:	90 95       	com	r25
    127e:	80 95       	com	r24
    1280:	70 95       	com	r23
    1282:	61 95       	neg	r22
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	8f 4f       	sbci	r24, 0xFF	; 255
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	99 23       	and	r25, r25
    128c:	a9 f0       	breq	.+42     	; 0x12b8 <__floatsisf+0x40>
    128e:	f9 2f       	mov	r31, r25
    1290:	96 e9       	ldi	r25, 0x96	; 150
    1292:	bb 27       	eor	r27, r27
    1294:	93 95       	inc	r25
    1296:	f6 95       	lsr	r31
    1298:	87 95       	ror	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b7 95       	ror	r27
    12a0:	f1 11       	cpse	r31, r1
    12a2:	f8 cf       	rjmp	.-16     	; 0x1294 <__floatsisf+0x1c>
    12a4:	fa f4       	brpl	.+62     	; 0x12e4 <__floatsisf+0x6c>
    12a6:	bb 0f       	add	r27, r27
    12a8:	11 f4       	brne	.+4      	; 0x12ae <__floatsisf+0x36>
    12aa:	60 ff       	sbrs	r22, 0
    12ac:	1b c0       	rjmp	.+54     	; 0x12e4 <__floatsisf+0x6c>
    12ae:	6f 5f       	subi	r22, 0xFF	; 255
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	8f 4f       	sbci	r24, 0xFF	; 255
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	16 c0       	rjmp	.+44     	; 0x12e4 <__floatsisf+0x6c>
    12b8:	88 23       	and	r24, r24
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <__floatsisf+0x48>
    12bc:	96 e9       	ldi	r25, 0x96	; 150
    12be:	11 c0       	rjmp	.+34     	; 0x12e2 <__floatsisf+0x6a>
    12c0:	77 23       	and	r23, r23
    12c2:	21 f0       	breq	.+8      	; 0x12cc <__floatsisf+0x54>
    12c4:	9e e8       	ldi	r25, 0x8E	; 142
    12c6:	87 2f       	mov	r24, r23
    12c8:	76 2f       	mov	r23, r22
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <__floatsisf+0x5e>
    12cc:	66 23       	and	r22, r22
    12ce:	71 f0       	breq	.+28     	; 0x12ec <__floatsisf+0x74>
    12d0:	96 e8       	ldi	r25, 0x86	; 134
    12d2:	86 2f       	mov	r24, r22
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	2a f0       	brmi	.+10     	; 0x12e4 <__floatsisf+0x6c>
    12da:	9a 95       	dec	r25
    12dc:	66 0f       	add	r22, r22
    12de:	77 1f       	adc	r23, r23
    12e0:	88 1f       	adc	r24, r24
    12e2:	da f7       	brpl	.-10     	; 0x12da <__floatsisf+0x62>
    12e4:	88 0f       	add	r24, r24
    12e6:	96 95       	lsr	r25
    12e8:	87 95       	ror	r24
    12ea:	97 f9       	bld	r25, 7
    12ec:	08 95       	ret

000012ee <__fp_inf>:
    12ee:	97 f9       	bld	r25, 7
    12f0:	9f 67       	ori	r25, 0x7F	; 127
    12f2:	80 e8       	ldi	r24, 0x80	; 128
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	08 95       	ret

000012fa <__fp_nan>:
    12fa:	9f ef       	ldi	r25, 0xFF	; 255
    12fc:	80 ec       	ldi	r24, 0xC0	; 192
    12fe:	08 95       	ret

00001300 <__fp_pscA>:
    1300:	00 24       	eor	r0, r0
    1302:	0a 94       	dec	r0
    1304:	16 16       	cp	r1, r22
    1306:	17 06       	cpc	r1, r23
    1308:	18 06       	cpc	r1, r24
    130a:	09 06       	cpc	r0, r25
    130c:	08 95       	ret

0000130e <__fp_pscB>:
    130e:	00 24       	eor	r0, r0
    1310:	0a 94       	dec	r0
    1312:	12 16       	cp	r1, r18
    1314:	13 06       	cpc	r1, r19
    1316:	14 06       	cpc	r1, r20
    1318:	05 06       	cpc	r0, r21
    131a:	08 95       	ret

0000131c <__fp_round>:
    131c:	09 2e       	mov	r0, r25
    131e:	03 94       	inc	r0
    1320:	00 0c       	add	r0, r0
    1322:	11 f4       	brne	.+4      	; 0x1328 <__fp_round+0xc>
    1324:	88 23       	and	r24, r24
    1326:	52 f0       	brmi	.+20     	; 0x133c <__fp_round+0x20>
    1328:	bb 0f       	add	r27, r27
    132a:	40 f4       	brcc	.+16     	; 0x133c <__fp_round+0x20>
    132c:	bf 2b       	or	r27, r31
    132e:	11 f4       	brne	.+4      	; 0x1334 <__fp_round+0x18>
    1330:	60 ff       	sbrs	r22, 0
    1332:	04 c0       	rjmp	.+8      	; 0x133c <__fp_round+0x20>
    1334:	6f 5f       	subi	r22, 0xFF	; 255
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	8f 4f       	sbci	r24, 0xFF	; 255
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	08 95       	ret

0000133e <__fp_split3>:
    133e:	57 fd       	sbrc	r21, 7
    1340:	90 58       	subi	r25, 0x80	; 128
    1342:	44 0f       	add	r20, r20
    1344:	55 1f       	adc	r21, r21
    1346:	59 f0       	breq	.+22     	; 0x135e <__fp_splitA+0x10>
    1348:	5f 3f       	cpi	r21, 0xFF	; 255
    134a:	71 f0       	breq	.+28     	; 0x1368 <__fp_splitA+0x1a>
    134c:	47 95       	ror	r20

0000134e <__fp_splitA>:
    134e:	88 0f       	add	r24, r24
    1350:	97 fb       	bst	r25, 7
    1352:	99 1f       	adc	r25, r25
    1354:	61 f0       	breq	.+24     	; 0x136e <__fp_splitA+0x20>
    1356:	9f 3f       	cpi	r25, 0xFF	; 255
    1358:	79 f0       	breq	.+30     	; 0x1378 <__fp_splitA+0x2a>
    135a:	87 95       	ror	r24
    135c:	08 95       	ret
    135e:	12 16       	cp	r1, r18
    1360:	13 06       	cpc	r1, r19
    1362:	14 06       	cpc	r1, r20
    1364:	55 1f       	adc	r21, r21
    1366:	f2 cf       	rjmp	.-28     	; 0x134c <__fp_split3+0xe>
    1368:	46 95       	lsr	r20
    136a:	f1 df       	rcall	.-30     	; 0x134e <__fp_splitA>
    136c:	08 c0       	rjmp	.+16     	; 0x137e <__fp_splitA+0x30>
    136e:	16 16       	cp	r1, r22
    1370:	17 06       	cpc	r1, r23
    1372:	18 06       	cpc	r1, r24
    1374:	99 1f       	adc	r25, r25
    1376:	f1 cf       	rjmp	.-30     	; 0x135a <__fp_splitA+0xc>
    1378:	86 95       	lsr	r24
    137a:	71 05       	cpc	r23, r1
    137c:	61 05       	cpc	r22, r1
    137e:	08 94       	sec
    1380:	08 95       	ret

00001382 <__fp_zero>:
    1382:	e8 94       	clt

00001384 <__fp_szero>:
    1384:	bb 27       	eor	r27, r27
    1386:	66 27       	eor	r22, r22
    1388:	77 27       	eor	r23, r23
    138a:	cb 01       	movw	r24, r22
    138c:	97 f9       	bld	r25, 7
    138e:	08 95       	ret

00001390 <__mulsf3>:
    1390:	0b d0       	rcall	.+22     	; 0x13a8 <__mulsf3x>
    1392:	c4 cf       	rjmp	.-120    	; 0x131c <__fp_round>
    1394:	b5 df       	rcall	.-150    	; 0x1300 <__fp_pscA>
    1396:	28 f0       	brcs	.+10     	; 0x13a2 <__mulsf3+0x12>
    1398:	ba df       	rcall	.-140    	; 0x130e <__fp_pscB>
    139a:	18 f0       	brcs	.+6      	; 0x13a2 <__mulsf3+0x12>
    139c:	95 23       	and	r25, r21
    139e:	09 f0       	breq	.+2      	; 0x13a2 <__mulsf3+0x12>
    13a0:	a6 cf       	rjmp	.-180    	; 0x12ee <__fp_inf>
    13a2:	ab cf       	rjmp	.-170    	; 0x12fa <__fp_nan>
    13a4:	11 24       	eor	r1, r1
    13a6:	ee cf       	rjmp	.-36     	; 0x1384 <__fp_szero>

000013a8 <__mulsf3x>:
    13a8:	ca df       	rcall	.-108    	; 0x133e <__fp_split3>
    13aa:	a0 f3       	brcs	.-24     	; 0x1394 <__mulsf3+0x4>

000013ac <__mulsf3_pse>:
    13ac:	95 9f       	mul	r25, r21
    13ae:	d1 f3       	breq	.-12     	; 0x13a4 <__mulsf3+0x14>
    13b0:	95 0f       	add	r25, r21
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	55 1f       	adc	r21, r21
    13b6:	62 9f       	mul	r22, r18
    13b8:	f0 01       	movw	r30, r0
    13ba:	72 9f       	mul	r23, r18
    13bc:	bb 27       	eor	r27, r27
    13be:	f0 0d       	add	r31, r0
    13c0:	b1 1d       	adc	r27, r1
    13c2:	63 9f       	mul	r22, r19
    13c4:	aa 27       	eor	r26, r26
    13c6:	f0 0d       	add	r31, r0
    13c8:	b1 1d       	adc	r27, r1
    13ca:	aa 1f       	adc	r26, r26
    13cc:	64 9f       	mul	r22, r20
    13ce:	66 27       	eor	r22, r22
    13d0:	b0 0d       	add	r27, r0
    13d2:	a1 1d       	adc	r26, r1
    13d4:	66 1f       	adc	r22, r22
    13d6:	82 9f       	mul	r24, r18
    13d8:	22 27       	eor	r18, r18
    13da:	b0 0d       	add	r27, r0
    13dc:	a1 1d       	adc	r26, r1
    13de:	62 1f       	adc	r22, r18
    13e0:	73 9f       	mul	r23, r19
    13e2:	b0 0d       	add	r27, r0
    13e4:	a1 1d       	adc	r26, r1
    13e6:	62 1f       	adc	r22, r18
    13e8:	83 9f       	mul	r24, r19
    13ea:	a0 0d       	add	r26, r0
    13ec:	61 1d       	adc	r22, r1
    13ee:	22 1f       	adc	r18, r18
    13f0:	74 9f       	mul	r23, r20
    13f2:	33 27       	eor	r19, r19
    13f4:	a0 0d       	add	r26, r0
    13f6:	61 1d       	adc	r22, r1
    13f8:	23 1f       	adc	r18, r19
    13fa:	84 9f       	mul	r24, r20
    13fc:	60 0d       	add	r22, r0
    13fe:	21 1d       	adc	r18, r1
    1400:	82 2f       	mov	r24, r18
    1402:	76 2f       	mov	r23, r22
    1404:	6a 2f       	mov	r22, r26
    1406:	11 24       	eor	r1, r1
    1408:	9f 57       	subi	r25, 0x7F	; 127
    140a:	50 40       	sbci	r21, 0x00	; 0
    140c:	8a f0       	brmi	.+34     	; 0x1430 <__mulsf3_pse+0x84>
    140e:	e1 f0       	breq	.+56     	; 0x1448 <__mulsf3_pse+0x9c>
    1410:	88 23       	and	r24, r24
    1412:	4a f0       	brmi	.+18     	; 0x1426 <__mulsf3_pse+0x7a>
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	bb 1f       	adc	r27, r27
    141a:	66 1f       	adc	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	91 50       	subi	r25, 0x01	; 1
    1422:	50 40       	sbci	r21, 0x00	; 0
    1424:	a9 f7       	brne	.-22     	; 0x1410 <__mulsf3_pse+0x64>
    1426:	9e 3f       	cpi	r25, 0xFE	; 254
    1428:	51 05       	cpc	r21, r1
    142a:	70 f0       	brcs	.+28     	; 0x1448 <__mulsf3_pse+0x9c>
    142c:	60 cf       	rjmp	.-320    	; 0x12ee <__fp_inf>
    142e:	aa cf       	rjmp	.-172    	; 0x1384 <__fp_szero>
    1430:	5f 3f       	cpi	r21, 0xFF	; 255
    1432:	ec f3       	brlt	.-6      	; 0x142e <__mulsf3_pse+0x82>
    1434:	98 3e       	cpi	r25, 0xE8	; 232
    1436:	dc f3       	brlt	.-10     	; 0x142e <__mulsf3_pse+0x82>
    1438:	86 95       	lsr	r24
    143a:	77 95       	ror	r23
    143c:	67 95       	ror	r22
    143e:	b7 95       	ror	r27
    1440:	f7 95       	ror	r31
    1442:	e7 95       	ror	r30
    1444:	9f 5f       	subi	r25, 0xFF	; 255
    1446:	c1 f7       	brne	.-16     	; 0x1438 <__mulsf3_pse+0x8c>
    1448:	fe 2b       	or	r31, r30
    144a:	88 0f       	add	r24, r24
    144c:	91 1d       	adc	r25, r1
    144e:	96 95       	lsr	r25
    1450:	87 95       	ror	r24
    1452:	97 f9       	bld	r25, 7
    1454:	08 95       	ret

00001456 <__udivmodsi4>:
    1456:	a1 e2       	ldi	r26, 0x21	; 33
    1458:	1a 2e       	mov	r1, r26
    145a:	aa 1b       	sub	r26, r26
    145c:	bb 1b       	sub	r27, r27
    145e:	fd 01       	movw	r30, r26
    1460:	0d c0       	rjmp	.+26     	; 0x147c <__udivmodsi4_ep>

00001462 <__udivmodsi4_loop>:
    1462:	aa 1f       	adc	r26, r26
    1464:	bb 1f       	adc	r27, r27
    1466:	ee 1f       	adc	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	a2 17       	cp	r26, r18
    146c:	b3 07       	cpc	r27, r19
    146e:	e4 07       	cpc	r30, r20
    1470:	f5 07       	cpc	r31, r21
    1472:	20 f0       	brcs	.+8      	; 0x147c <__udivmodsi4_ep>
    1474:	a2 1b       	sub	r26, r18
    1476:	b3 0b       	sbc	r27, r19
    1478:	e4 0b       	sbc	r30, r20
    147a:	f5 0b       	sbc	r31, r21

0000147c <__udivmodsi4_ep>:
    147c:	66 1f       	adc	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	88 1f       	adc	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	1a 94       	dec	r1
    1486:	69 f7       	brne	.-38     	; 0x1462 <__udivmodsi4_loop>
    1488:	60 95       	com	r22
    148a:	70 95       	com	r23
    148c:	80 95       	com	r24
    148e:	90 95       	com	r25
    1490:	9b 01       	movw	r18, r22
    1492:	ac 01       	movw	r20, r24
    1494:	bd 01       	movw	r22, r26
    1496:	cf 01       	movw	r24, r30
    1498:	08 95       	ret

0000149a <__itoa_ncheck>:
    149a:	bb 27       	eor	r27, r27
    149c:	4a 30       	cpi	r20, 0x0A	; 10
    149e:	31 f4       	brne	.+12     	; 0x14ac <__itoa_ncheck+0x12>
    14a0:	99 23       	and	r25, r25
    14a2:	22 f4       	brpl	.+8      	; 0x14ac <__itoa_ncheck+0x12>
    14a4:	bd e2       	ldi	r27, 0x2D	; 45
    14a6:	90 95       	com	r25
    14a8:	81 95       	neg	r24
    14aa:	9f 4f       	sbci	r25, 0xFF	; 255
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <__utoa_common>

000014ae <__utoa_ncheck>:
    14ae:	bb 27       	eor	r27, r27

000014b0 <__utoa_common>:
    14b0:	fb 01       	movw	r30, r22
    14b2:	55 27       	eor	r21, r21
    14b4:	aa 27       	eor	r26, r26
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	aa 1f       	adc	r26, r26
    14bc:	a4 17       	cp	r26, r20
    14be:	10 f0       	brcs	.+4      	; 0x14c4 <__utoa_common+0x14>
    14c0:	a4 1b       	sub	r26, r20
    14c2:	83 95       	inc	r24
    14c4:	50 51       	subi	r21, 0x10	; 16
    14c6:	b9 f7       	brne	.-18     	; 0x14b6 <__utoa_common+0x6>
    14c8:	a0 5d       	subi	r26, 0xD0	; 208
    14ca:	aa 33       	cpi	r26, 0x3A	; 58
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <__utoa_common+0x20>
    14ce:	a9 5d       	subi	r26, 0xD9	; 217
    14d0:	a1 93       	st	Z+, r26
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	79 f7       	brne	.-34     	; 0x14b4 <__utoa_common+0x4>
    14d6:	b1 11       	cpse	r27, r1
    14d8:	b1 93       	st	Z+, r27
    14da:	11 92       	st	Z+, r1
    14dc:	cb 01       	movw	r24, r22
    14de:	00 c0       	rjmp	.+0      	; 0x14e0 <strrev>

000014e0 <strrev>:
    14e0:	dc 01       	movw	r26, r24
    14e2:	fc 01       	movw	r30, r24
    14e4:	67 2f       	mov	r22, r23
    14e6:	71 91       	ld	r23, Z+
    14e8:	77 23       	and	r23, r23
    14ea:	e1 f7       	brne	.-8      	; 0x14e4 <strrev+0x4>
    14ec:	32 97       	sbiw	r30, 0x02	; 2
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <strrev+0x18>
    14f0:	7c 91       	ld	r23, X
    14f2:	6d 93       	st	X+, r22
    14f4:	70 83       	st	Z, r23
    14f6:	62 91       	ld	r22, -Z
    14f8:	ae 17       	cp	r26, r30
    14fa:	bf 07       	cpc	r27, r31
    14fc:	c8 f3       	brcs	.-14     	; 0x14f0 <strrev+0x10>
    14fe:	08 95       	ret

00001500 <_exit>:
    1500:	f8 94       	cli

00001502 <__stop_program>:
    1502:	ff cf       	rjmp	.-2      	; 0x1502 <__stop_program>
