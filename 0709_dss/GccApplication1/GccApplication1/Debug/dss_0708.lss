
dss_0708.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  00001d80  00001e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000533  008001a4  008001a4  00001eb8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ee8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003022  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4f  00000000  00000000  00005212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f7f  00000000  00000000  00005d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000854  00000000  00000000  00007ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000910  00000000  00000000  00008534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002be6  00000000  00000000  00008e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000ba2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7d c5       	rjmp	.+2810   	; 0xafc <__ctors_end>
       2:	00 00       	nop
       4:	99 c5       	rjmp	.+2866   	; 0xb38 <__bad_interrupt>
       6:	00 00       	nop
       8:	97 c5       	rjmp	.+2862   	; 0xb38 <__bad_interrupt>
       a:	00 00       	nop
       c:	95 c5       	rjmp	.+2858   	; 0xb38 <__bad_interrupt>
       e:	00 00       	nop
      10:	93 c5       	rjmp	.+2854   	; 0xb38 <__bad_interrupt>
      12:	00 00       	nop
      14:	91 c5       	rjmp	.+2850   	; 0xb38 <__bad_interrupt>
      16:	00 00       	nop
      18:	8f c5       	rjmp	.+2846   	; 0xb38 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8d c5       	rjmp	.+2842   	; 0xb38 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8b c5       	rjmp	.+2838   	; 0xb38 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_9>
      28:	87 c5       	rjmp	.+2830   	; 0xb38 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	85 c5       	rjmp	.+2826   	; 0xb38 <__bad_interrupt>
      2e:	00 00       	nop
      30:	83 c5       	rjmp	.+2822   	; 0xb38 <__bad_interrupt>
      32:	00 00       	nop
      34:	81 c5       	rjmp	.+2818   	; 0xb38 <__bad_interrupt>
      36:	00 00       	nop
      38:	7f c5       	rjmp	.+2814   	; 0xb38 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7d c5       	rjmp	.+2810   	; 0xb38 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7b c5       	rjmp	.+2806   	; 0xb38 <__bad_interrupt>
      42:	00 00       	nop
      44:	79 c5       	rjmp	.+2802   	; 0xb38 <__bad_interrupt>
      46:	00 00       	nop
      48:	77 c5       	rjmp	.+2798   	; 0xb38 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	75 c5       	rjmp	.+2794   	; 0xb38 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__vector_20>
      54:	71 c5       	rjmp	.+2786   	; 0xb38 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__vector_22>
      5c:	6d c5       	rjmp	.+2778   	; 0xb38 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6b c5       	rjmp	.+2774   	; 0xb38 <__bad_interrupt>
      62:	00 00       	nop
      64:	69 c5       	rjmp	.+2770   	; 0xb38 <__bad_interrupt>
      66:	00 00       	nop
      68:	67 c5       	rjmp	.+2766   	; 0xb38 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	65 c5       	rjmp	.+2762   	; 0xb38 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_28>
      74:	61 c5       	rjmp	.+2754   	; 0xb38 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__vector_30>
      7c:	5d c5       	rjmp	.+2746   	; 0xb38 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5b c5       	rjmp	.+2742   	; 0xb38 <__bad_interrupt>
      82:	00 00       	nop
      84:	59 c5       	rjmp	.+2738   	; 0xb38 <__bad_interrupt>
      86:	00 00       	nop
      88:	57 c5       	rjmp	.+2734   	; 0xb38 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	20 20       	and	r2, r0
      8e:	20 74       	andi	r18, 0x40	; 64
      90:	68 65       	ori	r22, 0x58	; 88
      92:	20 66       	ori	r18, 0x60	; 96
      94:	72 65       	ori	r23, 0x52	; 82
      96:	71 75       	andi	r23, 0x51	; 81
      98:	65 6e       	ori	r22, 0xE5	; 229
      9a:	63 65       	ori	r22, 0x53	; 83
      9c:	2e 2e       	mov	r2, r30
      9e:	2e 00       	.word	0x002e	; ????

000000a0 <__c.2347>:
      a0:	20 20 20 20 77 61 69 74 69 6e 67 20 66 6f 72 20         waiting for 
	...

000000b1 <__c.2328>:
      b1:	4c 69 20 58 75 65 6a 69 6e 67 0d 0a 00              Li Xuejing...

000000be <__c.2326>:
      be:	57 61 6e 67 20 53 68 69 68 61 6e 67 0d 0a 00        Wang Shihang...

000000cd <__c.2324>:
      cd:	4d 65 6d 62 65 72 73 3a 0d 0a 00                    Members:...

000000d8 <__c.2322>:
      d8:	44 44 53 2d 53 69 67 6e 61 6c 67 65 6e 65 72 61     DDS-Signalgenera
      e8:	74 6f 72 0d 0a 00                                   tor...

000000ee <__c.2320>:
      ee:	50 72 6f 6a 65 63 74 20 30 34 3a 0d 0a 00           Project 04:...

000000fc <raster>:
      fc:	ff 01 01 01 01 01 01 01 01 03 01 01 01 01 01 01     ................
     10c:	01 01 01 03 01 01 01 01 01 01 01 01 01 03 01 01     ................
     11c:	01 01 01 01 01 01 01 03 01 01 01 01 01 01 01 01     ................
     12c:	01 ab 01 01 01 01 01 01 01 01 01 03 01 01 01 01     ................
     13c:	01 01 01 01 01 03 01 01 01 01 01 01 01 01 01 03     ................
     14c:	01 01 01 01 01 01 01 01 01 03 01 01 01 01 01 01     ................
     15c:	01 01 01 01 ff 00 00 f0 f8 8c 8c f8 f0 00 00 fc     ................
     16c:	fc 00 00 fc fc 00 00 04 fc fc 44 c4 fc 38 00 00     ..........D..8..
     17c:	ff 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
     18c:	00 00 00 08 00 00 00 00 00 00 00 00 00 08 00 00     ................
     19c:	00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00     ................
     1ac:	08 aa 08 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     1bc:	00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 08     ................
	...
     1d4:	00 08 00 00 00 00 00 00 00 00 00 08 ff 00 00 c7     ................
     1e4:	27 20 c0 07 07 00 00 01 03 06 06 03 01 00 00 04     ' ..............
     1f4:	07 07 00 00 07 07 00 00 ff 20 00 00 00 00 00 00     ......... ......
     204:	00 20 00 00 00 00 00 00 00 00 00 20 00 00 00 00     . ......... ....
     214:	00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 20     ..... ......... 
	...
     22c:	20 aa 20 00 00 00 00 00 00 00 00 20 00 00 00 00      . ........ ....
     23c:	00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 20     ..... ......... 
	...
     254:	00 20 00 00 00 00 00 00 00 00 00 20 ff 00 00 19     . ......... ....
     264:	22 22 1c 00 1e 21 21 21 00 1e 21 21 1e 00 ff 21     ""...!!!..!!...!
     274:	21 1e 00 1e 29 29 2e 00 ff 80 00 80 00 80 00 80     !...))..........
     284:	00 c0 00 80 00 80 00 80 00 80 00 c0 00 80 00 80     ................
     294:	00 80 00 80 00 c0 00 80 00 80 00 80 00 80 00 c0     ................
     2a4:	00 80 00 80 00 80 00 80 00 aa 00 80 00 80 00 80     ................
     2b4:	00 80 00 c0 00 80 00 80 00 80 00 80 00 c0 00 80     ................
     2c4:	00 80 00 80 00 80 00 c0 00 80 00 80 00 80 00 80     ................
     2d4:	00 c0 00 80 00 80 00 80 00 80 00 80 ff 00 00 00     ................
     2e4:	f0 50 10 00 f0 50 a0 00 f0 50 10 00 e0 10 10 e0     .P...P...P......
	...
     2fc:	ff 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00     ................
     30c:	00 00 00 01 00 00 00 00 00 00 00 00 00 01 00 00     ................
     31c:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     32c:	00 aa 00 00 00 00 00 00 00 00 00 01 00 00 00 00     ................
     33c:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 01     ................
	...
     354:	00 01 00 00 00 00 00 00 00 00 00 00 ff 00 00 00     ................
     364:	01 00 00 00 01 00 01 00 01 01 01 00 00 01 01 01     ................
	...
     37c:	ff 02 00 00 00 00 00 00 00 02 00 00 00 00 00 00     ................
     38c:	00 00 00 02 00 00 00 00 00 00 00 00 00 02 00 00     ................
     39c:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00     ................
     3ac:	02 aa 02 00 00 00 00 00 00 00 00 02 00 00 00 00     ................
     3bc:	00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 02     ................
	...
     3d4:	00 02 00 00 00 00 00 00 00 00 00 02 ff 00 00 00     ................
	...
     3fc:	ff 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
     40c:	00 00 00 08 00 00 00 00 00 00 00 00 00 08 00 00     ................
     41c:	00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00     ................
     42c:	08 aa 08 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     43c:	00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 08     ................
	...
     454:	00 08 00 00 00 00 00 00 00 00 00 08 ff 00 00 00     ................
	...
     470:	f8 20 d8 00 f8 20 f8 00 90 d0 b0 00 ff 80 80 80     . ... ..........
     480:	80 80 80 80 80 a0 80 80 80 80 80 80 80 80 80 a0     ................
     490:	80 80 80 80 80 80 80 80 80 a0 80 80 80 80 80 80     ................
     4a0:	80 80 80 a0 80 80 80 80 80 80 80 80 80 aa 80 80     ................
     4b0:	80 80 80 80 80 80 80 a0 80 80 80 80 80 80 80 80     ................
     4c0:	80 a0 80 80 80 80 80 80 80 80 80 a0 80 80 80 80     ................
     4d0:	80 80 80 80 80 a0 80 80 80 80 80 80 80 80 80 80     ................
     4e0:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000004fc <font>:
     4fc:	00 00 00 00 00 00 00 3e 45 51 45 3e 00 3e 6b 6f     .......>EQE>.>ko
     50c:	6b 3e 00 1c 3e 7c 3e 1c 00 18 3c 7e 3c 18 00 30     k>..>|>...<~<..0
     51c:	36 7f 36 30 00 18 5c 7e 5c 18 00 00 00 00 00 00     6.60..\~\.......
	...
     53c:	00 00 00 30 48 4a 36 0e 00 06 29 79 29 06 00 00     ...0HJ6...)y)...
     54c:	00 00 00 00 00 60 7e 0a 35 3f 00 2a 1c 36 1c 2a     .....`~.5?.*.6.*
     55c:	00 00 7f 3e 1c 08 00 08 1c 3e 7f 00 00 14 36 7f     ...>.....>....6.
     56c:	36 14 00 00 5f 00 5f 00 00 06 09 7f 01 7f 00 22     6..._._........"
     57c:	4d 55 59 22 00 60 60 60 60 00 00 14 b6 ff b6 14     MUY".````.......
     58c:	00 04 06 7f 06 04 00 10 30 7f 30 10 00 08 08 3e     ........0.0....>
     59c:	1c 08 00 08 1c 3e 08 08 00 78 40 40 40 40 00 08     .....>...x@@@@..
     5ac:	3e 08 3e 08 00 30 3c 3f 3c 30 00 03 0f 3f 0f 03     >.>..0<?<0...?..
	...
     5c4:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     5d4:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     5e4:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     5f4:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     604:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     614:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     624:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     634:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     644:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     654:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     664:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     674:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     684:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     694:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     6a4:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     6b4:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     6c4:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     6d4:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     6e4:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     6f4:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     704:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     714:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     724:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     734:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     744:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     754:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     764:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     774:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     784:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     794:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     7a4:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     7b4:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     7c4:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     7d4:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     7e4:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     7f4:	01 00 00 3c 26 23 26 3c 00 1e a1 e1 21 12 00 3d     ...<&#&<....!..=
     804:	40 20 7d 00 00 38 54 54 55 09 00 20 55 55 55 78     @ }..8TTU.. UUUx
     814:	00 20 55 54 55 78 00 20 55 55 54 78 00 20 57 55     . UTUx. UUTx. WU
     824:	57 78 00 1c a2 e2 22 14 00 38 55 55 55 08 00 38     Wx...."..8UUU..8
     834:	55 54 55 08 00 38 55 55 54 08 00 00 01 7c 41 00     UTU..8UUT....|A.
     844:	00 00 01 7d 41 00 00 00 01 7c 40 00 00 70 29 24     ...}A....|@..p)$
     854:	29 70 00 78 2f 25 2f 78 00 7c 54 54 55 45 00 34     )p.x/%/x.|TTUE.4
     864:	54 7c 54 58 00 7e 09 7f 49 49 00 38 45 45 39 00     T|TX.~..II.8EE9.
     874:	00 38 45 44 39 00 00 39 45 44 38 00 00 3c 41 21     .8ED9..9ED8..<A!
     884:	7d 00 00 3d 41 20 7c 00 00 9c a1 60 3d 00 00 3d     }..=A |....`=..=
     894:	42 42 3d 00 00 3c 41 40 3d 00 80 70 68 58 38 04     BB=..<A@=..phX8.
     8a4:	00 48 3e 49 49 62 00 7e 61 5d 43 3f 00 22 14 08     .H>IIb.~a]C?."..
     8b4:	14 22 00 40 88 7e 09 02 00 20 54 55 55 78 00 00     .".@.~... TUUx..
     8c4:	00 7d 41 00 00 38 44 45 39 00 00 3c 40 21 7d 00     .}A..8DE9..<@!}.
     8d4:	00 7a 09 0a 71 00 00 7a 11 22 79 00 00 08 55 55     .z..q..z."y...UU
     8e4:	55 5e 00 4e 51 51 4e 00 00 30 48 4d 40 20 3e 41     U^.NQQN..0HM@ >A
     8f4:	5d 4b 55 3e 04 04 04 04 04 1c 00 17 08 4c 6a 50     ]KU>.........LjP
     904:	00 17 08 34 2a 78 00 00 30 7d 30 00 00 08 14 00     ...4*x..0}0.....
     914:	08 14 00 14 08 00 14 08 44 11 44 11 44 11 aa 55     ........D.D.D..U
     924:	aa 55 aa 55 bb ee bb ee bb ee 00 00 00 ff 00 00     .U.U............
     934:	08 08 08 ff 00 00 00 70 28 25 29 70 00 70 29 25     .......p(%)p.p)%
     944:	29 70 00 70 29 25 28 70 3e 41 5d 55 41 3e 0a fb     )p.p)%(p>A]UA>..
     954:	00 ff 00 00 00 ff 00 ff 00 00 0a fa 02 fe 00 00     ................
     964:	0a 0b 08 0f 00 00 00 18 24 66 24 00 00 29 2a 7c     ........$f$..)*|
     974:	2a 29 08 08 08 f8 00 00 00 00 00 0f 08 08 08 08     *)..............
     984:	08 0f 08 08 08 08 08 f8 08 08 00 00 00 ff 08 08     ................
     994:	08 08 08 08 08 08 08 08 08 ff 08 08 00 20 56 55     ............. VU
     9a4:	56 79 00 70 2a 25 2a 71 00 0f 08 0b 0a 0a 00 fe     Vy.p*%*q........
     9b4:	02 fa 0a 0a 0a 0b 08 0b 0a 0a 0a fa 02 fa 0a 0a     ................
     9c4:	00 ff 00 fb 0a 0a 0a 0a 0a 0a 0a 0a 0a fb 00 fb     ................
     9d4:	0a 0a 00 5d 22 22 22 5d 00 22 55 59 30 00 00 08     ...]"""]."UY0...
     9e4:	7f 49 41 3e 00 7c 55 55 55 44 00 7c 55 54 55 44     .IA>.|UUUD.|UTUD
     9f4:	00 7c 55 55 54 44 00 00 00 07 00 00 00 00 44 7d     .|UUTD........D}
     a04:	45 00 00 00 45 7d 45 00 00 00 45 7c 45 00 08 08     E...E}E...E|E...
     a14:	08 0f 00 00 00 00 00 f8 08 08 ff ff ff ff ff ff     ................
     a24:	f0 f0 f0 f0 f0 f0 00 00 00 77 00 00 00 00 45 7d     .........w....E}
     a34:	44 00 0f 0f 0f 0f 0f 0f 00 3c 42 43 3d 00 00 fe     D........<BC=...
     a44:	4a 4a 34 00 00 3c 43 43 3d 00 00 3d 43 42 3c 00     JJ4..<CC=..=CB<.
     a54:	00 32 49 4a 31 00 00 3a 45 46 39 00 00 fc 20 20     .2IJ1..:EF9...  
     a64:	1c 00 00 fe aa 28 10 00 00 ff a5 24 18 00 00 3c     .....(.....$...<
     a74:	40 41 3d 00 00 3c 41 41 3d 00 00 3d 41 40 3c 00     @A=..<AA=..=A@<.
     a84:	00 9c a0 61 3d 00 00 04 08 71 09 04 00 00 02 02     ...a=....q......
     a94:	02 00 00 00 07 03 00 00 00 00 08 08 08 00 00 00     ................
     aa4:	24 2e 24 00 00 24 24 24 24 24 05 17 0a 34 2a 78     $.$..$$$$$...4*x
     ab4:	00 06 09 7f 01 7f 00 22 4d 55 59 22 00 08 08 2a     ......."MUY"...*
     ac4:	08 08 00 00 08 18 18 00 00 06 09 09 06 00 00 00     ................
     ad4:	08 00 08 00 00 00 08 00 00 00 00 02 0f 00 00 00     ................
     ae4:	00 09 0f 05 00 00 00 09 0d 0a 00 00 00 3c 3c 3c     .............<<<
     af4:	3c 00 00 00 00 00 00 00                             <.......

00000afc <__ctors_end>:
     afc:	11 24       	eor	r1, r1
     afe:	1f be       	out	0x3f, r1	; 63
     b00:	cf ef       	ldi	r28, 0xFF	; 255
     b02:	d0 e4       	ldi	r29, 0x40	; 64
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	cd bf       	out	0x3d, r28	; 61

00000b08 <__do_copy_data>:
     b08:	11 e0       	ldi	r17, 0x01	; 1
     b0a:	a0 e0       	ldi	r26, 0x00	; 0
     b0c:	b1 e0       	ldi	r27, 0x01	; 1
     b0e:	e0 e8       	ldi	r30, 0x80	; 128
     b10:	fd e1       	ldi	r31, 0x1D	; 29
     b12:	00 e0       	ldi	r16, 0x00	; 0
     b14:	0b bf       	out	0x3b, r16	; 59
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <__do_copy_data+0x14>
     b18:	07 90       	elpm	r0, Z+
     b1a:	0d 92       	st	X+, r0
     b1c:	a4 3a       	cpi	r26, 0xA4	; 164
     b1e:	b1 07       	cpc	r27, r17
     b20:	d9 f7       	brne	.-10     	; 0xb18 <__do_copy_data+0x10>

00000b22 <__do_clear_bss>:
     b22:	26 e0       	ldi	r18, 0x06	; 6
     b24:	a4 ea       	ldi	r26, 0xA4	; 164
     b26:	b1 e0       	ldi	r27, 0x01	; 1
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <.do_clear_bss_start>

00000b2a <.do_clear_bss_loop>:
     b2a:	1d 92       	st	X+, r1

00000b2c <.do_clear_bss_start>:
     b2c:	a7 3d       	cpi	r26, 0xD7	; 215
     b2e:	b2 07       	cpc	r27, r18
     b30:	e1 f7       	brne	.-8      	; 0xb2a <.do_clear_bss_loop>
     b32:	3a d3       	rcall	.+1652   	; 0x11a8 <main>
     b34:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <_exit>

00000b38 <__bad_interrupt>:
     b38:	63 ca       	rjmp	.-2874   	; 0x0 <__vectors>

00000b3a <get_frequence>:
	PORTD &= ~(1<<FQUP);
}

void fillDataLcdBuffer (uint8_t address, uint8_t data)
{
	dataLcdBuffer[address] = data;
     b3a:	2f ef       	ldi	r18, 0xFF	; 255
     b3c:	83 ec       	ldi	r24, 0xC3	; 195
     b3e:	99 e0       	ldi	r25, 0x09	; 9
     b40:	21 50       	subi	r18, 0x01	; 1
     b42:	80 40       	sbci	r24, 0x00	; 0
     b44:	90 40       	sbci	r25, 0x00	; 0
     b46:	e1 f7       	brne	.-8      	; 0xb40 <get_frequence+0x6>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <get_frequence+0x10>
     b4a:	00 00       	nop
     b4c:	14 d4       	rcall	.+2088   	; 0x1376 <LCD_Clear>
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	d8 d4       	rcall	.+2480   	; 0x1504 <LCD_GotoXY>
     b54:	80 ea       	ldi	r24, 0xA0	; 160
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	c4 d4       	rcall	.+2440   	; 0x14e2 <LCD_PutString_P>
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	d2 d4       	rcall	.+2468   	; 0x1504 <LCD_GotoXY>
     b60:	8c e8       	ldi	r24, 0x8C	; 140
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	be d4       	rcall	.+2428   	; 0x14e2 <LCD_PutString_P>
     b66:	67 e0       	ldi	r22, 0x07	; 7
     b68:	84 e1       	ldi	r24, 0x14	; 20
     b6a:	cc d4       	rcall	.+2456   	; 0x1504 <LCD_GotoXY>
     b6c:	80 e1       	ldi	r24, 0x10	; 16
     b6e:	61 d4       	rcall	.+2242   	; 0x1432 <LCD_PutChar>
     b70:	b7 d3       	rcall	.+1902   	; 0x12e0 <LCD_Update>
     b72:	78 94       	sei
     b74:	2f ef       	ldi	r18, 0xFF	; 255
     b76:	83 ec       	ldi	r24, 0xC3	; 195
     b78:	99 e0       	ldi	r25, 0x09	; 9
     b7a:	21 50       	subi	r18, 0x01	; 1
     b7c:	80 40       	sbci	r24, 0x00	; 0
     b7e:	90 40       	sbci	r25, 0x00	; 0
     b80:	e1 f7       	brne	.-8      	; 0xb7a <get_frequence+0x40>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <get_frequence+0x4a>
     b84:	00 00       	nop
     b86:	03 9b       	sbis	0x00, 3	; 0
     b88:	32 c0       	rjmp	.+100    	; 0xbee <get_frequence+0xb4>
     b8a:	80 91 2d 02 	lds	r24, 0x022D
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	89 f7       	brne	.-30     	; 0xb74 <get_frequence+0x3a>
     b92:	e7 e3       	ldi	r30, 0x37	; 55
     b94:	f6 e0       	ldi	r31, 0x06	; 6
     b96:	80 81       	ld	r24, Z
     b98:	21 81       	ldd	r18, Z+1	; 0x01
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	98 2f       	mov	r25, r24
     b9e:	88 27       	eor	r24, r24
     ba0:	82 0f       	add	r24, r18
     ba2:	91 1d       	adc	r25, r1
     ba4:	90 93 a7 01 	sts	0x01A7, r25
     ba8:	80 93 a6 01 	sts	0x01A6, r24
     bac:	22 81       	ldd	r18, Z+2	; 0x02
     bae:	43 81       	ldd	r20, Z+3	; 0x03
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	32 2f       	mov	r19, r18
     bb4:	22 27       	eor	r18, r18
     bb6:	24 0f       	add	r18, r20
     bb8:	31 1d       	adc	r19, r1
     bba:	30 93 a5 01 	sts	0x01A5, r19
     bbe:	20 93 a4 01 	sts	0x01A4, r18
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	dc 01       	movw	r26, r24
     bc8:	99 27       	eor	r25, r25
     bca:	88 27       	eor	r24, r24
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	a1 1d       	adc	r26, r1
     bd2:	b1 1d       	adc	r27, r1
     bd4:	80 93 a8 01 	sts	0x01A8, r24
     bd8:	90 93 a9 01 	sts	0x01A9, r25
     bdc:	a0 93 aa 01 	sts	0x01AA, r26
     be0:	b0 93 ab 01 	sts	0x01AB, r27
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	da d6       	rcall	.+3508   	; 0x199e <uart1_tx_frame>
     bea:	10 92 2d 02 	sts	0x022D, r1
     bee:	08 95       	ret

00000bf0 <start>:
     bf0:	85 e1       	ldi	r24, 0x15	; 21
     bf2:	c2 d4       	rcall	.+2436   	; 0x1578 <Backlight_LED>
     bf4:	8e ee       	ldi	r24, 0xEE	; 238
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	74 d4       	rcall	.+2280   	; 0x14e2 <LCD_PutString_P>
     bfa:	88 ed       	ldi	r24, 0xD8	; 216
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	71 d4       	rcall	.+2274   	; 0x14e2 <LCD_PutString_P>
     c00:	8d ec       	ldi	r24, 0xCD	; 205
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	6e d4       	rcall	.+2268   	; 0x14e2 <LCD_PutString_P>
     c06:	8e eb       	ldi	r24, 0xBE	; 190
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	6b d4       	rcall	.+2262   	; 0x14e2 <LCD_PutString_P>
     c0c:	81 eb       	ldi	r24, 0xB1	; 177
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	68 d4       	rcall	.+2256   	; 0x14e2 <LCD_PutString_P>
     c12:	66 d3       	rcall	.+1740   	; 0x12e0 <LCD_Update>
     c14:	67 e0       	ldi	r22, 0x07	; 7
     c16:	84 e1       	ldi	r24, 0x14	; 20
     c18:	75 d4       	rcall	.+2282   	; 0x1504 <LCD_GotoXY>
     c1a:	80 e1       	ldi	r24, 0x10	; 16
     c1c:	0a d4       	rcall	.+2068   	; 0x1432 <LCD_PutChar>
     c1e:	60 d3       	rcall	.+1728   	; 0x12e0 <LCD_Update>
     c20:	03 99       	sbic	0x00, 3	; 0
     c22:	fe cf       	rjmp	.-4      	; 0xc20 <start+0x30>
     c24:	03 9b       	sbis	0x00, 3	; 0
     c26:	fe cf       	rjmp	.-4      	; 0xc24 <start+0x34>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	89 ef       	ldi	r24, 0xF9	; 249
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	80 40       	sbci	r24, 0x00	; 0
     c32:	90 40       	sbci	r25, 0x00	; 0
     c34:	e1 f7       	brne	.-8      	; 0xc2e <start+0x3e>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <start+0x48>
     c38:	00 00       	nop
     c3a:	03 99       	sbic	0x00, 3	; 0
     c3c:	fe cf       	rjmp	.-4      	; 0xc3a <start+0x4a>
     c3e:	08 95       	ret

00000c40 <adc_init>:
     c40:	81 e6       	ldi	r24, 0x61	; 97
     c42:	80 93 7c 00 	sts	0x007C, r24
     c46:	ea e7       	ldi	r30, 0x7A	; 122
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	82 6c       	ori	r24, 0xC2	; 194
     c4e:	80 83       	st	Z, r24
     c50:	08 95       	ret

00000c52 <AD9850_setup>:
     c52:	84 b1       	in	r24, 0x04	; 4
     c54:	86 60       	ori	r24, 0x06	; 6
     c56:	84 b9       	out	0x04, r24	; 4
     c58:	85 b1       	in	r24, 0x05	; 5
     c5a:	89 7f       	andi	r24, 0xF9	; 249
     c5c:	85 b9       	out	0x05, r24	; 5
     c5e:	8a b1       	in	r24, 0x0a	; 10
     c60:	80 6c       	ori	r24, 0xC0	; 192
     c62:	8a b9       	out	0x0a, r24	; 10
     c64:	8b b1       	in	r24, 0x0b	; 11
     c66:	8f 73       	andi	r24, 0x3F	; 63
     c68:	8b b9       	out	0x0b, r24	; 11
     c6a:	08 95       	ret

00000c6c <AD9850_reset>:
     c6c:	2a 98       	cbi	0x05, 2	; 5
     c6e:	5e 98       	cbi	0x0b, 6	; 11
     c70:	5f 98       	cbi	0x0b, 7	; 11
     c72:	8a e1       	ldi	r24, 0x1A	; 26
     c74:	8a 95       	dec	r24
     c76:	f1 f7       	brne	.-4      	; 0xc74 <AD9850_reset+0x8>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <AD9850_reset+0xe>
     c7a:	5f 9a       	sbi	0x0b, 7	; 11
     c7c:	8a e1       	ldi	r24, 0x1A	; 26
     c7e:	8a 95       	dec	r24
     c80:	f1 f7       	brne	.-4      	; 0xc7e <AD9850_reset+0x12>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <AD9850_reset+0x18>
     c84:	5f 98       	cbi	0x0b, 7	; 11
     c86:	8a e1       	ldi	r24, 0x1A	; 26
     c88:	8a 95       	dec	r24
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <AD9850_reset+0x1c>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <AD9850_reset+0x22>
     c8e:	2a 98       	cbi	0x05, 2	; 5
     c90:	8a e1       	ldi	r24, 0x1A	; 26
     c92:	8a 95       	dec	r24
     c94:	f1 f7       	brne	.-4      	; 0xc92 <AD9850_reset+0x26>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <AD9850_reset+0x2c>
     c98:	2a 9a       	sbi	0x05, 2	; 5
     c9a:	8a e1       	ldi	r24, 0x1A	; 26
     c9c:	8a 95       	dec	r24
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <AD9850_reset+0x30>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <AD9850_reset+0x36>
     ca2:	2a 98       	cbi	0x05, 2	; 5
     ca4:	8a e1       	ldi	r24, 0x1A	; 26
     ca6:	8a 95       	dec	r24
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <AD9850_reset+0x3a>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <AD9850_reset+0x40>
     cac:	29 98       	cbi	0x05, 1	; 5
     cae:	5e 98       	cbi	0x0b, 6	; 11
     cb0:	8a e1       	ldi	r24, 0x1A	; 26
     cb2:	8a 95       	dec	r24
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <AD9850_reset+0x46>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <AD9850_reset+0x4c>
     cb8:	5e 9a       	sbi	0x0b, 6	; 11
     cba:	8a e1       	ldi	r24, 0x1A	; 26
     cbc:	8a 95       	dec	r24
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <AD9850_reset+0x50>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <AD9850_reset+0x56>
     cc2:	5e 98       	cbi	0x0b, 6	; 11
     cc4:	8a e1       	ldi	r24, 0x1A	; 26
     cc6:	8a 95       	dec	r24
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <AD9850_reset+0x5a>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <AD9850_reset+0x60>
     ccc:	08 95       	ret

00000cce <AD9850_Setfrequency>:
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	34 e2       	ldi	r19, 0x24	; 36
     cd2:	44 e7       	ldi	r20, 0x74	; 116
     cd4:	59 e4       	ldi	r21, 0x49	; 73
     cd6:	69 d6       	rcall	.+3282   	; 0x19aa <__divsf3>
     cd8:	2f e6       	ldi	r18, 0x6F	; 111
     cda:	32 e1       	ldi	r19, 0x12	; 18
     cdc:	43 e0       	ldi	r20, 0x03	; 3
     cde:	5c e4       	ldi	r21, 0x4C	; 76
     ce0:	86 d7       	rcall	.+3852   	; 0x1bee <__mulsf3>
     ce2:	cb d6       	rcall	.+3478   	; 0x1a7a <__fixunssfsi>
     ce4:	5e 98       	cbi	0x0b, 6	; 11
     ce6:	28 e0       	ldi	r18, 0x08	; 8
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	60 ff       	sbrs	r22, 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <AD9850_Setfrequency+0x24>
     cee:	29 9a       	sbi	0x05, 1	; 5
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <AD9850_Setfrequency+0x26>
     cf2:	29 98       	cbi	0x05, 1	; 5
     cf4:	2a 9a       	sbi	0x05, 2	; 5
     cf6:	2a 98       	cbi	0x05, 2	; 5
     cf8:	66 95       	lsr	r22
     cfa:	21 50       	subi	r18, 0x01	; 1
     cfc:	31 09       	sbc	r19, r1
     cfe:	a9 f7       	brne	.-22     	; 0xcea <AD9850_Setfrequency+0x1c>
     d00:	28 e0       	ldi	r18, 0x08	; 8
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	70 ff       	sbrs	r23, 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <AD9850_Setfrequency+0x3e>
     d08:	29 9a       	sbi	0x05, 1	; 5
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <AD9850_Setfrequency+0x40>
     d0c:	29 98       	cbi	0x05, 1	; 5
     d0e:	2a 9a       	sbi	0x05, 2	; 5
     d10:	2a 98       	cbi	0x05, 2	; 5
     d12:	76 95       	lsr	r23
     d14:	21 50       	subi	r18, 0x01	; 1
     d16:	31 09       	sbc	r19, r1
     d18:	a9 f7       	brne	.-22     	; 0xd04 <AD9850_Setfrequency+0x36>
     d1a:	28 e0       	ldi	r18, 0x08	; 8
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	80 ff       	sbrs	r24, 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <AD9850_Setfrequency+0x58>
     d22:	29 9a       	sbi	0x05, 1	; 5
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <AD9850_Setfrequency+0x5a>
     d26:	29 98       	cbi	0x05, 1	; 5
     d28:	2a 9a       	sbi	0x05, 2	; 5
     d2a:	2a 98       	cbi	0x05, 2	; 5
     d2c:	86 95       	lsr	r24
     d2e:	86 95       	lsr	r24
     d30:	21 50       	subi	r18, 0x01	; 1
     d32:	31 09       	sbc	r19, r1
     d34:	a1 f7       	brne	.-24     	; 0xd1e <AD9850_Setfrequency+0x50>
     d36:	28 e0       	ldi	r18, 0x08	; 8
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	90 ff       	sbrs	r25, 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <AD9850_Setfrequency+0x74>
     d3e:	29 9a       	sbi	0x05, 1	; 5
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <AD9850_Setfrequency+0x76>
     d42:	29 98       	cbi	0x05, 1	; 5
     d44:	2a 9a       	sbi	0x05, 2	; 5
     d46:	2a 98       	cbi	0x05, 2	; 5
     d48:	96 95       	lsr	r25
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	31 09       	sbc	r19, r1
     d4e:	a9 f7       	brne	.-22     	; 0xd3a <AD9850_Setfrequency+0x6c>
     d50:	88 e0       	ldi	r24, 0x08	; 8
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	29 98       	cbi	0x05, 1	; 5
     d56:	2a 9a       	sbi	0x05, 2	; 5
     d58:	2a 98       	cbi	0x05, 2	; 5
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	d9 f7       	brne	.-10     	; 0xd54 <AD9850_Setfrequency+0x86>
     d5e:	5e 9a       	sbi	0x0b, 6	; 11
     d60:	8a e1       	ldi	r24, 0x1A	; 26
     d62:	8a 95       	dec	r24
     d64:	f1 f7       	brne	.-4      	; 0xd62 <AD9850_Setfrequency+0x94>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <AD9850_Setfrequency+0x9a>
     d68:	5e 98       	cbi	0x0b, 6	; 11
     d6a:	08 95       	ret

00000d6c <create_raster>:
void create_raster()
{
	uint16_t raster_offset = 0;
	uint8_t fb_x = 0;
	uint8_t fb_y = 0;
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);
     d6c:	85 e1       	ldi	r24, 0x15	; 21
     d6e:	04 d4       	rcall	.+2056   	; 0x1578 <Backlight_LED>
	LCD_Clear();
     d70:	02 d3       	rcall	.+1540   	; 0x1376 <LCD_Clear>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0d c0       	rjmp	.+26     	; 0xd92 <create_raster+0x26>
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
			lcd_framebuffer[fb_y][fb_x] = pgm_read_byte(&raster[raster_offset++]);
     d78:	cf 01       	movw	r24, r30
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	e4 50       	subi	r30, 0x04	; 4
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	e4 91       	lpm	r30, Z
     d82:	ed 93       	st	X+, r30
     d84:	fc 01       	movw	r30, r24
	uint8_t fb_x = 0;
	uint8_t fb_y = 0;
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);
	LCD_Clear();
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
     d86:	82 17       	cp	r24, r18
     d88:	93 07       	cpc	r25, r19
     d8a:	b1 f7       	brne	.-20     	; 0xd78 <create_raster+0xc>
	uint16_t raster_offset = 0;
	uint8_t fb_x = 0;
	uint8_t fb_y = 0;
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);
	LCD_Clear();
	for (fb_y = 0; fb_y < 8; fb_y++)
     d8c:	21 15       	cp	r18, r1
     d8e:	34 40       	sbci	r19, 0x04	; 4
     d90:	41 f0       	breq	.+16     	; 0xda2 <create_raster+0x36>
     d92:	dc 01       	movw	r26, r24
     d94:	a9 5c       	subi	r26, 0xC9	; 201
     d96:	bd 4f       	sbci	r27, 0xFD	; 253
     d98:	9c 01       	movw	r18, r24
     d9a:	20 58       	subi	r18, 0x80	; 128
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
{
	dataLcdBuffer[address] = data;
}

void create_raster()
{
     d9e:	fc 01       	movw	r30, r24
     da0:	eb cf       	rjmp	.-42     	; 0xd78 <create_raster+0xc>
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);
	LCD_Clear();
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
			lcd_framebuffer[fb_y][fb_x] = pgm_read_byte(&raster[raster_offset++]);
	lcd_frameupdate = 0xff;
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	80 93 1d 02 	sts	0x021D, r24
	LCD_Update();
     da8:	9b c2       	rjmp	.+1334   	; 0x12e0 <LCD_Update>
     daa:	08 95       	ret

00000dac <frequence_display>:
}

void frequence_display()
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	a0 97       	sbiw	r28, 0x20	; 32
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
	char getfrequency_buffer[32];
	LCD_GotoXY(17,5);
     dc0:	65 e0       	ldi	r22, 0x05	; 5
     dc2:	81 e1       	ldi	r24, 0x11	; 17
     dc4:	9f d3       	rcall	.+1854   	; 0x1504 <LCD_GotoXY>
	// display the labels on LCD
	itoa(((uint32_t)AD_freq/1000), getfrequency_buffer, 10);
     dc6:	60 91 a8 01 	lds	r22, 0x01A8
     dca:	70 91 a9 01 	lds	r23, 0x01A9
     dce:	80 91 aa 01 	lds	r24, 0x01AA
     dd2:	90 91 ab 01 	lds	r25, 0x01AB
     dd6:	28 ee       	ldi	r18, 0xE8	; 232
     dd8:	33 e0       	ldi	r19, 0x03	; 3
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	6a d7       	rcall	.+3796   	; 0x1cb4 <__udivmodsi4>
     de0:	da 01       	movw	r26, r20
     de2:	c9 01       	movw	r24, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     de4:	4a e0       	ldi	r20, 0x0A	; 10
     de6:	be 01       	movw	r22, r28
     de8:	6f 5f       	subi	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	94 d7       	rcall	.+3880   	; 0x1d16 <__itoa_ncheck>
	//sprintf(getfrequency_buffer,"%0i; %0i; %0i; %0i",data_frame_in[0],data_frame_in[1],data_frame_in[2],data_frame_in[3]);
	LCD_PutString(getfrequency_buffer);
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	69 d3       	rcall	.+1746   	; 0x14c6 <LCD_PutString>
	LCD_GotoXY(20,7);
     df4:	67 e0       	ldi	r22, 0x07	; 7
     df6:	84 e1       	ldi	r24, 0x14	; 20
     df8:	85 d3       	rcall	.+1802   	; 0x1504 <LCD_GotoXY>
	LCD_PutChar(0x10);
     dfa:	80 e1       	ldi	r24, 0x10	; 16
     dfc:	1a d3       	rcall	.+1588   	; 0x1432 <LCD_PutChar>
	LCD_Update();
     dfe:	70 d2       	rcall	.+1248   	; 0x12e0 <LCD_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e00:	8f e3       	ldi	r24, 0x3F	; 63
     e02:	9c e9       	ldi	r25, 0x9C	; 156
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <frequence_display+0x58>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <frequence_display+0x5e>
     e0a:	00 00       	nop
	_delay_ms(10);
}
     e0c:	a0 96       	adiw	r28, 0x20	; 32
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <create_wave>:

void create_wave()
{
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	0f 2e       	mov	r0, r31
     e2c:	fc ea       	ldi	r31, 0xAC	; 172
     e2e:	ef 2e       	mov	r14, r31
     e30:	f1 e0       	ldi	r31, 0x01	; 1
     e32:	ff 2e       	mov	r15, r31
     e34:	f0 2d       	mov	r31, r0
     e36:	00 e1       	ldi	r16, 0x10	; 16
     e38:	12 e0       	ldi	r17, 0x02	; 2
     e3a:	e7 01       	movw	r28, r14
     e3c:	8c 2f       	mov	r24, r28
     e3e:	8e 19       	sub	r24, r14
	uint8_t i;
	for(i=0;i<100;i++)
	{
		LCD_DrawPixel(i,dataLcdBuffer[i],1);
     e40:	69 91       	ld	r22, Y+
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	ae d2       	rcall	.+1372   	; 0x13a2 <LCD_DrawPixel>
		LCD_Update();
     e46:	4c d2       	rcall	.+1176   	; 0x12e0 <LCD_Update>
}

void create_wave()
{
	uint8_t i;
	for(i=0;i<100;i++)
     e48:	c0 17       	cp	r28, r16
     e4a:	d1 07       	cpc	r29, r17
     e4c:	b9 f7       	brne	.-18     	; 0xe3c <create_wave+0x1e>
	{
		LCD_DrawPixel(i,dataLcdBuffer[i],1);
		LCD_Update();
	}
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	08 95       	ret

00000e5c <signal_display>:
	uint16_t i,k;
	//uint32_t endOfPeriod=0;
	uint8_t freqComplete=0;

	//LCD_Clear();
	create_wave();
     e5c:	e0 df       	rcall	.-64     	; 0xe1e <create_wave>
		if (~PINA&(1<<PINA3))
			(*get_frequence_p)();		//when Joystick Button is pressed, get the frequence from serial port again;

		findZero = 0;
		upLimit = 0;
		lowLimit = 255;
     e5e:	77 24       	eor	r7, r7
     e60:	7a 94       	dec	r7
		//endOfPeriod = 0;
		freqComplete = 0;
		complete = FALSE;

		for (i=2; i<15000; i++)
     e62:	68 94       	set
     e64:	99 24       	eor	r9, r9
     e66:	91 f8       	bld	r9, 1
     e68:	a1 2c       	mov	r10, r1
		{
			ADCSRA |= (1 << ADSC); // Enable ADC
     e6a:	ca e7       	ldi	r28, 0x7A	; 122
     e6c:	d0 e0       	ldi	r29, 0x00	; 0
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;
     e6e:	09 e7       	ldi	r16, 0x79	; 121
     e70:	10 e0       	ldi	r17, 0x00	; 0

			if (upLimit < ADCvalue)  // Find the higher voltage level of the input waveform.
				upLimit = ADCvalue;

			if (lowLimit > ADCvalue) // Find the lower voltage level of the input waveform.
				lowLimit = ADCvalue;
     e72:	0f 2e       	mov	r0, r31
     e74:	f5 e3       	ldi	r31, 0x35	; 53
     e76:	ef 2e       	mov	r14, r31
     e78:	f2 e0       	ldi	r31, 0x02	; 2
     e7a:	ff 2e       	mov	r15, r31
     e7c:	f0 2d       	mov	r31, r0
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
			{
				freqComplete = 3; //we found the end of the first period.
     e7e:	0f 2e       	mov	r0, r31
     e80:	f3 e0       	ldi	r31, 0x03	; 3
     e82:	8f 2e       	mov	r8, r31
     e84:	f0 2d       	mov	r31, r0
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     e86:	68 94       	set
     e88:	bb 24       	eor	r11, r11
     e8a:	b1 f8       	bld	r11, 1
				ADCvalue += 5;
				ADCvalue /= 5;
				ADCvalue += 2;
			}
			else
				ADCvalue = 2;
     e8c:	c9 2c       	mov	r12, r9
     e8e:	da 2c       	mov	r13, r10
	//LCD_Clear();
	create_wave();

	for(;;)
	{
		if((~PINA&(1<<PINA7))&& (timeDiv <= 120))
     e90:	07 99       	sbic	0x00, 7	; 0
     e92:	0c c0       	rjmp	.+24     	; 0xeac <signal_display+0x50>
     e94:	80 91 17 02 	lds	r24, 0x0217
     e98:	90 91 18 02 	lds	r25, 0x0218
     e9c:	89 37       	cpi	r24, 0x79	; 121
     e9e:	91 05       	cpc	r25, r1
     ea0:	28 f4       	brcc	.+10     	; 0xeac <signal_display+0x50>
			timeDiv += 1;
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	90 93 18 02 	sts	0x0218, r25
     ea8:	80 93 17 02 	sts	0x0217, r24
			
		if((~PINA&(1<<PINA6)) && (timeDiv >= 1))
     eac:	06 99       	sbic	0x00, 6	; 0
     eae:	0b c0       	rjmp	.+22     	; 0xec6 <signal_display+0x6a>
     eb0:	80 91 17 02 	lds	r24, 0x0217
     eb4:	90 91 18 02 	lds	r25, 0x0218
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	29 f0       	breq	.+10     	; 0xec6 <signal_display+0x6a>
			timeDiv -= 1;
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	90 93 18 02 	sts	0x0218, r25
     ec2:	80 93 17 02 	sts	0x0217, r24
			
		if((~PINA&(1<<PINA5)) && (Ypos2 <= 60))
     ec6:	05 99       	sbic	0x00, 5	; 0
     ec8:	07 c0       	rjmp	.+14     	; 0xed8 <signal_display+0x7c>
     eca:	80 91 11 02 	lds	r24, 0x0211
     ece:	8d 33       	cpi	r24, 0x3D	; 61
     ed0:	1c f4       	brge	.+6      	; 0xed8 <signal_display+0x7c>
			Ypos2++;
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 11 02 	sts	0x0211, r24

		if((~PINA&(1<<PINA4)) && (Ypos2 >= -60))
     ed8:	04 99       	sbic	0x00, 4	; 0
     eda:	07 c0       	rjmp	.+14     	; 0xeea <signal_display+0x8e>
     edc:	80 91 11 02 	lds	r24, 0x0211
     ee0:	84 3c       	cpi	r24, 0xC4	; 196
     ee2:	1c f0       	brlt	.+6      	; 0xeea <signal_display+0x8e>
			Ypos2--;
     ee4:	81 50       	subi	r24, 0x01	; 1
     ee6:	80 93 11 02 	sts	0x0211, r24
			
		if (~PINA&(1<<PINA3))
     eea:	03 99       	sbic	0x00, 3	; 0
     eec:	05 c0       	rjmp	.+10     	; 0xef8 <signal_display+0x9c>
			(*get_frequence_p)();		//when Joystick Button is pressed, get the frequence from serial port again;
     eee:	e0 91 00 01 	lds	r30, 0x0100
     ef2:	f0 91 01 01 	lds	r31, 0x0101
     ef6:	09 95       	icall

		findZero = 0;
     ef8:	10 92 15 02 	sts	0x0215, r1
		upLimit = 0;
     efc:	10 92 14 02 	sts	0x0214, r1
		lowLimit = 255;
     f00:	70 92 02 01 	sts	0x0102, r7
		//endOfPeriod = 0;
		freqComplete = 0;
		complete = FALSE;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 12 02 	sts	0x0212, r24

		findZero = 0;
		upLimit = 0;
		lowLimit = 255;
		//endOfPeriod = 0;
		freqComplete = 0;
     f0a:	e0 e0       	ldi	r30, 0x00	; 0
		complete = FALSE;

		for (i=2; i<15000; i++)
     f0c:	49 2d       	mov	r20, r9
     f0e:	5a 2d       	mov	r21, r10
			ADCSRA |= (1 << ADSC); // Enable ADC
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     f10:	f1 e0       	ldi	r31, 0x01	; 1
		freqComplete = 0;
		complete = FALSE;

		for (i=2; i<15000; i++)
		{
			ADCSRA |= (1 << ADSC); // Enable ADC
     f12:	88 81       	ld	r24, Y
     f14:	80 64       	ori	r24, 0x40	; 64
     f16:	88 83       	st	Y, r24
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
     f18:	88 81       	ld	r24, Y
     f1a:	84 ff       	sbrs	r24, 4
     f1c:	fd cf       	rjmp	.-6      	; 0xf18 <signal_display+0xbc>
			ADCvalue = ADCH;
     f1e:	d8 01       	movw	r26, r16
     f20:	6c 90       	ld	r6, X
     f22:	86 2d       	mov	r24, r6
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	90 93 36 02 	sts	0x0236, r25
     f2a:	80 93 35 02 	sts	0x0235, r24

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
     f2e:	20 91 16 02 	lds	r18, 0x0216
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	28 17       	cp	r18, r24
     f36:	39 07       	cpc	r19, r25
     f38:	08 f0       	brcs	.+2      	; 0xf3c <signal_display+0xe0>
     f3a:	0c c1       	rjmp	.+536    	; 0x1154 <signal_display+0x2f8>
     f3c:	60 91 13 02 	lds	r22, 0x0213
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	68 17       	cp	r22, r24
     f44:	79 07       	cpc	r23, r25
     f46:	c0 f4       	brcc	.+48     	; 0xf78 <signal_display+0x11c>
     f48:	e1 11       	cpse	r30, r1
     f4a:	09 c1       	rjmp	.+530    	; 0x115e <signal_display+0x302>
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     f4c:	82 17       	cp	r24, r18
     f4e:	93 07       	cpc	r25, r19
     f50:	48 f0       	brcs	.+18     	; 0xf64 <signal_display+0x108>
			ADCSRA |= (1 << ADSC); // Enable ADC
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     f52:	ef 2f       	mov	r30, r31
     f54:	11 c0       	rjmp	.+34     	; 0xf78 <signal_display+0x11c>
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     f56:	60 91 13 02 	lds	r22, 0x0213
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	68 17       	cp	r22, r24
     f5e:	79 07       	cpc	r23, r25
     f60:	b0 f4       	brcc	.+44     	; 0xf8e <signal_display+0x132>
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <signal_display+0x10a>
			ADCSRA |= (1 << ADSC); // Enable ADC
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     f64:	ef 2f       	mov	r30, r31
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     f66:	e1 30       	cpi	r30, 0x01	; 1
     f68:	09 f0       	breq	.+2      	; 0xf6c <signal_display+0x110>
     f6a:	fd c0       	rjmp	.+506    	; 0x1166 <signal_display+0x30a>
				freqComplete = 2;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     f6c:	28 17       	cp	r18, r24
     f6e:	39 07       	cpc	r19, r25
     f70:	68 f4       	brcc	.+26     	; 0xf8c <signal_display+0x130>
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     f72:	eb 2d       	mov	r30, r11
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <signal_display+0x11c>
     f76:	eb 2d       	mov	r30, r11

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     f78:	20 91 13 02 	lds	r18, 0x0213
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	28 17       	cp	r18, r24
     f80:	39 07       	cpc	r19, r25
     f82:	28 f4       	brcc	.+10     	; 0xf8e <signal_display+0x132>
     f84:	e2 30       	cpi	r30, 0x02	; 2
     f86:	19 f4       	brne	.+6      	; 0xf8e <signal_display+0x132>
			{
				freqComplete = 3; //we found the end of the first period.
     f88:	e8 2d       	mov	r30, r8
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <signal_display+0x132>
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     f8c:	eb 2d       	mov	r30, r11
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
			{
				freqComplete = 3; //we found the end of the first period.
			}

			prevADCvalue = ADCvalue; // Get a backup of the current ADC value.
     f8e:	60 92 13 02 	sts	0x0213, r6

			for(k=timeDiv;k>0;k--) 
     f92:	20 91 17 02 	lds	r18, 0x0217
     f96:	30 91 18 02 	lds	r19, 0x0218
     f9a:	21 15       	cp	r18, r1
     f9c:	31 05       	cpc	r19, r1
     f9e:	81 f0       	breq	.+32     	; 0xfc0 <signal_display+0x164>
			{
				ADCSRA |= (1 << ADSC);   // Enable ADC
     fa0:	88 81       	ld	r24, Y
     fa2:	80 64       	ori	r24, 0x40	; 64
     fa4:	88 83       	st	Y, r24
				loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
     fa6:	88 81       	ld	r24, Y
     fa8:	84 ff       	sbrs	r24, 4
     faa:	fd cf       	rjmp	.-6      	; 0xfa6 <signal_display+0x14a>
				ADCvalue = ADCH;
     fac:	d8 01       	movw	r26, r16
     fae:	8c 91       	ld	r24, X
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	90 93 36 02 	sts	0x0236, r25
     fb6:	80 93 35 02 	sts	0x0235, r24
				freqComplete = 3; //we found the end of the first period.
			}

			prevADCvalue = ADCvalue; // Get a backup of the current ADC value.

			for(k=timeDiv;k>0;k--) 
     fba:	21 50       	subi	r18, 0x01	; 1
     fbc:	31 09       	sbc	r19, r1
     fbe:	81 f7       	brne	.-32     	; 0xfa0 <signal_display+0x144>
				ADCSRA |= (1 << ADSC);   // Enable ADC
				loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
				ADCvalue = ADCH;
			}

			if (upLimit < ADCvalue)  // Find the higher voltage level of the input waveform.
     fc0:	20 91 35 02 	lds	r18, 0x0235
     fc4:	30 91 36 02 	lds	r19, 0x0236
     fc8:	80 91 14 02 	lds	r24, 0x0214
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	82 17       	cp	r24, r18
     fd0:	93 07       	cpc	r25, r19
     fd2:	10 f4       	brcc	.+4      	; 0xfd8 <signal_display+0x17c>
				upLimit = ADCvalue;
     fd4:	20 93 14 02 	sts	0x0214, r18

			if (lowLimit > ADCvalue) // Find the lower voltage level of the input waveform.
     fd8:	80 91 02 01 	lds	r24, 0x0102
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	28 17       	cp	r18, r24
     fe0:	39 07       	cpc	r19, r25
     fe2:	20 f4       	brcc	.+8      	; 0xfec <signal_display+0x190>
				lowLimit = ADCvalue;
     fe4:	d7 01       	movw	r26, r14
     fe6:	8c 91       	ld	r24, X
     fe8:	80 93 02 01 	sts	0x0102, r24
		
			if (ADCvalue > 0)
     fec:	21 15       	cp	r18, r1
     fee:	31 05       	cpc	r19, r1
     ff0:	e1 f0       	breq	.+56     	; 0x102a <signal_display+0x1ce>
			{
				voltage = ((upLimit-lowLimit)*2); //Get the Vpp and store it to "voltage" (Volts Peak-to-peak of inputed waveform).
     ff2:	80 91 14 02 	lds	r24, 0x0214
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	60 91 02 01 	lds	r22, 0x0102
     ffc:	86 1b       	sub	r24, r22
     ffe:	91 09       	sbc	r25, r1
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	90 93 34 02 	sts	0x0234, r25
    1008:	80 93 33 02 	sts	0x0233, r24
				ADCvalue += 5;
    100c:	2b 5f       	subi	r18, 0xFB	; 251
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
				ADCvalue /= 5;
    1010:	ad ec       	ldi	r26, 0xCD	; 205
    1012:	bc ec       	ldi	r27, 0xCC	; 204
    1014:	71 d6       	rcall	.+3298   	; 0x1cf8 <__umulhisi3>
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	96 95       	lsr	r25
    101c:	87 95       	ror	r24
				ADCvalue += 2;
    101e:	02 96       	adiw	r24, 0x02	; 2
    1020:	90 93 36 02 	sts	0x0236, r25
    1024:	80 93 35 02 	sts	0x0235, r24
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <signal_display+0x1d6>
			}
			else
				ADCvalue = 2;
    102a:	c0 92 35 02 	sts	0x0235, r12
    102e:	d0 92 36 02 	sts	0x0236, r13
		
			position = ADCvalue + Ypos2 +5; 
    1032:	d7 01       	movw	r26, r14
    1034:	9c 91       	ld	r25, X
    1036:	80 91 11 02 	lds	r24, 0x0211
    103a:	89 0f       	add	r24, r25
    103c:	8b 5f       	subi	r24, 0xFB	; 251
    103e:	80 93 10 02 	sts	0x0210, r24
			if ((position <= 63) && (position >= 0) && (i<100))
    1042:	80 34       	cpi	r24, 0x40	; 64
    1044:	48 f4       	brcc	.+18     	; 0x1058 <signal_display+0x1fc>
    1046:	44 36       	cpi	r20, 0x64	; 100
    1048:	51 05       	cpc	r21, r1
    104a:	70 f4       	brcc	.+28     	; 0x1068 <signal_display+0x20c>
    104c:	da 01       	movw	r26, r20
    104e:	bb 27       	eor	r27, r27
	PORTD &= ~(1<<FQUP);
}

void fillDataLcdBuffer (uint8_t address, uint8_t data)
{
	dataLcdBuffer[address] = data;
    1050:	a4 55       	subi	r26, 0x54	; 84
    1052:	be 4f       	sbci	r27, 0xFE	; 254
    1054:	8c 93       	st	X, r24
    1056:	0d c0       	rjmp	.+26     	; 0x1072 <signal_display+0x216>
			position = ADCvalue + Ypos2 +5; 
			if ((position <= 63) && (position >= 0) && (i<100))
				fillDataLcdBuffer(i,position);
			else
			{
				if(i<100)
    1058:	44 36       	cpi	r20, 0x64	; 100
    105a:	51 05       	cpc	r21, r1
    105c:	28 f4       	brcc	.+10     	; 0x1068 <signal_display+0x20c>
    105e:	da 01       	movw	r26, r20
    1060:	bb 27       	eor	r27, r27
	PORTD &= ~(1<<FQUP);
}

void fillDataLcdBuffer (uint8_t address, uint8_t data)
{
	dataLcdBuffer[address] = data;
    1062:	a4 55       	subi	r26, 0x54	; 84
    1064:	be 4f       	sbci	r27, 0xFE	; 254
    1066:	1c 92       	st	X, r1
			else
			{
				if(i<100)
					fillDataLcdBuffer(i,0);

				if((i>100)&&(freqComplete==3))
    1068:	45 36       	cpi	r20, 0x65	; 101
    106a:	51 05       	cpc	r21, r1
    106c:	10 f0       	brcs	.+4      	; 0x1072 <signal_display+0x216>
    106e:	e3 30       	cpi	r30, 0x03	; 3
    1070:	39 f0       	breq	.+14     	; 0x1080 <signal_display+0x224>
		lowLimit = 255;
		//endOfPeriod = 0;
		freqComplete = 0;
		complete = FALSE;

		for (i=2; i<15000; i++)
    1072:	4f 5f       	subi	r20, 0xFF	; 255
    1074:	5f 4f       	sbci	r21, 0xFF	; 255
    1076:	48 39       	cpi	r20, 0x98	; 152
    1078:	ba e3       	ldi	r27, 0x3A	; 58
    107a:	5b 07       	cpc	r21, r27
    107c:	09 f0       	breq	.+2      	; 0x1080 <signal_display+0x224>
    107e:	49 cf       	rjmp	.-366    	; 0xf12 <signal_display+0xb6>

				if((i>100)&&(freqComplete==3))
					break;
			}
		}
		if(upLimit != lowLimit)
    1080:	80 91 14 02 	lds	r24, 0x0214
    1084:	40 91 02 01 	lds	r20, 0x0102
    1088:	84 17       	cp	r24, r20
    108a:	69 f0       	breq	.+26     	; 0x10a6 <signal_display+0x24a>
			trigger = (((upLimit - lowLimit)/2)+ lowLimit);
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	84 1b       	sub	r24, r20
    1090:	91 09       	sbc	r25, r1
    1092:	9c 01       	movw	r18, r24
    1094:	12 f4       	brpl	.+4      	; 0x109a <signal_display+0x23e>
    1096:	2f 5f       	subi	r18, 0xFF	; 255
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	35 95       	asr	r19
    109c:	27 95       	ror	r18
    109e:	24 0f       	add	r18, r20
    10a0:	20 93 16 02 	sts	0x0216, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <signal_display+0x24e>
		else
			trigger = upLimit;
    10a6:	80 93 16 02 	sts	0x0216, r24

//--------------------display the signal----------------------------
		create_wave();
    10aa:	b9 de       	rcall	.-654    	; 0xe1e <create_wave>
//-------------------------------------------------------------------

		dataCounter = 0;
    10ac:	10 92 1a 02 	sts	0x021A, r1
    10b0:	10 92 19 02 	sts	0x0219, r1
		complete = FALSE;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	80 93 12 02 	sts	0x0212, r24
		freqComplete = 0;
    10ba:	40 e0       	ldi	r20, 0x00	; 0
			loop_until_bit_is_set(ADCSRA, ADIF);
			ADCvalue = ADCH;

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
    10bc:	51 e0       	ldi	r21, 0x01	; 1
		complete = FALSE;
		freqComplete = 0;

		do
		{
			prevADCvalue = ADCvalue;
    10be:	f7 01       	movw	r30, r14
    10c0:	80 81       	ld	r24, Z
    10c2:	80 93 13 02 	sts	0x0213, r24
			
			ADCSRA |= (1 << ADSC);    // Enable ADC
    10c6:	88 81       	ld	r24, Y
    10c8:	80 64       	ori	r24, 0x40	; 64
    10ca:	88 83       	st	Y, r24
			loop_until_bit_is_set(ADCSRA, ADIF);
    10cc:	88 81       	ld	r24, Y
    10ce:	84 ff       	sbrs	r24, 4
    10d0:	fd cf       	rjmp	.-6      	; 0x10cc <signal_display+0x270>
			ADCvalue = ADCH;
    10d2:	d8 01       	movw	r26, r16
    10d4:	8c 91       	ld	r24, X
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	90 93 36 02 	sts	0x0236, r25
    10dc:	80 93 35 02 	sts	0x0235, r24

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
    10e0:	20 91 16 02 	lds	r18, 0x0216
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	28 17       	cp	r18, r24
    10e8:	39 07       	cpc	r19, r25
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <signal_display+0x292>
    10ec:	45 c0       	rjmp	.+138    	; 0x1178 <signal_display+0x31c>
    10ee:	60 91 13 02 	lds	r22, 0x0213
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	68 17       	cp	r22, r24
    10f6:	79 07       	cpc	r23, r25
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <signal_display+0x2a0>
    10fa:	51 c0       	rjmp	.+162    	; 0x119e <signal_display+0x342>
    10fc:	41 11       	cpse	r20, r1
    10fe:	38 c0       	rjmp	.+112    	; 0x1170 <signal_display+0x314>
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    1100:	82 17       	cp	r24, r18
    1102:	93 07       	cpc	r25, r19
    1104:	48 f0       	brcs	.+18     	; 0x1118 <signal_display+0x2bc>
			loop_until_bit_is_set(ADCSRA, ADIF);
			ADCvalue = ADCH;

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
    1106:	45 2f       	mov	r20, r21
    1108:	4a c0       	rjmp	.+148    	; 0x119e <signal_display+0x342>
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    110a:	60 91 13 02 	lds	r22, 0x0213
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	68 17       	cp	r22, r24
    1112:	79 07       	cpc	r23, r25
    1114:	50 f4       	brcc	.+20     	; 0x112a <signal_display+0x2ce>
    1116:	01 c0       	rjmp	.+2      	; 0x111a <signal_display+0x2be>
			loop_until_bit_is_set(ADCSRA, ADIF);
			ADCvalue = ADCH;

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
    1118:	45 2f       	mov	r20, r21
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    111a:	41 30       	cpi	r20, 0x01	; 1
    111c:	89 f5       	brne	.+98     	; 0x1180 <signal_display+0x324>
    111e:	34 c0       	rjmp	.+104    	; 0x1188 <signal_display+0x32c>
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
    1120:	42 30       	cpi	r20, 0x02	; 2
    1122:	19 f4       	brne	.+6      	; 0x112a <signal_display+0x2ce>
			{
				freqComplete = 3; 
				complete = TRUE;
    1124:	10 92 12 02 	sts	0x0212, r1
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
			{
				freqComplete = 3; 
    1128:	48 2d       	mov	r20, r8
				complete = TRUE;
			}
			if(dataCounter > 3000)
    112a:	80 91 19 02 	lds	r24, 0x0219
    112e:	90 91 1a 02 	lds	r25, 0x021A
    1132:	89 3b       	cpi	r24, 0xB9	; 185
    1134:	bb e0       	ldi	r27, 0x0B	; 11
    1136:	9b 07       	cpc	r25, r27
    1138:	10 f0       	brcs	.+4      	; 0x113e <signal_display+0x2e2>
				complete = TRUE;
    113a:	10 92 12 02 	sts	0x0212, r1
			dataCounter++;
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	90 93 1a 02 	sts	0x021A, r25
    1144:	80 93 19 02 	sts	0x0219, r24
		}while(complete == FALSE);
    1148:	80 91 12 02 	lds	r24, 0x0212
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	09 f4       	brne	.+2      	; 0x1152 <signal_display+0x2f6>
    1150:	b6 cf       	rjmp	.-148    	; 0x10be <signal_display+0x262>
    1152:	9e ce       	rjmp	.-708    	; 0xe90 <signal_display+0x34>

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    1154:	82 17       	cp	r24, r18
    1156:	93 07       	cpc	r25, r19
    1158:	08 f4       	brcc	.+2      	; 0x115c <signal_display+0x300>
    115a:	fd ce       	rjmp	.-518    	; 0xf56 <signal_display+0xfa>
    115c:	18 cf       	rjmp	.-464    	; 0xf8e <signal_display+0x132>
    115e:	82 17       	cp	r24, r18
    1160:	93 07       	cpc	r25, r19
    1162:	b8 f0       	brcs	.+46     	; 0x1192 <signal_display+0x336>
    1164:	09 cf       	rjmp	.-494    	; 0xf78 <signal_display+0x11c>
				freqComplete = 2;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	08 f4       	brcc	.+2      	; 0x116e <signal_display+0x312>
    116c:	0b cf       	rjmp	.-490    	; 0xf84 <signal_display+0x128>
    116e:	0f cf       	rjmp	.-482    	; 0xf8e <signal_display+0x132>
			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    1170:	82 17       	cp	r24, r18
    1172:	93 07       	cpc	r25, r19
    1174:	88 f0       	brcs	.+34     	; 0x1198 <signal_display+0x33c>
    1176:	13 c0       	rjmp	.+38     	; 0x119e <signal_display+0x342>
    1178:	82 17       	cp	r24, r18
    117a:	93 07       	cpc	r25, r19
    117c:	30 f2       	brcs	.-116    	; 0x110a <signal_display+0x2ae>
    117e:	d5 cf       	rjmp	.-86     	; 0x112a <signal_display+0x2ce>
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
    1180:	28 17       	cp	r18, r24
    1182:	39 07       	cpc	r19, r25
    1184:	68 f2       	brcs	.-102    	; 0x1120 <signal_display+0x2c4>
    1186:	d1 cf       	rjmp	.-94     	; 0x112a <signal_display+0x2ce>
    1188:	28 17       	cp	r18, r24
    118a:	39 07       	cpc	r19, r25
    118c:	58 f2       	brcs	.-106    	; 0x1124 <signal_display+0x2c8>
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
    118e:	4b 2d       	mov	r20, r11
    1190:	cc cf       	rjmp	.-104    	; 0x112a <signal_display+0x2ce>

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    1192:	e1 30       	cpi	r30, 0x01	; 1
    1194:	41 f7       	brne	.-48     	; 0x1166 <signal_display+0x30a>
    1196:	ef ce       	rjmp	.-546    	; 0xf76 <signal_display+0x11a>
			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    1198:	41 30       	cpi	r20, 0x01	; 1
    119a:	91 f7       	brne	.-28     	; 0x1180 <signal_display+0x324>
    119c:	c3 cf       	rjmp	.-122    	; 0x1124 <signal_display+0x2c8>
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
    119e:	68 17       	cp	r22, r24
    11a0:	79 07       	cpc	r23, r25
    11a2:	08 f4       	brcc	.+2      	; 0x11a6 <signal_display+0x34a>
    11a4:	bd cf       	rjmp	.-134    	; 0x1120 <signal_display+0x2c4>
    11a6:	c1 cf       	rjmp	.-126    	; 0x112a <signal_display+0x2ce>

000011a8 <main>:
};

int main(void)
{
	// set PA3-PA7 as input and activated internal Pull-Up
	DDRA &= ~((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
    11a8:	81 b1       	in	r24, 0x01	; 1
    11aa:	87 70       	andi	r24, 0x07	; 7
    11ac:	81 b9       	out	0x01, r24	; 1
	PORTA |= ((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
    11ae:	82 b1       	in	r24, 0x02	; 2
    11b0:	88 6f       	ori	r24, 0xF8	; 248
    11b2:	82 b9       	out	0x02, r24	; 2

	LCD_Init();
    11b4:	bd d1       	rcall	.+890    	; 0x1530 <LCD_Init>
    uart_init1();
    11b6:	d9 d3       	rcall	.+1970   	; 0x196a <uart_init1>
	adc_init();
    11b8:	43 dd       	rcall	.-1402   	; 0xc40 <adc_init>
	
	AD9850_setup();
    11ba:	4b dd       	rcall	.-1386   	; 0xc52 <AD9850_setup>
	AD9850_reset();
    11bc:	57 dd       	rcall	.-1362   	; 0xc6c <AD9850_reset>
	
	start ();
    11be:	18 dd       	rcall	.-1488   	; 0xbf0 <start>
	
	get_frequence();
    11c0:	bc dc       	rcall	.-1672   	; 0xb3a <get_frequence>

	do
	{
		if(~PINA&(1<<PINA7))
    11c2:	07 99       	sbic	0x00, 7	; 0
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <main+0x46>
			AD_freq +=1000000;
    11c6:	80 91 a8 01 	lds	r24, 0x01A8
    11ca:	90 91 a9 01 	lds	r25, 0x01A9
    11ce:	a0 91 aa 01 	lds	r26, 0x01AA
    11d2:	b0 91 ab 01 	lds	r27, 0x01AB
    11d6:	80 5c       	subi	r24, 0xC0	; 192
    11d8:	9d 4b       	sbci	r25, 0xBD	; 189
    11da:	a0 4f       	sbci	r26, 0xF0	; 240
    11dc:	bf 4f       	sbci	r27, 0xFF	; 255
    11de:	80 93 a8 01 	sts	0x01A8, r24
    11e2:	90 93 a9 01 	sts	0x01A9, r25
    11e6:	a0 93 aa 01 	sts	0x01AA, r26
    11ea:	b0 93 ab 01 	sts	0x01AB, r27
    11ee:	2f ef       	ldi	r18, 0xFF	; 255
    11f0:	81 ee       	ldi	r24, 0xE1	; 225
    11f2:	94 e0       	ldi	r25, 0x04	; 4
    11f4:	21 50       	subi	r18, 0x01	; 1
    11f6:	80 40       	sbci	r24, 0x00	; 0
    11f8:	90 40       	sbci	r25, 0x00	; 0
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <main+0x4c>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <main+0x56>
    11fe:	00 00       	nop
			_delay_ms(100);

		if (~PINA&(1<<PINA6))
    1200:	06 99       	sbic	0x00, 6	; 0
    1202:	14 c0       	rjmp	.+40     	; 0x122c <main+0x84>
			AD_freq -=1000000;
    1204:	80 91 a8 01 	lds	r24, 0x01A8
    1208:	90 91 a9 01 	lds	r25, 0x01A9
    120c:	a0 91 aa 01 	lds	r26, 0x01AA
    1210:	b0 91 ab 01 	lds	r27, 0x01AB
    1214:	80 54       	subi	r24, 0x40	; 64
    1216:	92 44       	sbci	r25, 0x42	; 66
    1218:	af 40       	sbci	r26, 0x0F	; 15
    121a:	b1 09       	sbc	r27, r1
    121c:	80 93 a8 01 	sts	0x01A8, r24
    1220:	90 93 a9 01 	sts	0x01A9, r25
    1224:	a0 93 aa 01 	sts	0x01AA, r26
    1228:	b0 93 ab 01 	sts	0x01AB, r27
    122c:	2f ef       	ldi	r18, 0xFF	; 255
    122e:	81 ee       	ldi	r24, 0xE1	; 225
    1230:	94 e0       	ldi	r25, 0x04	; 4
    1232:	21 50       	subi	r18, 0x01	; 1
    1234:	80 40       	sbci	r24, 0x00	; 0
    1236:	90 40       	sbci	r25, 0x00	; 0
    1238:	e1 f7       	brne	.-8      	; 0x1232 <main+0x8a>
    123a:	00 c0       	rjmp	.+0      	; 0x123c <main+0x94>
    123c:	00 00       	nop
			_delay_ms(100);

		if (~PINA&(1<<PINA5))
    123e:	05 99       	sbic	0x00, 5	; 0
    1240:	14 c0       	rjmp	.+40     	; 0x126a <main+0xc2>
			AD_freq -=100000;
    1242:	80 91 a8 01 	lds	r24, 0x01A8
    1246:	90 91 a9 01 	lds	r25, 0x01A9
    124a:	a0 91 aa 01 	lds	r26, 0x01AA
    124e:	b0 91 ab 01 	lds	r27, 0x01AB
    1252:	80 5a       	subi	r24, 0xA0	; 160
    1254:	96 48       	sbci	r25, 0x86	; 134
    1256:	a1 40       	sbci	r26, 0x01	; 1
    1258:	b1 09       	sbc	r27, r1
    125a:	80 93 a8 01 	sts	0x01A8, r24
    125e:	90 93 a9 01 	sts	0x01A9, r25
    1262:	a0 93 aa 01 	sts	0x01AA, r26
    1266:	b0 93 ab 01 	sts	0x01AB, r27
    126a:	2f ef       	ldi	r18, 0xFF	; 255
    126c:	81 ee       	ldi	r24, 0xE1	; 225
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	21 50       	subi	r18, 0x01	; 1
    1272:	80 40       	sbci	r24, 0x00	; 0
    1274:	90 40       	sbci	r25, 0x00	; 0
    1276:	e1 f7       	brne	.-8      	; 0x1270 <main+0xc8>
    1278:	00 c0       	rjmp	.+0      	; 0x127a <main+0xd2>
    127a:	00 00       	nop
			_delay_ms(100);

		if (~PINA&(1<<PINA4))
    127c:	04 99       	sbic	0x00, 4	; 0
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <main+0x100>
			AD_freq +=100000;
    1280:	80 91 a8 01 	lds	r24, 0x01A8
    1284:	90 91 a9 01 	lds	r25, 0x01A9
    1288:	a0 91 aa 01 	lds	r26, 0x01AA
    128c:	b0 91 ab 01 	lds	r27, 0x01AB
    1290:	80 56       	subi	r24, 0x60	; 96
    1292:	99 47       	sbci	r25, 0x79	; 121
    1294:	ae 4f       	sbci	r26, 0xFE	; 254
    1296:	bf 4f       	sbci	r27, 0xFF	; 255
    1298:	80 93 a8 01 	sts	0x01A8, r24
    129c:	90 93 a9 01 	sts	0x01A9, r25
    12a0:	a0 93 aa 01 	sts	0x01AA, r26
    12a4:	b0 93 ab 01 	sts	0x01AB, r27
    12a8:	2f ef       	ldi	r18, 0xFF	; 255
    12aa:	81 ee       	ldi	r24, 0xE1	; 225
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	21 50       	subi	r18, 0x01	; 1
    12b0:	80 40       	sbci	r24, 0x00	; 0
    12b2:	90 40       	sbci	r25, 0x00	; 0
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <main+0x106>
    12b6:	00 c0       	rjmp	.+0      	; 0x12b8 <main+0x110>
    12b8:	00 00       	nop
			_delay_ms(100);
		
		AD9850_Setfrequency(AD_freq);
    12ba:	60 91 a8 01 	lds	r22, 0x01A8
    12be:	70 91 a9 01 	lds	r23, 0x01A9
    12c2:	80 91 aa 01 	lds	r24, 0x01AA
    12c6:	90 91 ab 01 	lds	r25, 0x01AB
    12ca:	03 d4       	rcall	.+2054   	; 0x1ad2 <__floatunsisf>
    12cc:	00 dd       	rcall	.-1536   	; 0xcce <AD9850_Setfrequency>
		create_raster();
    12ce:	4e dd       	rcall	.-1380   	; 0xd6c <create_raster>
		frequence_display();	
    12d0:	6d dd       	rcall	.-1318   	; 0xdac <frequence_display>
		
	}while (!(~PINA&(1<<PINA3)));
    12d2:	03 99       	sbic	0x00, 3	; 0
    12d4:	76 cf       	rjmp	.-276    	; 0x11c2 <main+0x1a>
	
		signal_display();
    12d6:	c2 dd       	rcall	.-1148   	; 0xe5c <signal_display>

000012d8 <dataflash_init>:
void
dataflash_init (void)
{
  // AT45DB081 doesn't actually need an intialization,
  // only the ChipSelect should be configured as an output.
  DDRB |= (1 << PB4);
    12d8:	24 9a       	sbi	0x04, 4	; 4
  DATAFLASH_Chip_Unselect;
    12da:	2c 9a       	sbi	0x05, 4	; 5
  SPI_MasterInit();
    12dc:	59 c1       	rjmp	.+690    	; 0x1590 <SPI_MasterInit>
    12de:	08 95       	ret

000012e0 <LCD_Update>:
  unsigned char x;
  
  for (x = 0; x < 128; x++)
    lcd_framebuffer[line][x] = 0x00;
  
  lcd_frameupdate |= (1 << line);
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	bf b6       	in	r11, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	07 e3       	ldi	r16, 0x37	; 55
    12f8:	16 e0       	ldi	r17, 0x06	; 6
    12fa:	0f 2e       	mov	r0, r31
    12fc:	f7 e3       	ldi	r31, 0x37	; 55
    12fe:	cf 2e       	mov	r12, r31
    1300:	f2 e0       	ldi	r31, 0x02	; 2
    1302:	df 2e       	mov	r13, r31
    1304:	f0 2d       	mov	r31, r0
    1306:	0f 2e       	mov	r0, r31
    1308:	f7 e0       	ldi	r31, 0x07	; 7
    130a:	ef 2e       	mov	r14, r31
    130c:	f1 2c       	mov	r15, r1
    130e:	f0 2d       	mov	r31, r0
    1310:	80 91 1d 02 	lds	r24, 0x021D
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 2c       	mov	r0, r14
    1318:	02 c0       	rjmp	.+4      	; 0x131e <LCD_Update+0x3e>
    131a:	95 95       	asr	r25
    131c:	87 95       	ror	r24
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <LCD_Update+0x3a>
    1322:	80 ff       	sbrs	r24, 0
    1324:	13 c0       	rjmp	.+38     	; 0x134c <LCD_Update+0x6c>
    1326:	46 98       	cbi	0x08, 6	; 8
    1328:	47 98       	cbi	0x08, 7	; 8
    132a:	8e 2d       	mov	r24, r14
    132c:	80 6b       	ori	r24, 0xB0	; 176
    132e:	42 d1       	rcall	.+644    	; 0x15b4 <SPI_MasterTransfer>
    1330:	80 e1       	ldi	r24, 0x10	; 16
    1332:	40 d1       	rcall	.+640    	; 0x15b4 <SPI_MasterTransfer>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	3e d1       	rcall	.+636    	; 0x15b4 <SPI_MasterTransfer>
    1338:	47 9a       	sbi	0x08, 7	; 8
    133a:	e8 01       	movw	r28, r16
    133c:	c0 58       	subi	r28, 0x80	; 128
    133e:	d1 09       	sbc	r29, r1
    1340:	89 91       	ld	r24, Y+
    1342:	38 d1       	rcall	.+624    	; 0x15b4 <SPI_MasterTransfer>
    1344:	c0 17       	cp	r28, r16
    1346:	d1 07       	cpc	r29, r17
    1348:	d9 f7       	brne	.-10     	; 0x1340 <LCD_Update+0x60>
    134a:	46 9a       	sbi	0x08, 6	; 8
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	e8 1a       	sub	r14, r24
    1350:	f1 08       	sbc	r15, r1
    1352:	00 58       	subi	r16, 0x80	; 128
    1354:	11 09       	sbc	r17, r1
    1356:	0c 15       	cp	r16, r12
    1358:	1d 05       	cpc	r17, r13
    135a:	d1 f6       	brne	.-76     	; 0x1310 <LCD_Update+0x30>
    135c:	10 92 1d 02 	sts	0x021D, r1
    1360:	bf be       	out	0x3f, r11	; 63
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	08 95       	ret

00001376 <LCD_Clear>:
    1376:	e7 e3       	ldi	r30, 0x37	; 55
    1378:	f2 e0       	ldi	r31, 0x02	; 2
    137a:	27 e3       	ldi	r18, 0x37	; 55
    137c:	36 e0       	ldi	r19, 0x06	; 6
    137e:	08 c0       	rjmp	.+16     	; 0x1390 <LCD_Clear+0x1a>
    1380:	11 92       	st	Z+, r1
    1382:	e8 17       	cp	r30, r24
    1384:	f9 07       	cpc	r31, r25
    1386:	e1 f7       	brne	.-8      	; 0x1380 <LCD_Clear+0xa>
    1388:	fc 01       	movw	r30, r24
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	21 f0       	breq	.+8      	; 0x1398 <LCD_Clear+0x22>
    1390:	cf 01       	movw	r24, r30
    1392:	80 58       	subi	r24, 0x80	; 128
    1394:	9f 4f       	sbci	r25, 0xFF	; 255
    1396:	f4 cf       	rjmp	.-24     	; 0x1380 <LCD_Clear+0xa>
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	80 93 1d 02 	sts	0x021D, r24
    139e:	a0 cf       	rjmp	.-192    	; 0x12e0 <LCD_Update>
    13a0:	08 95       	ret

000013a2 <LCD_DrawPixel>:
    13a2:	88 23       	and	r24, r24
    13a4:	0c f4       	brge	.+2      	; 0x13a8 <LCD_DrawPixel+0x6>
    13a6:	44 c0       	rjmp	.+136    	; 0x1430 <LCD_DrawPixel+0x8e>
    13a8:	60 34       	cpi	r22, 0x40	; 64
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <LCD_DrawPixel+0xc>
    13ac:	41 c0       	rjmp	.+130    	; 0x1430 <LCD_DrawPixel+0x8e>
    13ae:	56 2f       	mov	r21, r22
    13b0:	56 95       	lsr	r21
    13b2:	56 95       	lsr	r21
    13b4:	56 95       	lsr	r21
    13b6:	67 70       	andi	r22, 0x07	; 7
    13b8:	21 e0       	ldi	r18, 0x01	; 1
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <LCD_DrawPixel+0x20>
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	6a 95       	dec	r22
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <LCD_DrawPixel+0x1c>
    13c6:	44 23       	and	r20, r20
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <LCD_DrawPixel+0x2e>
    13ca:	42 30       	cpi	r20, 0x02	; 2
    13cc:	71 f0       	breq	.+28     	; 0x13ea <LCD_DrawPixel+0x48>
    13ce:	19 c0       	rjmp	.+50     	; 0x1402 <LCD_DrawPixel+0x60>
    13d0:	90 e8       	ldi	r25, 0x80	; 128
    13d2:	59 9f       	mul	r21, r25
    13d4:	f0 01       	movw	r30, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	e8 0f       	add	r30, r24
    13da:	f1 1d       	adc	r31, r1
    13dc:	e9 5c       	subi	r30, 0xC9	; 201
    13de:	fd 4f       	sbci	r31, 0xFD	; 253
    13e0:	20 95       	com	r18
    13e2:	80 81       	ld	r24, Z
    13e4:	28 23       	and	r18, r24
    13e6:	20 83       	st	Z, r18
    13e8:	17 c0       	rjmp	.+46     	; 0x1418 <LCD_DrawPixel+0x76>
    13ea:	90 e8       	ldi	r25, 0x80	; 128
    13ec:	59 9f       	mul	r21, r25
    13ee:	f0 01       	movw	r30, r0
    13f0:	11 24       	eor	r1, r1
    13f2:	e8 0f       	add	r30, r24
    13f4:	f1 1d       	adc	r31, r1
    13f6:	e9 5c       	subi	r30, 0xC9	; 201
    13f8:	fd 4f       	sbci	r31, 0xFD	; 253
    13fa:	80 81       	ld	r24, Z
    13fc:	28 27       	eor	r18, r24
    13fe:	20 83       	st	Z, r18
    1400:	0b c0       	rjmp	.+22     	; 0x1418 <LCD_DrawPixel+0x76>
    1402:	90 e8       	ldi	r25, 0x80	; 128
    1404:	59 9f       	mul	r21, r25
    1406:	f0 01       	movw	r30, r0
    1408:	11 24       	eor	r1, r1
    140a:	e8 0f       	add	r30, r24
    140c:	f1 1d       	adc	r31, r1
    140e:	e9 5c       	subi	r30, 0xC9	; 201
    1410:	fd 4f       	sbci	r31, 0xFD	; 253
    1412:	80 81       	ld	r24, Z
    1414:	28 2b       	or	r18, r24
    1416:	20 83       	st	Z, r18
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <LCD_DrawPixel+0x80>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	5a 95       	dec	r21
    1424:	e2 f7       	brpl	.-8      	; 0x141e <LCD_DrawPixel+0x7c>
    1426:	90 91 1d 02 	lds	r25, 0x021D
    142a:	89 2b       	or	r24, r25
    142c:	80 93 1d 02 	sts	0x021D, r24
    1430:	08 95       	ret

00001432 <LCD_PutChar>:
    1432:	8a 30       	cpi	r24, 0x0A	; 10
    1434:	29 f0       	breq	.+10     	; 0x1440 <LCD_PutChar+0xe>
    1436:	8d 30       	cpi	r24, 0x0D	; 13
    1438:	61 f4       	brne	.+24     	; 0x1452 <LCD_PutChar+0x20>
    143a:	10 92 1c 02 	sts	0x021C, r1
    143e:	08 95       	ret
    1440:	80 91 1b 02 	lds	r24, 0x021B
    1444:	87 30       	cpi	r24, 0x07	; 7
    1446:	08 f0       	brcs	.+2      	; 0x144a <LCD_PutChar+0x18>
    1448:	3d c0       	rjmp	.+122    	; 0x14c4 <LCD_PutChar+0x92>
    144a:	8f 5f       	subi	r24, 0xFF	; 255
    144c:	80 93 1b 02 	sts	0x021B, r24
    1450:	08 95       	ret
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	fc 01       	movw	r30, r24
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	e8 0f       	add	r30, r24
    145c:	f9 1f       	adc	r31, r25
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	e4 50       	subi	r30, 0x04	; 4
    1464:	fb 4f       	sbci	r31, 0xFB	; 251
    1466:	80 91 1c 02 	lds	r24, 0x021C
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	dc 01       	movw	r26, r24
    146e:	aa 0f       	add	r26, r26
    1470:	bb 1f       	adc	r27, r27
    1472:	a8 0f       	add	r26, r24
    1474:	b9 1f       	adc	r27, r25
    1476:	aa 0f       	add	r26, r26
    1478:	bb 1f       	adc	r27, r27
    147a:	80 91 1b 02 	lds	r24, 0x021B
    147e:	90 e8       	ldi	r25, 0x80	; 128
    1480:	89 9f       	mul	r24, r25
    1482:	a0 0d       	add	r26, r0
    1484:	b1 1d       	adc	r27, r1
    1486:	11 24       	eor	r1, r1
    1488:	a9 5c       	subi	r26, 0xC9	; 201
    148a:	bd 4f       	sbci	r27, 0xFD	; 253
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	94 91       	lpm	r25, Z
    1490:	9d 93       	st	X+, r25
    1492:	8f 5f       	subi	r24, 0xFF	; 255
    1494:	31 96       	adiw	r30, 0x01	; 1
    1496:	86 30       	cpi	r24, 0x06	; 6
    1498:	d1 f7       	brne	.-12     	; 0x148e <LCD_PutChar+0x5c>
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	00 90 1b 02 	lds	r0, 0x021B
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <LCD_PutChar+0x76>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <LCD_PutChar+0x72>
    14ac:	90 91 1d 02 	lds	r25, 0x021D
    14b0:	89 2b       	or	r24, r25
    14b2:	80 93 1d 02 	sts	0x021D, r24
    14b6:	80 91 1c 02 	lds	r24, 0x021C
    14ba:	84 31       	cpi	r24, 0x14	; 20
    14bc:	18 f4       	brcc	.+6      	; 0x14c4 <LCD_PutChar+0x92>
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	80 93 1c 02 	sts	0x021C, r24
    14c4:	08 95       	ret

000014c6 <LCD_PutString>:
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	ec 01       	movw	r28, r24
    14cc:	88 81       	ld	r24, Y
    14ce:	88 23       	and	r24, r24
    14d0:	29 f0       	breq	.+10     	; 0x14dc <LCD_PutString+0x16>
    14d2:	89 91       	ld	r24, Y+
    14d4:	ae df       	rcall	.-164    	; 0x1432 <LCD_PutChar>
    14d6:	88 81       	ld	r24, Y
    14d8:	81 11       	cpse	r24, r1
    14da:	fb cf       	rjmp	.-10     	; 0x14d2 <LCD_PutString+0xc>
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	08 95       	ret

000014e2 <LCD_PutString_P>:
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	fc 01       	movw	r30, r24
    14e8:	84 91       	lpm	r24, Z
    14ea:	ef 01       	movw	r28, r30
    14ec:	21 96       	adiw	r28, 0x01	; 1
    14ee:	88 23       	and	r24, r24
    14f0:	31 f0       	breq	.+12     	; 0x14fe <LCD_PutString_P+0x1c>
    14f2:	9f df       	rcall	.-194    	; 0x1432 <LCD_PutChar>
    14f4:	fe 01       	movw	r30, r28
    14f6:	84 91       	lpm	r24, Z
    14f8:	21 96       	adiw	r28, 0x01	; 1
    14fa:	81 11       	cpse	r24, r1
    14fc:	fa cf       	rjmp	.-12     	; 0x14f2 <LCD_PutString_P+0x10>
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <LCD_GotoXY>:
    1504:	80 93 1c 02 	sts	0x021C, r24
    1508:	60 93 1b 02 	sts	0x021B, r22
    150c:	08 95       	ret

0000150e <Backlight_Off>:
}

void
Backlight_Off (void)
{
  TWI_Start();
    150e:	6b d0       	rcall	.+214    	; 0x15e6 <TWI_Start>
  TWI_Address_RW(0xc4);
    1510:	84 ec       	ldi	r24, 0xC4	; 196
    1512:	84 d0       	rcall	.+264    	; 0x161c <TWI_Address_RW>
  TWI_Write(0x11);
    1514:	81 e1       	ldi	r24, 0x11	; 17
    1516:	9f d0       	rcall	.+318    	; 0x1656 <TWI_Write>
  TWI_Write(0x00);
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	9d d0       	rcall	.+314    	; 0x1656 <TWI_Write>
  TWI_Write(0x00);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	9b d0       	rcall	.+310    	; 0x1656 <TWI_Write>
  TWI_Write(0x00);
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	99 d0       	rcall	.+306    	; 0x1656 <TWI_Write>
  TWI_Write(0x00);
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	97 d0       	rcall	.+302    	; 0x1656 <TWI_Write>
  TWI_Write(0x00);
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	95 d0       	rcall	.+298    	; 0x1656 <TWI_Write>
  TWI_Stop();
    152c:	b1 c0       	rjmp	.+354    	; 0x1690 <TWI_Stop>
    152e:	08 95       	ret

00001530 <LCD_Init>:
  SPI_MasterTransfer(data);
}

void
LCD_Init (void)
{
    1530:	cf 93       	push	r28
  SPI_MasterInit();
    1532:	2e d0       	rcall	.+92     	; 0x1590 <SPI_MasterInit>

  /* Set Register Select and Chip Select as Output */
  DDRC |= (1<<PC7)|(1<<PC6);
    1534:	87 b1       	in	r24, 0x07	; 7
    1536:	80 6c       	ori	r24, 0xC0	; 192
    1538:	87 b9       	out	0x07, r24	; 7
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
    153a:	cf b7       	in	r28, 0x3f	; 63
  cli();
    153c:	f8 94       	cli
  
  /* Starting Init Command Sequence */
  LCD_Command_Mode;
    153e:	47 98       	cbi	0x08, 7	; 8
  LCD_Chip_Select;
    1540:	46 98       	cbi	0x08, 6	; 8
uint8_t lcd_texty = 0;

void
LCD_Send (uint8_t data)
{
  SPI_MasterTransfer(data);
    1542:	82 ee       	ldi	r24, 0xE2	; 226
    1544:	37 d0       	rcall	.+110    	; 0x15b4 <SPI_MasterTransfer>
    1546:	83 ea       	ldi	r24, 0xA3	; 163
    1548:	35 d0       	rcall	.+106    	; 0x15b4 <SPI_MasterTransfer>
    154a:	81 e8       	ldi	r24, 0x81	; 129
    154c:	33 d0       	rcall	.+102    	; 0x15b4 <SPI_MasterTransfer>
    154e:	88 e0       	ldi	r24, 0x08	; 8
    1550:	31 d0       	rcall	.+98     	; 0x15b4 <SPI_MasterTransfer>
    1552:	80 ea       	ldi	r24, 0xA0	; 160
    1554:	2f d0       	rcall	.+94     	; 0x15b4 <SPI_MasterTransfer>
    1556:	88 ec       	ldi	r24, 0xC8	; 200
    1558:	2d d0       	rcall	.+90     	; 0x15b4 <SPI_MasterTransfer>
    155a:	85 e2       	ldi	r24, 0x25	; 37
    155c:	2b d0       	rcall	.+86     	; 0x15b4 <SPI_MasterTransfer>
    155e:	8f e2       	ldi	r24, 0x2F	; 47
    1560:	29 d0       	rcall	.+82     	; 0x15b4 <SPI_MasterTransfer>
    1562:	8f ea       	ldi	r24, 0xAF	; 175
    1564:	27 d0       	rcall	.+78     	; 0x15b4 <SPI_MasterTransfer>
  LCD_Send(LCD_COMMON_OUTPUT_MODE_REVERSE);
  LCD_Send(LCD_V5_VOLTAGE_REGULATOR | 0x05);
  LCD_Send(LCD_POWER_CONTROLLER_SET | 0x07);
  LCD_Send(LCD_DISPLAY_ON);
  
  LCD_Chip_Unselect;
    1566:	46 9a       	sbi	0x08, 6	; 8
  LCD_Data_Mode;
    1568:	47 9a       	sbi	0x08, 7	; 8
  
  LCD_Clear();
    156a:	05 df       	rcall	.-502    	; 0x1376 <LCD_Clear>
  
  /* Restore Status Register */
  SREG = sreg;
    156c:	cf bf       	out	0x3f, r28	; 63
  
  // Initialize TWI for Backlight Control
  TWI_Init();
    156e:	27 d0       	rcall	.+78     	; 0x15be <TWI_Init>
  Backlight_Off();
    1570:	ce df       	rcall	.-100    	; 0x150e <Backlight_Off>
  
  // Initialize Dataflash
  dataflash_init();
    1572:	b2 de       	rcall	.-668    	; 0x12d8 <dataflash_init>
}
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <Backlight_LED>:
  TWI_Stop();
}

void
Backlight_LED (uint8_t led_selector)
{
    1578:	cf 93       	push	r28
    157a:	c8 2f       	mov	r28, r24
  TWI_Start();
    157c:	34 d0       	rcall	.+104    	; 0x15e6 <TWI_Start>
  TWI_Address_RW(0xc4);
    157e:	84 ec       	ldi	r24, 0xC4	; 196
    1580:	4d d0       	rcall	.+154    	; 0x161c <TWI_Address_RW>
  TWI_Write(0x15);
    1582:	85 e1       	ldi	r24, 0x15	; 21
    1584:	68 d0       	rcall	.+208    	; 0x1656 <TWI_Write>
  TWI_Write(led_selector);
    1586:	8c 2f       	mov	r24, r28
    1588:	66 d0       	rcall	.+204    	; 0x1656 <TWI_Write>
  TWI_Stop();
    158a:	82 d0       	rcall	.+260    	; 0x1690 <TWI_Stop>
}
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <SPI_MasterInit>:

void
SPI_MasterInit (void)
{
  /* Check if already initialized */
  if (!(SPI_flag & 1))
    1590:	80 91 1e 02 	lds	r24, 0x021E
    1594:	80 fd       	sbrc	r24, 0
    1596:	0d c0       	rjmp	.+26     	; 0x15b2 <SPI_MasterInit+0x22>
    {
      /* Set MOSI and SCK output */
      DDRB |= (1<<PB5)|(1<<PB7);
    1598:	84 b1       	in	r24, 0x04	; 4
    159a:	80 6a       	ori	r24, 0xA0	; 160
    159c:	84 b9       	out	0x04, r24	; 4
      
      /* Enable SPI, Master */
      SPCR = (1<<SPE)|(1<<MSTR);
    159e:	80 e5       	ldi	r24, 0x50	; 80
    15a0:	8c bd       	out	0x2c, r24	; 44
      
      /* Set Double SPI Speed Bit, SPI clock will be fck/2 */
      SPSR = (1<<SPI2X);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	8d bd       	out	0x2d, r24	; 45
      
      /* Set SPI Init Flag */
      SPI_flag = 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	90 93 1f 02 	sts	0x021F, r25
    15ae:	80 93 1e 02 	sts	0x021E, r24
    15b2:	08 95       	ret

000015b4 <SPI_MasterTransfer>:

void
SPI_MasterTransfer (unsigned char c)
{
  /* Start transmission */
  SPDR = c;
    15b4:	8e bd       	out	0x2e, r24	; 46
  
  /* Wait for transmission complete */
  while (!(SPSR & (1<<SPIF)));
    15b6:	0d b4       	in	r0, 0x2d	; 45
    15b8:	07 fe       	sbrs	r0, 7
    15ba:	fd cf       	rjmp	.-6      	; 0x15b6 <SPI_MasterTransfer+0x2>
}
    15bc:	08 95       	ret

000015be <TWI_Init>:

void
TWI_Init (void)
{
  // Port Setup
  DDRC &= ~((1 << PC0)|(1 << PC1));
    15be:	87 b1       	in	r24, 0x07	; 7
    15c0:	8c 7f       	andi	r24, 0xFC	; 252
    15c2:	87 b9       	out	0x07, r24	; 7
  PORTC |= (1 << PC0)|(1 << PC1);
    15c4:	88 b1       	in	r24, 0x08	; 8
    15c6:	83 60       	ori	r24, 0x03	; 3
    15c8:	88 b9       	out	0x08, r24	; 8
  
  // Setup TWI Speed to 400kHZ (TWPS = 1)
  TWBR = 3;
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	80 93 b8 00 	sts	0x00B8, r24
  
  // Using TIMER2 to detect timeout
  TCCR2B = (7 << CS20);
    15d0:	87 e0       	ldi	r24, 0x07	; 7
    15d2:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = (1 << OCIE2A);
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	80 93 70 00 	sts	0x0070, r24
  
  OCR2A = 125;
    15dc:	8d e7       	ldi	r24, 0x7D	; 125
    15de:	80 93 b3 00 	sts	0x00B3, r24
  
  // Interrupts REQUIRED!
  sei();
    15e2:	78 94       	sei
    15e4:	08 95       	ret

000015e6 <TWI_Start>:
}

int16_t
TWI_Start (void)
{
  twi_timeout = 10;
    15e6:	8a e0       	ldi	r24, 0x0A	; 10
    15e8:	80 93 20 02 	sts	0x0220, r24
  
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
    15ec:	84 ea       	ldi	r24, 0xA4	; 164
    15ee:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    15f2:	ec eb       	ldi	r30, 0xBC	; 188
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 91 20 02 	lds	r24, 0x0220
    15fa:	88 23       	and	r24, r24
    15fc:	19 f0       	breq	.+6      	; 0x1604 <TWI_Start+0x1e>
    15fe:	80 81       	ld	r24, Z
    1600:	88 23       	and	r24, r24
    1602:	cc f7       	brge	.-14     	; 0x15f6 <TWI_Start+0x10>
  
  if (twi_timeout)
    1604:	80 91 20 02 	lds	r24, 0x0220
    1608:	88 23       	and	r24, r24
    160a:	29 f0       	breq	.+10     	; 0x1616 <TWI_Start+0x30>
    return (int16_t) (TWSR & 0xf8);
    160c:	80 91 b9 00 	lds	r24, 0x00B9
    1610:	88 7f       	andi	r24, 0xF8	; 248
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	08 95       	ret
  else
    return -1;
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	9f ef       	ldi	r25, 0xFF	; 255
}
    161a:	08 95       	ret

0000161c <TWI_Address_RW>:

int16_t
TWI_Address_RW (uint8_t address)
{
  twi_timeout = 10;
    161c:	9a e0       	ldi	r25, 0x0A	; 10
    161e:	90 93 20 02 	sts	0x0220, r25
  
  TWDR = address;
    1622:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
    1626:	84 e8       	ldi	r24, 0x84	; 132
    1628:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    162c:	ec eb       	ldi	r30, 0xBC	; 188
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 91 20 02 	lds	r24, 0x0220
    1634:	88 23       	and	r24, r24
    1636:	19 f0       	breq	.+6      	; 0x163e <TWI_Address_RW+0x22>
    1638:	80 81       	ld	r24, Z
    163a:	88 23       	and	r24, r24
    163c:	cc f7       	brge	.-14     	; 0x1630 <TWI_Address_RW+0x14>
  
  if (twi_timeout)
    163e:	80 91 20 02 	lds	r24, 0x0220
    1642:	88 23       	and	r24, r24
    1644:	29 f0       	breq	.+10     	; 0x1650 <TWI_Address_RW+0x34>
    return (int16_t) (TWSR & 0xf8);
    1646:	80 91 b9 00 	lds	r24, 0x00B9
    164a:	88 7f       	andi	r24, 0xF8	; 248
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	08 95       	ret
  else
    return -1;
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	9f ef       	ldi	r25, 0xFF	; 255
}
    1654:	08 95       	ret

00001656 <TWI_Write>:

int16_t
TWI_Write (uint8_t data)
{
  twi_timeout = 10;
    1656:	9a e0       	ldi	r25, 0x0A	; 10
    1658:	90 93 20 02 	sts	0x0220, r25
  
  TWDR = data;
    165c:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
    1660:	84 e8       	ldi	r24, 0x84	; 132
    1662:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    1666:	ec eb       	ldi	r30, 0xBC	; 188
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 91 20 02 	lds	r24, 0x0220
    166e:	88 23       	and	r24, r24
    1670:	19 f0       	breq	.+6      	; 0x1678 <TWI_Write+0x22>
    1672:	80 81       	ld	r24, Z
    1674:	88 23       	and	r24, r24
    1676:	cc f7       	brge	.-14     	; 0x166a <TWI_Write+0x14>
  
  if (twi_timeout)
    1678:	80 91 20 02 	lds	r24, 0x0220
    167c:	88 23       	and	r24, r24
    167e:	29 f0       	breq	.+10     	; 0x168a <TWI_Write+0x34>
    return (int16_t) (TWSR & 0xf8);
    1680:	80 91 b9 00 	lds	r24, 0x00B9
    1684:	88 7f       	andi	r24, 0xF8	; 248
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	08 95       	ret
  else
    return -1;
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	9f ef       	ldi	r25, 0xFF	; 255
}
    168e:	08 95       	ret

00001690 <TWI_Stop>:

void
TWI_Stop (void)
{
  twi_timeout = 10;
    1690:	8a e0       	ldi	r24, 0x0A	; 10
    1692:	80 93 20 02 	sts	0x0220, r24
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
    1696:	84 e9       	ldi	r24, 0x94	; 148
    1698:	80 93 bc 00 	sts	0x00BC, r24
    169c:	08 95       	ret

0000169e <__vector_9>:
}

// ISR will be called every 8ms to decrease twi_timeout if > 0
ISR (TIMER2_COMPA_vect)
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	11 24       	eor	r1, r1
    16a8:	0b b6       	in	r0, 0x3b	; 59
    16aa:	0f 92       	push	r0
    16ac:	8f 93       	push	r24
    16ae:	ef 93       	push	r30
    16b0:	ff 93       	push	r31
  OCR2A += 125;
    16b2:	e3 eb       	ldi	r30, 0xB3	; 179
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	83 58       	subi	r24, 0x83	; 131
    16ba:	80 83       	st	Z, r24

  if (twi_timeout)
    16bc:	80 91 20 02 	lds	r24, 0x0220
    16c0:	88 23       	and	r24, r24
    16c2:	29 f0       	breq	.+10     	; 0x16ce <__vector_9+0x30>
    twi_timeout--;
    16c4:	80 91 20 02 	lds	r24, 0x0220
    16c8:	81 50       	subi	r24, 0x01	; 1
    16ca:	80 93 20 02 	sts	0x0220, r24
}
    16ce:	ff 91       	pop	r31
    16d0:	ef 91       	pop	r30
    16d2:	8f 91       	pop	r24
    16d4:	0f 90       	pop	r0
    16d6:	0b be       	out	0x3b, r0	; 59
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	0f 90       	pop	r0
    16de:	1f 90       	pop	r1
    16e0:	18 95       	reti

000016e2 <__vector_20>:
uint8_t uart0_tx_frame()
{
	uart_tx_byte(PREAMBLE);
	uart_tx_byte(device_address);
	return 1;
}
    16e2:	1f 92       	push	r1
    16e4:	0f 92       	push	r0
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	0f 92       	push	r0
    16ea:	11 24       	eor	r1, r1
    16ec:	0b b6       	in	r0, 0x3b	; 59
    16ee:	0f 92       	push	r0
    16f0:	2f 93       	push	r18
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
    16fa:	90 91 c6 00 	lds	r25, 0x00C6
    16fe:	9d 30       	cpi	r25, 0x0D	; 13
    1700:	19 f1       	breq	.+70     	; 0x1748 <__vector_20+0x66>
    1702:	80 91 2c 02 	lds	r24, 0x022C
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	19 f4       	brne	.+6      	; 0x1710 <__vector_20+0x2e>
    170a:	90 93 2b 02 	sts	0x022B, r25
    170e:	18 c0       	rjmp	.+48     	; 0x1740 <__vector_20+0x5e>
    1710:	2e ef       	ldi	r18, 0xFE	; 254
    1712:	28 0f       	add	r18, r24
    1714:	20 3a       	cpi	r18, 0xA0	; 160
    1716:	80 f4       	brcc	.+32     	; 0x1738 <__vector_20+0x56>
    1718:	20 91 2b 02 	lds	r18, 0x022B
    171c:	23 30       	cpi	r18, 0x03	; 3
    171e:	61 f4       	brne	.+24     	; 0x1738 <__vector_20+0x56>
    1720:	e8 2f       	mov	r30, r24
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	eb 5c       	subi	r30, 0xCB	; 203
    1726:	f9 4f       	sbci	r31, 0xF9	; 249
    1728:	90 83       	st	Z, r25
    172a:	90 81       	ld	r25, Z
    172c:	20 91 2a 02 	lds	r18, 0x022A
    1730:	92 27       	eor	r25, r18
    1732:	90 93 2a 02 	sts	0x022A, r25
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <__vector_20+0x5e>
    1738:	82 3a       	cpi	r24, 0xA2	; 162
    173a:	11 f4       	brne	.+4      	; 0x1740 <__vector_20+0x5e>
    173c:	90 93 29 02 	sts	0x0229, r25
    1740:	8f 5f       	subi	r24, 0xFF	; 255
    1742:	80 93 2c 02 	sts	0x022C, r24
    1746:	12 c0       	rjmp	.+36     	; 0x176c <__vector_20+0x8a>
    1748:	90 91 2a 02 	lds	r25, 0x022A
    174c:	80 91 29 02 	lds	r24, 0x0229
    1750:	98 13       	cpse	r25, r24
    1752:	03 c0       	rjmp	.+6      	; 0x175a <__vector_20+0x78>
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	80 93 2d 02 	sts	0x022D, r24
    175a:	10 92 2c 02 	sts	0x022C, r1
    175e:	10 92 2b 02 	sts	0x022B, r1
    1762:	8b eb       	ldi	r24, 0xBB	; 187
    1764:	80 93 29 02 	sts	0x0229, r24
    1768:	10 92 2a 02 	sts	0x022A, r1
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	2f 91       	pop	r18
    1776:	0f 90       	pop	r0
    1778:	0b be       	out	0x3b, r0	; 59
    177a:	0f 90       	pop	r0
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	0f 90       	pop	r0
    1780:	1f 90       	pop	r1
    1782:	18 95       	reti

00001784 <__vector_22>:
    1784:	1f 92       	push	r1
    1786:	0f 92       	push	r0
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	0f 92       	push	r0
    178c:	11 24       	eor	r1, r1
    178e:	0b b6       	in	r0, 0x3b	; 59
    1790:	0f 92       	push	r0
    1792:	2f 93       	push	r18
    1794:	8f 93       	push	r24
    1796:	9f 93       	push	r25
    1798:	ef 93       	push	r30
    179a:	ff 93       	push	r31
    179c:	e0 91 28 02 	lds	r30, 0x0228
    17a0:	e0 3a       	cpi	r30, 0xA0	; 160
    17a2:	b0 f4       	brcc	.+44     	; 0x17d0 <__vector_22+0x4c>
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	ed 5f       	subi	r30, 0xFD	; 253
    17a8:	fe 4f       	sbci	r31, 0xFE	; 254
    17aa:	80 81       	ld	r24, Z
    17ac:	80 93 c6 00 	sts	0x00C6, r24
    17b0:	80 91 28 02 	lds	r24, 0x0228
    17b4:	e8 2f       	mov	r30, r24
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	ed 5f       	subi	r30, 0xFD	; 253
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	90 81       	ld	r25, Z
    17be:	20 91 27 02 	lds	r18, 0x0227
    17c2:	92 27       	eor	r25, r18
    17c4:	90 93 27 02 	sts	0x0227, r25
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	80 93 28 02 	sts	0x0228, r24
    17ce:	1d c0       	rjmp	.+58     	; 0x180a <__vector_22+0x86>
    17d0:	e0 3a       	cpi	r30, 0xA0	; 160
    17d2:	51 f4       	brne	.+20     	; 0x17e8 <__vector_22+0x64>
    17d4:	80 91 27 02 	lds	r24, 0x0227
    17d8:	80 93 c6 00 	sts	0x00C6, r24
    17dc:	80 91 28 02 	lds	r24, 0x0228
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	80 93 28 02 	sts	0x0228, r24
    17e6:	11 c0       	rjmp	.+34     	; 0x180a <__vector_22+0x86>
    17e8:	e1 3a       	cpi	r30, 0xA1	; 161
    17ea:	49 f4       	brne	.+18     	; 0x17fe <__vector_22+0x7a>
    17ec:	8d e0       	ldi	r24, 0x0D	; 13
    17ee:	80 93 c6 00 	sts	0x00C6, r24
    17f2:	80 91 28 02 	lds	r24, 0x0228
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	80 93 28 02 	sts	0x0228, r24
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <__vector_22+0x86>
    17fe:	10 92 27 02 	sts	0x0227, r1
    1802:	10 92 28 02 	sts	0x0228, r1
    1806:	10 92 2d 02 	sts	0x022D, r1
    180a:	ff 91       	pop	r31
    180c:	ef 91       	pop	r30
    180e:	9f 91       	pop	r25
    1810:	8f 91       	pop	r24
    1812:	2f 91       	pop	r18
    1814:	0f 90       	pop	r0
    1816:	0b be       	out	0x3b, r0	; 59
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <__vector_28>:
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	0b b6       	in	r0, 0x3b	; 59
    182e:	0f 92       	push	r0
    1830:	2f 93       	push	r18
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	ef 93       	push	r30
    1838:	ff 93       	push	r31
    183a:	90 91 ce 00 	lds	r25, 0x00CE
    183e:	9d 30       	cpi	r25, 0x0D	; 13
    1840:	19 f1       	breq	.+70     	; 0x1888 <__vector_28+0x66>
    1842:	80 91 26 02 	lds	r24, 0x0226
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	19 f4       	brne	.+6      	; 0x1850 <__vector_28+0x2e>
    184a:	90 93 25 02 	sts	0x0225, r25
    184e:	18 c0       	rjmp	.+48     	; 0x1880 <__vector_28+0x5e>
    1850:	2e ef       	ldi	r18, 0xFE	; 254
    1852:	28 0f       	add	r18, r24
    1854:	20 3a       	cpi	r18, 0xA0	; 160
    1856:	80 f4       	brcc	.+32     	; 0x1878 <__vector_28+0x56>
    1858:	20 91 25 02 	lds	r18, 0x0225
    185c:	23 30       	cpi	r18, 0x03	; 3
    185e:	61 f4       	brne	.+24     	; 0x1878 <__vector_28+0x56>
    1860:	e8 2f       	mov	r30, r24
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	eb 5c       	subi	r30, 0xCB	; 203
    1866:	f9 4f       	sbci	r31, 0xF9	; 249
    1868:	90 83       	st	Z, r25
    186a:	90 81       	ld	r25, Z
    186c:	20 91 24 02 	lds	r18, 0x0224
    1870:	92 27       	eor	r25, r18
    1872:	90 93 24 02 	sts	0x0224, r25
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <__vector_28+0x5e>
    1878:	82 3a       	cpi	r24, 0xA2	; 162
    187a:	11 f4       	brne	.+4      	; 0x1880 <__vector_28+0x5e>
    187c:	90 93 23 02 	sts	0x0223, r25
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	80 93 26 02 	sts	0x0226, r24
    1886:	16 c0       	rjmp	.+44     	; 0x18b4 <__vector_28+0x92>
    1888:	90 91 24 02 	lds	r25, 0x0224
    188c:	80 91 23 02 	lds	r24, 0x0223
    1890:	98 13       	cpse	r25, r24
    1892:	07 c0       	rjmp	.+14     	; 0x18a2 <__vector_28+0x80>
    1894:	80 91 25 02 	lds	r24, 0x0225
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	19 f4       	brne	.+6      	; 0x18a2 <__vector_28+0x80>
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	80 93 2d 02 	sts	0x022D, r24
    18a2:	10 92 26 02 	sts	0x0226, r1
    18a6:	10 92 25 02 	sts	0x0225, r1
    18aa:	8b eb       	ldi	r24, 0xBB	; 187
    18ac:	80 93 23 02 	sts	0x0223, r24
    18b0:	10 92 24 02 	sts	0x0224, r1
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	9f 91       	pop	r25
    18ba:	8f 91       	pop	r24
    18bc:	2f 91       	pop	r18
    18be:	0f 90       	pop	r0
    18c0:	0b be       	out	0x3b, r0	; 59
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	0f 90       	pop	r0
    18c8:	1f 90       	pop	r1
    18ca:	18 95       	reti

000018cc <__vector_30>:
    18cc:	1f 92       	push	r1
    18ce:	0f 92       	push	r0
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	0b b6       	in	r0, 0x3b	; 59
    18d8:	0f 92       	push	r0
    18da:	2f 93       	push	r18
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
    18e4:	e0 91 22 02 	lds	r30, 0x0222
    18e8:	e0 3a       	cpi	r30, 0xA0	; 160
    18ea:	b0 f4       	brcc	.+44     	; 0x1918 <__vector_30+0x4c>
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	ed 5f       	subi	r30, 0xFD	; 253
    18f0:	fe 4f       	sbci	r31, 0xFE	; 254
    18f2:	80 81       	ld	r24, Z
    18f4:	80 93 ce 00 	sts	0x00CE, r24
    18f8:	80 91 22 02 	lds	r24, 0x0222
    18fc:	e8 2f       	mov	r30, r24
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	ed 5f       	subi	r30, 0xFD	; 253
    1902:	fe 4f       	sbci	r31, 0xFE	; 254
    1904:	90 81       	ld	r25, Z
    1906:	20 91 21 02 	lds	r18, 0x0221
    190a:	92 27       	eor	r25, r18
    190c:	90 93 21 02 	sts	0x0221, r25
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	80 93 22 02 	sts	0x0222, r24
    1916:	1d c0       	rjmp	.+58     	; 0x1952 <__vector_30+0x86>
    1918:	e0 3a       	cpi	r30, 0xA0	; 160
    191a:	51 f4       	brne	.+20     	; 0x1930 <__vector_30+0x64>
    191c:	80 91 21 02 	lds	r24, 0x0221
    1920:	80 93 ce 00 	sts	0x00CE, r24
    1924:	80 91 22 02 	lds	r24, 0x0222
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	80 93 22 02 	sts	0x0222, r24
    192e:	11 c0       	rjmp	.+34     	; 0x1952 <__vector_30+0x86>
    1930:	e1 3a       	cpi	r30, 0xA1	; 161
    1932:	49 f4       	brne	.+18     	; 0x1946 <__vector_30+0x7a>
    1934:	8d e0       	ldi	r24, 0x0D	; 13
    1936:	80 93 ce 00 	sts	0x00CE, r24
    193a:	80 91 22 02 	lds	r24, 0x0222
    193e:	8f 5f       	subi	r24, 0xFF	; 255
    1940:	80 93 22 02 	sts	0x0222, r24
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <__vector_30+0x86>
    1946:	10 92 21 02 	sts	0x0221, r1
    194a:	10 92 22 02 	sts	0x0222, r1
    194e:	10 92 2d 02 	sts	0x022D, r1
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	9f 91       	pop	r25
    1958:	8f 91       	pop	r24
    195a:	2f 91       	pop	r18
    195c:	0f 90       	pop	r0
    195e:	0b be       	out	0x3b, r0	; 59
    1960:	0f 90       	pop	r0
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	0f 90       	pop	r0
    1966:	1f 90       	pop	r1
    1968:	18 95       	reti

0000196a <uart_init1>:
    196a:	e8 ec       	ldi	r30, 0xC8	; 200
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	80 83       	st	Z, r24
    1972:	88 ed       	ldi	r24, 0xD8	; 216
    1974:	80 93 c9 00 	sts	0x00C9, r24
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	80 93 ca 00 	sts	0x00CA, r24
    197e:	10 92 cd 00 	sts	0x00CD, r1
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	80 93 cc 00 	sts	0x00CC, r24
    1988:	08 95       	ret

0000198a <uart1_tx_byte>:
	}
}

void uart1_tx_byte(unsigned char c)
{
	while (!(UCSR1A & (1<<UDRE1)))  /* warten bis Senden moeglich */
    198a:	e8 ec       	ldi	r30, 0xC8	; 200
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	90 81       	ld	r25, Z
    1990:	95 ff       	sbrs	r25, 5
    1992:	fd cf       	rjmp	.-6      	; 0x198e <uart1_tx_byte+0x4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1994:	f8 94       	cli
	{
	}
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		UDR1 = c;
    1996:	80 93 ce 00 	sts	0x00CE, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    199a:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    199c:	08 95       	ret

0000199e <uart1_tx_frame>:
}


uint8_t uart1_tx_frame()
{
	uart1_tx_byte(PREAMBLE);
    199e:	8a ea       	ldi	r24, 0xAA	; 170
    19a0:	f4 df       	rcall	.-24     	; 0x198a <uart1_tx_byte>
	uart1_tx_byte(device_address);
    19a2:	83 e0       	ldi	r24, 0x03	; 3
    19a4:	f2 df       	rcall	.-28     	; 0x198a <uart1_tx_byte>
	return 1;
}
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	08 95       	ret

000019aa <__divsf3>:
    19aa:	0c d0       	rcall	.+24     	; 0x19c4 <__divsf3x>
    19ac:	e6 c0       	rjmp	.+460    	; 0x1b7a <__fp_round>
    19ae:	de d0       	rcall	.+444    	; 0x1b6c <__fp_pscB>
    19b0:	40 f0       	brcs	.+16     	; 0x19c2 <__divsf3+0x18>
    19b2:	d5 d0       	rcall	.+426    	; 0x1b5e <__fp_pscA>
    19b4:	30 f0       	brcs	.+12     	; 0x19c2 <__divsf3+0x18>
    19b6:	21 f4       	brne	.+8      	; 0x19c0 <__divsf3+0x16>
    19b8:	5f 3f       	cpi	r21, 0xFF	; 255
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <__divsf3+0x18>
    19bc:	c7 c0       	rjmp	.+398    	; 0x1b4c <__fp_inf>
    19be:	51 11       	cpse	r21, r1
    19c0:	10 c1       	rjmp	.+544    	; 0x1be2 <__fp_szero>
    19c2:	ca c0       	rjmp	.+404    	; 0x1b58 <__fp_nan>

000019c4 <__divsf3x>:
    19c4:	eb d0       	rcall	.+470    	; 0x1b9c <__fp_split3>
    19c6:	98 f3       	brcs	.-26     	; 0x19ae <__divsf3+0x4>

000019c8 <__divsf3_pse>:
    19c8:	99 23       	and	r25, r25
    19ca:	c9 f3       	breq	.-14     	; 0x19be <__divsf3+0x14>
    19cc:	55 23       	and	r21, r21
    19ce:	b1 f3       	breq	.-20     	; 0x19bc <__divsf3+0x12>
    19d0:	95 1b       	sub	r25, r21
    19d2:	55 0b       	sbc	r21, r21
    19d4:	bb 27       	eor	r27, r27
    19d6:	aa 27       	eor	r26, r26
    19d8:	62 17       	cp	r22, r18
    19da:	73 07       	cpc	r23, r19
    19dc:	84 07       	cpc	r24, r20
    19de:	38 f0       	brcs	.+14     	; 0x19ee <__divsf3_pse+0x26>
    19e0:	9f 5f       	subi	r25, 0xFF	; 255
    19e2:	5f 4f       	sbci	r21, 0xFF	; 255
    19e4:	22 0f       	add	r18, r18
    19e6:	33 1f       	adc	r19, r19
    19e8:	44 1f       	adc	r20, r20
    19ea:	aa 1f       	adc	r26, r26
    19ec:	a9 f3       	breq	.-22     	; 0x19d8 <__divsf3_pse+0x10>
    19ee:	33 d0       	rcall	.+102    	; 0x1a56 <__divsf3_pse+0x8e>
    19f0:	0e 2e       	mov	r0, r30
    19f2:	3a f0       	brmi	.+14     	; 0x1a02 <__divsf3_pse+0x3a>
    19f4:	e0 e8       	ldi	r30, 0x80	; 128
    19f6:	30 d0       	rcall	.+96     	; 0x1a58 <__divsf3_pse+0x90>
    19f8:	91 50       	subi	r25, 0x01	; 1
    19fa:	50 40       	sbci	r21, 0x00	; 0
    19fc:	e6 95       	lsr	r30
    19fe:	00 1c       	adc	r0, r0
    1a00:	ca f7       	brpl	.-14     	; 0x19f4 <__divsf3_pse+0x2c>
    1a02:	29 d0       	rcall	.+82     	; 0x1a56 <__divsf3_pse+0x8e>
    1a04:	fe 2f       	mov	r31, r30
    1a06:	27 d0       	rcall	.+78     	; 0x1a56 <__divsf3_pse+0x8e>
    1a08:	66 0f       	add	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	bb 1f       	adc	r27, r27
    1a10:	26 17       	cp	r18, r22
    1a12:	37 07       	cpc	r19, r23
    1a14:	48 07       	cpc	r20, r24
    1a16:	ab 07       	cpc	r26, r27
    1a18:	b0 e8       	ldi	r27, 0x80	; 128
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <__divsf3_pse+0x56>
    1a1c:	bb 0b       	sbc	r27, r27
    1a1e:	80 2d       	mov	r24, r0
    1a20:	bf 01       	movw	r22, r30
    1a22:	ff 27       	eor	r31, r31
    1a24:	93 58       	subi	r25, 0x83	; 131
    1a26:	5f 4f       	sbci	r21, 0xFF	; 255
    1a28:	2a f0       	brmi	.+10     	; 0x1a34 <__divsf3_pse+0x6c>
    1a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a2c:	51 05       	cpc	r21, r1
    1a2e:	68 f0       	brcs	.+26     	; 0x1a4a <__divsf3_pse+0x82>
    1a30:	8d c0       	rjmp	.+282    	; 0x1b4c <__fp_inf>
    1a32:	d7 c0       	rjmp	.+430    	; 0x1be2 <__fp_szero>
    1a34:	5f 3f       	cpi	r21, 0xFF	; 255
    1a36:	ec f3       	brlt	.-6      	; 0x1a32 <__divsf3_pse+0x6a>
    1a38:	98 3e       	cpi	r25, 0xE8	; 232
    1a3a:	dc f3       	brlt	.-10     	; 0x1a32 <__divsf3_pse+0x6a>
    1a3c:	86 95       	lsr	r24
    1a3e:	77 95       	ror	r23
    1a40:	67 95       	ror	r22
    1a42:	b7 95       	ror	r27
    1a44:	f7 95       	ror	r31
    1a46:	9f 5f       	subi	r25, 0xFF	; 255
    1a48:	c9 f7       	brne	.-14     	; 0x1a3c <__divsf3_pse+0x74>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	91 1d       	adc	r25, r1
    1a4e:	96 95       	lsr	r25
    1a50:	87 95       	ror	r24
    1a52:	97 f9       	bld	r25, 7
    1a54:	08 95       	ret
    1a56:	e1 e0       	ldi	r30, 0x01	; 1
    1a58:	66 0f       	add	r22, r22
    1a5a:	77 1f       	adc	r23, r23
    1a5c:	88 1f       	adc	r24, r24
    1a5e:	bb 1f       	adc	r27, r27
    1a60:	62 17       	cp	r22, r18
    1a62:	73 07       	cpc	r23, r19
    1a64:	84 07       	cpc	r24, r20
    1a66:	ba 07       	cpc	r27, r26
    1a68:	20 f0       	brcs	.+8      	; 0x1a72 <__divsf3_pse+0xaa>
    1a6a:	62 1b       	sub	r22, r18
    1a6c:	73 0b       	sbc	r23, r19
    1a6e:	84 0b       	sbc	r24, r20
    1a70:	ba 0b       	sbc	r27, r26
    1a72:	ee 1f       	adc	r30, r30
    1a74:	88 f7       	brcc	.-30     	; 0x1a58 <__divsf3_pse+0x90>
    1a76:	e0 95       	com	r30
    1a78:	08 95       	ret

00001a7a <__fixunssfsi>:
    1a7a:	98 d0       	rcall	.+304    	; 0x1bac <__fp_splitA>
    1a7c:	88 f0       	brcs	.+34     	; 0x1aa0 <__fixunssfsi+0x26>
    1a7e:	9f 57       	subi	r25, 0x7F	; 127
    1a80:	90 f0       	brcs	.+36     	; 0x1aa6 <__fixunssfsi+0x2c>
    1a82:	b9 2f       	mov	r27, r25
    1a84:	99 27       	eor	r25, r25
    1a86:	b7 51       	subi	r27, 0x17	; 23
    1a88:	a0 f0       	brcs	.+40     	; 0x1ab2 <__fixunssfsi+0x38>
    1a8a:	d1 f0       	breq	.+52     	; 0x1ac0 <__fixunssfsi+0x46>
    1a8c:	66 0f       	add	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 1f       	adc	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	1a f0       	brmi	.+6      	; 0x1a9c <__fixunssfsi+0x22>
    1a96:	ba 95       	dec	r27
    1a98:	c9 f7       	brne	.-14     	; 0x1a8c <__fixunssfsi+0x12>
    1a9a:	12 c0       	rjmp	.+36     	; 0x1ac0 <__fixunssfsi+0x46>
    1a9c:	b1 30       	cpi	r27, 0x01	; 1
    1a9e:	81 f0       	breq	.+32     	; 0x1ac0 <__fixunssfsi+0x46>
    1aa0:	9f d0       	rcall	.+318    	; 0x1be0 <__fp_zero>
    1aa2:	b1 e0       	ldi	r27, 0x01	; 1
    1aa4:	08 95       	ret
    1aa6:	9c c0       	rjmp	.+312    	; 0x1be0 <__fp_zero>
    1aa8:	67 2f       	mov	r22, r23
    1aaa:	78 2f       	mov	r23, r24
    1aac:	88 27       	eor	r24, r24
    1aae:	b8 5f       	subi	r27, 0xF8	; 248
    1ab0:	39 f0       	breq	.+14     	; 0x1ac0 <__fixunssfsi+0x46>
    1ab2:	b9 3f       	cpi	r27, 0xF9	; 249
    1ab4:	cc f3       	brlt	.-14     	; 0x1aa8 <__fixunssfsi+0x2e>
    1ab6:	86 95       	lsr	r24
    1ab8:	77 95       	ror	r23
    1aba:	67 95       	ror	r22
    1abc:	b3 95       	inc	r27
    1abe:	d9 f7       	brne	.-10     	; 0x1ab6 <__fixunssfsi+0x3c>
    1ac0:	3e f4       	brtc	.+14     	; 0x1ad0 <__fixunssfsi+0x56>
    1ac2:	90 95       	com	r25
    1ac4:	80 95       	com	r24
    1ac6:	70 95       	com	r23
    1ac8:	61 95       	neg	r22
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	08 95       	ret

00001ad2 <__floatunsisf>:
    1ad2:	e8 94       	clt
    1ad4:	09 c0       	rjmp	.+18     	; 0x1ae8 <__floatsisf+0x12>

00001ad6 <__floatsisf>:
    1ad6:	97 fb       	bst	r25, 7
    1ad8:	3e f4       	brtc	.+14     	; 0x1ae8 <__floatsisf+0x12>
    1ada:	90 95       	com	r25
    1adc:	80 95       	com	r24
    1ade:	70 95       	com	r23
    1ae0:	61 95       	neg	r22
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	99 23       	and	r25, r25
    1aea:	a9 f0       	breq	.+42     	; 0x1b16 <__floatsisf+0x40>
    1aec:	f9 2f       	mov	r31, r25
    1aee:	96 e9       	ldi	r25, 0x96	; 150
    1af0:	bb 27       	eor	r27, r27
    1af2:	93 95       	inc	r25
    1af4:	f6 95       	lsr	r31
    1af6:	87 95       	ror	r24
    1af8:	77 95       	ror	r23
    1afa:	67 95       	ror	r22
    1afc:	b7 95       	ror	r27
    1afe:	f1 11       	cpse	r31, r1
    1b00:	f8 cf       	rjmp	.-16     	; 0x1af2 <__floatsisf+0x1c>
    1b02:	fa f4       	brpl	.+62     	; 0x1b42 <__floatsisf+0x6c>
    1b04:	bb 0f       	add	r27, r27
    1b06:	11 f4       	brne	.+4      	; 0x1b0c <__floatsisf+0x36>
    1b08:	60 ff       	sbrs	r22, 0
    1b0a:	1b c0       	rjmp	.+54     	; 0x1b42 <__floatsisf+0x6c>
    1b0c:	6f 5f       	subi	r22, 0xFF	; 255
    1b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b10:	8f 4f       	sbci	r24, 0xFF	; 255
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
    1b14:	16 c0       	rjmp	.+44     	; 0x1b42 <__floatsisf+0x6c>
    1b16:	88 23       	and	r24, r24
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <__floatsisf+0x48>
    1b1a:	96 e9       	ldi	r25, 0x96	; 150
    1b1c:	11 c0       	rjmp	.+34     	; 0x1b40 <__floatsisf+0x6a>
    1b1e:	77 23       	and	r23, r23
    1b20:	21 f0       	breq	.+8      	; 0x1b2a <__floatsisf+0x54>
    1b22:	9e e8       	ldi	r25, 0x8E	; 142
    1b24:	87 2f       	mov	r24, r23
    1b26:	76 2f       	mov	r23, r22
    1b28:	05 c0       	rjmp	.+10     	; 0x1b34 <__floatsisf+0x5e>
    1b2a:	66 23       	and	r22, r22
    1b2c:	71 f0       	breq	.+28     	; 0x1b4a <__floatsisf+0x74>
    1b2e:	96 e8       	ldi	r25, 0x86	; 134
    1b30:	86 2f       	mov	r24, r22
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	2a f0       	brmi	.+10     	; 0x1b42 <__floatsisf+0x6c>
    1b38:	9a 95       	dec	r25
    1b3a:	66 0f       	add	r22, r22
    1b3c:	77 1f       	adc	r23, r23
    1b3e:	88 1f       	adc	r24, r24
    1b40:	da f7       	brpl	.-10     	; 0x1b38 <__floatsisf+0x62>
    1b42:	88 0f       	add	r24, r24
    1b44:	96 95       	lsr	r25
    1b46:	87 95       	ror	r24
    1b48:	97 f9       	bld	r25, 7
    1b4a:	08 95       	ret

00001b4c <__fp_inf>:
    1b4c:	97 f9       	bld	r25, 7
    1b4e:	9f 67       	ori	r25, 0x7F	; 127
    1b50:	80 e8       	ldi	r24, 0x80	; 128
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	08 95       	ret

00001b58 <__fp_nan>:
    1b58:	9f ef       	ldi	r25, 0xFF	; 255
    1b5a:	80 ec       	ldi	r24, 0xC0	; 192
    1b5c:	08 95       	ret

00001b5e <__fp_pscA>:
    1b5e:	00 24       	eor	r0, r0
    1b60:	0a 94       	dec	r0
    1b62:	16 16       	cp	r1, r22
    1b64:	17 06       	cpc	r1, r23
    1b66:	18 06       	cpc	r1, r24
    1b68:	09 06       	cpc	r0, r25
    1b6a:	08 95       	ret

00001b6c <__fp_pscB>:
    1b6c:	00 24       	eor	r0, r0
    1b6e:	0a 94       	dec	r0
    1b70:	12 16       	cp	r1, r18
    1b72:	13 06       	cpc	r1, r19
    1b74:	14 06       	cpc	r1, r20
    1b76:	05 06       	cpc	r0, r21
    1b78:	08 95       	ret

00001b7a <__fp_round>:
    1b7a:	09 2e       	mov	r0, r25
    1b7c:	03 94       	inc	r0
    1b7e:	00 0c       	add	r0, r0
    1b80:	11 f4       	brne	.+4      	; 0x1b86 <__fp_round+0xc>
    1b82:	88 23       	and	r24, r24
    1b84:	52 f0       	brmi	.+20     	; 0x1b9a <__fp_round+0x20>
    1b86:	bb 0f       	add	r27, r27
    1b88:	40 f4       	brcc	.+16     	; 0x1b9a <__fp_round+0x20>
    1b8a:	bf 2b       	or	r27, r31
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <__fp_round+0x18>
    1b8e:	60 ff       	sbrs	r22, 0
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <__fp_round+0x20>
    1b92:	6f 5f       	subi	r22, 0xFF	; 255
    1b94:	7f 4f       	sbci	r23, 0xFF	; 255
    1b96:	8f 4f       	sbci	r24, 0xFF	; 255
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	08 95       	ret

00001b9c <__fp_split3>:
    1b9c:	57 fd       	sbrc	r21, 7
    1b9e:	90 58       	subi	r25, 0x80	; 128
    1ba0:	44 0f       	add	r20, r20
    1ba2:	55 1f       	adc	r21, r21
    1ba4:	59 f0       	breq	.+22     	; 0x1bbc <__fp_splitA+0x10>
    1ba6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba8:	71 f0       	breq	.+28     	; 0x1bc6 <__fp_splitA+0x1a>
    1baa:	47 95       	ror	r20

00001bac <__fp_splitA>:
    1bac:	88 0f       	add	r24, r24
    1bae:	97 fb       	bst	r25, 7
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <__fp_splitA+0x20>
    1bb4:	9f 3f       	cpi	r25, 0xFF	; 255
    1bb6:	79 f0       	breq	.+30     	; 0x1bd6 <__fp_splitA+0x2a>
    1bb8:	87 95       	ror	r24
    1bba:	08 95       	ret
    1bbc:	12 16       	cp	r1, r18
    1bbe:	13 06       	cpc	r1, r19
    1bc0:	14 06       	cpc	r1, r20
    1bc2:	55 1f       	adc	r21, r21
    1bc4:	f2 cf       	rjmp	.-28     	; 0x1baa <__fp_split3+0xe>
    1bc6:	46 95       	lsr	r20
    1bc8:	f1 df       	rcall	.-30     	; 0x1bac <__fp_splitA>
    1bca:	08 c0       	rjmp	.+16     	; 0x1bdc <__fp_splitA+0x30>
    1bcc:	16 16       	cp	r1, r22
    1bce:	17 06       	cpc	r1, r23
    1bd0:	18 06       	cpc	r1, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	f1 cf       	rjmp	.-30     	; 0x1bb8 <__fp_splitA+0xc>
    1bd6:	86 95       	lsr	r24
    1bd8:	71 05       	cpc	r23, r1
    1bda:	61 05       	cpc	r22, r1
    1bdc:	08 94       	sec
    1bde:	08 95       	ret

00001be0 <__fp_zero>:
    1be0:	e8 94       	clt

00001be2 <__fp_szero>:
    1be2:	bb 27       	eor	r27, r27
    1be4:	66 27       	eor	r22, r22
    1be6:	77 27       	eor	r23, r23
    1be8:	cb 01       	movw	r24, r22
    1bea:	97 f9       	bld	r25, 7
    1bec:	08 95       	ret

00001bee <__mulsf3>:
    1bee:	0b d0       	rcall	.+22     	; 0x1c06 <__mulsf3x>
    1bf0:	c4 cf       	rjmp	.-120    	; 0x1b7a <__fp_round>
    1bf2:	b5 df       	rcall	.-150    	; 0x1b5e <__fp_pscA>
    1bf4:	28 f0       	brcs	.+10     	; 0x1c00 <__mulsf3+0x12>
    1bf6:	ba df       	rcall	.-140    	; 0x1b6c <__fp_pscB>
    1bf8:	18 f0       	brcs	.+6      	; 0x1c00 <__mulsf3+0x12>
    1bfa:	95 23       	and	r25, r21
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <__mulsf3+0x12>
    1bfe:	a6 cf       	rjmp	.-180    	; 0x1b4c <__fp_inf>
    1c00:	ab cf       	rjmp	.-170    	; 0x1b58 <__fp_nan>
    1c02:	11 24       	eor	r1, r1
    1c04:	ee cf       	rjmp	.-36     	; 0x1be2 <__fp_szero>

00001c06 <__mulsf3x>:
    1c06:	ca df       	rcall	.-108    	; 0x1b9c <__fp_split3>
    1c08:	a0 f3       	brcs	.-24     	; 0x1bf2 <__mulsf3+0x4>

00001c0a <__mulsf3_pse>:
    1c0a:	95 9f       	mul	r25, r21
    1c0c:	d1 f3       	breq	.-12     	; 0x1c02 <__mulsf3+0x14>
    1c0e:	95 0f       	add	r25, r21
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	55 1f       	adc	r21, r21
    1c14:	62 9f       	mul	r22, r18
    1c16:	f0 01       	movw	r30, r0
    1c18:	72 9f       	mul	r23, r18
    1c1a:	bb 27       	eor	r27, r27
    1c1c:	f0 0d       	add	r31, r0
    1c1e:	b1 1d       	adc	r27, r1
    1c20:	63 9f       	mul	r22, r19
    1c22:	aa 27       	eor	r26, r26
    1c24:	f0 0d       	add	r31, r0
    1c26:	b1 1d       	adc	r27, r1
    1c28:	aa 1f       	adc	r26, r26
    1c2a:	64 9f       	mul	r22, r20
    1c2c:	66 27       	eor	r22, r22
    1c2e:	b0 0d       	add	r27, r0
    1c30:	a1 1d       	adc	r26, r1
    1c32:	66 1f       	adc	r22, r22
    1c34:	82 9f       	mul	r24, r18
    1c36:	22 27       	eor	r18, r18
    1c38:	b0 0d       	add	r27, r0
    1c3a:	a1 1d       	adc	r26, r1
    1c3c:	62 1f       	adc	r22, r18
    1c3e:	73 9f       	mul	r23, r19
    1c40:	b0 0d       	add	r27, r0
    1c42:	a1 1d       	adc	r26, r1
    1c44:	62 1f       	adc	r22, r18
    1c46:	83 9f       	mul	r24, r19
    1c48:	a0 0d       	add	r26, r0
    1c4a:	61 1d       	adc	r22, r1
    1c4c:	22 1f       	adc	r18, r18
    1c4e:	74 9f       	mul	r23, r20
    1c50:	33 27       	eor	r19, r19
    1c52:	a0 0d       	add	r26, r0
    1c54:	61 1d       	adc	r22, r1
    1c56:	23 1f       	adc	r18, r19
    1c58:	84 9f       	mul	r24, r20
    1c5a:	60 0d       	add	r22, r0
    1c5c:	21 1d       	adc	r18, r1
    1c5e:	82 2f       	mov	r24, r18
    1c60:	76 2f       	mov	r23, r22
    1c62:	6a 2f       	mov	r22, r26
    1c64:	11 24       	eor	r1, r1
    1c66:	9f 57       	subi	r25, 0x7F	; 127
    1c68:	50 40       	sbci	r21, 0x00	; 0
    1c6a:	8a f0       	brmi	.+34     	; 0x1c8e <__mulsf3_pse+0x84>
    1c6c:	e1 f0       	breq	.+56     	; 0x1ca6 <__mulsf3_pse+0x9c>
    1c6e:	88 23       	and	r24, r24
    1c70:	4a f0       	brmi	.+18     	; 0x1c84 <__mulsf3_pse+0x7a>
    1c72:	ee 0f       	add	r30, r30
    1c74:	ff 1f       	adc	r31, r31
    1c76:	bb 1f       	adc	r27, r27
    1c78:	66 1f       	adc	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	91 50       	subi	r25, 0x01	; 1
    1c80:	50 40       	sbci	r21, 0x00	; 0
    1c82:	a9 f7       	brne	.-22     	; 0x1c6e <__mulsf3_pse+0x64>
    1c84:	9e 3f       	cpi	r25, 0xFE	; 254
    1c86:	51 05       	cpc	r21, r1
    1c88:	70 f0       	brcs	.+28     	; 0x1ca6 <__mulsf3_pse+0x9c>
    1c8a:	60 cf       	rjmp	.-320    	; 0x1b4c <__fp_inf>
    1c8c:	aa cf       	rjmp	.-172    	; 0x1be2 <__fp_szero>
    1c8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c90:	ec f3       	brlt	.-6      	; 0x1c8c <__mulsf3_pse+0x82>
    1c92:	98 3e       	cpi	r25, 0xE8	; 232
    1c94:	dc f3       	brlt	.-10     	; 0x1c8c <__mulsf3_pse+0x82>
    1c96:	86 95       	lsr	r24
    1c98:	77 95       	ror	r23
    1c9a:	67 95       	ror	r22
    1c9c:	b7 95       	ror	r27
    1c9e:	f7 95       	ror	r31
    1ca0:	e7 95       	ror	r30
    1ca2:	9f 5f       	subi	r25, 0xFF	; 255
    1ca4:	c1 f7       	brne	.-16     	; 0x1c96 <__mulsf3_pse+0x8c>
    1ca6:	fe 2b       	or	r31, r30
    1ca8:	88 0f       	add	r24, r24
    1caa:	91 1d       	adc	r25, r1
    1cac:	96 95       	lsr	r25
    1cae:	87 95       	ror	r24
    1cb0:	97 f9       	bld	r25, 7
    1cb2:	08 95       	ret

00001cb4 <__udivmodsi4>:
    1cb4:	a1 e2       	ldi	r26, 0x21	; 33
    1cb6:	1a 2e       	mov	r1, r26
    1cb8:	aa 1b       	sub	r26, r26
    1cba:	bb 1b       	sub	r27, r27
    1cbc:	fd 01       	movw	r30, r26
    1cbe:	0d c0       	rjmp	.+26     	; 0x1cda <__udivmodsi4_ep>

00001cc0 <__udivmodsi4_loop>:
    1cc0:	aa 1f       	adc	r26, r26
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	ee 1f       	adc	r30, r30
    1cc6:	ff 1f       	adc	r31, r31
    1cc8:	a2 17       	cp	r26, r18
    1cca:	b3 07       	cpc	r27, r19
    1ccc:	e4 07       	cpc	r30, r20
    1cce:	f5 07       	cpc	r31, r21
    1cd0:	20 f0       	brcs	.+8      	; 0x1cda <__udivmodsi4_ep>
    1cd2:	a2 1b       	sub	r26, r18
    1cd4:	b3 0b       	sbc	r27, r19
    1cd6:	e4 0b       	sbc	r30, r20
    1cd8:	f5 0b       	sbc	r31, r21

00001cda <__udivmodsi4_ep>:
    1cda:	66 1f       	adc	r22, r22
    1cdc:	77 1f       	adc	r23, r23
    1cde:	88 1f       	adc	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	1a 94       	dec	r1
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <__udivmodsi4_loop>
    1ce6:	60 95       	com	r22
    1ce8:	70 95       	com	r23
    1cea:	80 95       	com	r24
    1cec:	90 95       	com	r25
    1cee:	9b 01       	movw	r18, r22
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	bd 01       	movw	r22, r26
    1cf4:	cf 01       	movw	r24, r30
    1cf6:	08 95       	ret

00001cf8 <__umulhisi3>:
    1cf8:	a2 9f       	mul	r26, r18
    1cfa:	b0 01       	movw	r22, r0
    1cfc:	b3 9f       	mul	r27, r19
    1cfe:	c0 01       	movw	r24, r0
    1d00:	a3 9f       	mul	r26, r19
    1d02:	70 0d       	add	r23, r0
    1d04:	81 1d       	adc	r24, r1
    1d06:	11 24       	eor	r1, r1
    1d08:	91 1d       	adc	r25, r1
    1d0a:	b2 9f       	mul	r27, r18
    1d0c:	70 0d       	add	r23, r0
    1d0e:	81 1d       	adc	r24, r1
    1d10:	11 24       	eor	r1, r1
    1d12:	91 1d       	adc	r25, r1
    1d14:	08 95       	ret

00001d16 <__itoa_ncheck>:
    1d16:	bb 27       	eor	r27, r27
    1d18:	4a 30       	cpi	r20, 0x0A	; 10
    1d1a:	31 f4       	brne	.+12     	; 0x1d28 <__itoa_ncheck+0x12>
    1d1c:	99 23       	and	r25, r25
    1d1e:	22 f4       	brpl	.+8      	; 0x1d28 <__itoa_ncheck+0x12>
    1d20:	bd e2       	ldi	r27, 0x2D	; 45
    1d22:	90 95       	com	r25
    1d24:	81 95       	neg	r24
    1d26:	9f 4f       	sbci	r25, 0xFF	; 255
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <__utoa_common>

00001d2a <__utoa_ncheck>:
    1d2a:	bb 27       	eor	r27, r27

00001d2c <__utoa_common>:
    1d2c:	fb 01       	movw	r30, r22
    1d2e:	55 27       	eor	r21, r21
    1d30:	aa 27       	eor	r26, r26
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	aa 1f       	adc	r26, r26
    1d38:	a4 17       	cp	r26, r20
    1d3a:	10 f0       	brcs	.+4      	; 0x1d40 <__utoa_common+0x14>
    1d3c:	a4 1b       	sub	r26, r20
    1d3e:	83 95       	inc	r24
    1d40:	50 51       	subi	r21, 0x10	; 16
    1d42:	b9 f7       	brne	.-18     	; 0x1d32 <__utoa_common+0x6>
    1d44:	a0 5d       	subi	r26, 0xD0	; 208
    1d46:	aa 33       	cpi	r26, 0x3A	; 58
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <__utoa_common+0x20>
    1d4a:	a9 5d       	subi	r26, 0xD9	; 217
    1d4c:	a1 93       	st	Z+, r26
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	79 f7       	brne	.-34     	; 0x1d30 <__utoa_common+0x4>
    1d52:	b1 11       	cpse	r27, r1
    1d54:	b1 93       	st	Z+, r27
    1d56:	11 92       	st	Z+, r1
    1d58:	cb 01       	movw	r24, r22
    1d5a:	00 c0       	rjmp	.+0      	; 0x1d5c <strrev>

00001d5c <strrev>:
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	fc 01       	movw	r30, r24
    1d60:	67 2f       	mov	r22, r23
    1d62:	71 91       	ld	r23, Z+
    1d64:	77 23       	and	r23, r23
    1d66:	e1 f7       	brne	.-8      	; 0x1d60 <strrev+0x4>
    1d68:	32 97       	sbiw	r30, 0x02	; 2
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <strrev+0x18>
    1d6c:	7c 91       	ld	r23, X
    1d6e:	6d 93       	st	X+, r22
    1d70:	70 83       	st	Z, r23
    1d72:	62 91       	ld	r22, -Z
    1d74:	ae 17       	cp	r26, r30
    1d76:	bf 07       	cpc	r27, r31
    1d78:	c8 f3       	brcs	.-14     	; 0x1d6c <strrev+0x10>
    1d7a:	08 95       	ret

00001d7c <_exit>:
    1d7c:	f8 94       	cli

00001d7e <__stop_program>:
    1d7e:	ff cf       	rjmp	.-2      	; 0x1d7e <__stop_program>
