
dss_0708.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00001c66  00001cfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000052e  008001a8  008001a8  00001da2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001da2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fe9  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5e  00000000  00000000  000050cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f74  00000000  00000000  00005c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a8  00000000  00000000  00007ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000919  00000000  00000000  00008448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c98  00000000  00000000  00008d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000b9f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7d c5       	rjmp	.+2810   	; 0xafc <__ctors_end>
       2:	00 00       	nop
       4:	99 c5       	rjmp	.+2866   	; 0xb38 <__bad_interrupt>
       6:	00 00       	nop
       8:	97 c5       	rjmp	.+2862   	; 0xb38 <__bad_interrupt>
       a:	00 00       	nop
       c:	95 c5       	rjmp	.+2858   	; 0xb38 <__bad_interrupt>
       e:	00 00       	nop
      10:	93 c5       	rjmp	.+2854   	; 0xb38 <__bad_interrupt>
      12:	00 00       	nop
      14:	91 c5       	rjmp	.+2850   	; 0xb38 <__bad_interrupt>
      16:	00 00       	nop
      18:	8f c5       	rjmp	.+2846   	; 0xb38 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8d c5       	rjmp	.+2842   	; 0xb38 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8b c5       	rjmp	.+2838   	; 0xb38 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_9>
      28:	87 c5       	rjmp	.+2830   	; 0xb38 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	85 c5       	rjmp	.+2826   	; 0xb38 <__bad_interrupt>
      2e:	00 00       	nop
      30:	83 c5       	rjmp	.+2822   	; 0xb38 <__bad_interrupt>
      32:	00 00       	nop
      34:	81 c5       	rjmp	.+2818   	; 0xb38 <__bad_interrupt>
      36:	00 00       	nop
      38:	7f c5       	rjmp	.+2814   	; 0xb38 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7d c5       	rjmp	.+2810   	; 0xb38 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7b c5       	rjmp	.+2806   	; 0xb38 <__bad_interrupt>
      42:	00 00       	nop
      44:	79 c5       	rjmp	.+2802   	; 0xb38 <__bad_interrupt>
      46:	00 00       	nop
      48:	77 c5       	rjmp	.+2798   	; 0xb38 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	75 c5       	rjmp	.+2794   	; 0xb38 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__vector_20>
      54:	71 c5       	rjmp	.+2786   	; 0xb38 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_22>
      5c:	6d c5       	rjmp	.+2778   	; 0xb38 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6b c5       	rjmp	.+2774   	; 0xb38 <__bad_interrupt>
      62:	00 00       	nop
      64:	69 c5       	rjmp	.+2770   	; 0xb38 <__bad_interrupt>
      66:	00 00       	nop
      68:	67 c5       	rjmp	.+2766   	; 0xb38 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	65 c5       	rjmp	.+2762   	; 0xb38 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__vector_28>
      74:	61 c5       	rjmp	.+2754   	; 0xb38 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__vector_30>
      7c:	5d c5       	rjmp	.+2746   	; 0xb38 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5b c5       	rjmp	.+2742   	; 0xb38 <__bad_interrupt>
      82:	00 00       	nop
      84:	59 c5       	rjmp	.+2738   	; 0xb38 <__bad_interrupt>
      86:	00 00       	nop
      88:	57 c5       	rjmp	.+2734   	; 0xb38 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	20 20       	and	r2, r0
      8e:	20 74       	andi	r18, 0x40	; 64
      90:	68 65       	ori	r22, 0x58	; 88
      92:	20 66       	ori	r18, 0x60	; 96
      94:	72 65       	ori	r23, 0x52	; 82
      96:	71 75       	andi	r23, 0x51	; 81
      98:	65 6e       	ori	r22, 0xE5	; 229
      9a:	63 65       	ori	r22, 0x53	; 83
      9c:	2e 2e       	mov	r2, r30
      9e:	2e 00       	.word	0x002e	; ????

000000a0 <__c.2348>:
      a0:	20 20 20 20 77 61 69 74 69 6e 67 20 66 6f 72 20         waiting for 
	...

000000b1 <__c.2329>:
      b1:	4c 69 20 58 75 65 6a 69 6e 67 0d 0a 00              Li Xuejing...

000000be <__c.2327>:
      be:	57 61 6e 67 20 53 68 69 68 61 6e 67 0d 0a 00        Wang Shihang...

000000cd <__c.2325>:
      cd:	4d 65 6d 62 65 72 73 3a 0d 0a 00                    Members:...

000000d8 <__c.2323>:
      d8:	44 44 53 2d 53 69 67 6e 61 6c 67 65 6e 65 72 61     DDS-Signalgenera
      e8:	74 6f 72 0d 0a 00                                   tor...

000000ee <__c.2321>:
      ee:	50 72 6f 6a 65 63 74 20 30 34 3a 0d 0a 00           Project 04:...

000000fc <raster>:
      fc:	ff 01 01 01 01 01 01 01 01 03 01 01 01 01 01 01     ................
     10c:	01 01 01 03 01 01 01 01 01 01 01 01 01 03 01 01     ................
     11c:	01 01 01 01 01 01 01 03 01 01 01 01 01 01 01 01     ................
     12c:	01 ab 01 01 01 01 01 01 01 01 01 03 01 01 01 01     ................
     13c:	01 01 01 01 01 03 01 01 01 01 01 01 01 01 01 03     ................
     14c:	01 01 01 01 01 01 01 01 01 03 01 01 01 01 01 01     ................
     15c:	01 01 01 01 ff 00 00 f0 f8 8c 8c f8 f0 00 00 fc     ................
     16c:	fc 00 00 fc fc 00 00 04 fc fc 44 c4 fc 38 00 00     ..........D..8..
     17c:	ff 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
     18c:	00 00 00 08 00 00 00 00 00 00 00 00 00 08 00 00     ................
     19c:	00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00     ................
     1ac:	08 aa 08 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     1bc:	00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 08     ................
	...
     1d4:	00 08 00 00 00 00 00 00 00 00 00 08 ff 00 00 c7     ................
     1e4:	27 20 c0 07 07 00 00 01 03 06 06 03 01 00 00 04     ' ..............
     1f4:	07 07 00 00 07 07 00 00 ff 20 00 00 00 00 00 00     ......... ......
     204:	00 20 00 00 00 00 00 00 00 00 00 20 00 00 00 00     . ......... ....
     214:	00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 20     ..... ......... 
	...
     22c:	20 aa 20 00 00 00 00 00 00 00 00 20 00 00 00 00      . ........ ....
     23c:	00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 20     ..... ......... 
	...
     254:	00 20 00 00 00 00 00 00 00 00 00 20 ff 00 00 19     . ......... ....
     264:	22 22 1c 00 1e 21 21 21 00 1e 21 21 1e 00 ff 21     ""...!!!..!!...!
     274:	21 1e 00 1e 29 29 2e 00 ff 80 00 80 00 80 00 80     !...))..........
     284:	00 c0 00 80 00 80 00 80 00 80 00 c0 00 80 00 80     ................
     294:	00 80 00 80 00 c0 00 80 00 80 00 80 00 80 00 c0     ................
     2a4:	00 80 00 80 00 80 00 80 00 aa 00 80 00 80 00 80     ................
     2b4:	00 80 00 c0 00 80 00 80 00 80 00 80 00 c0 00 80     ................
     2c4:	00 80 00 80 00 80 00 c0 00 80 00 80 00 80 00 80     ................
     2d4:	00 c0 00 80 00 80 00 80 00 80 00 80 ff 00 00 00     ................
     2e4:	f0 50 10 00 f0 50 a0 00 f0 50 10 00 e0 10 10 e0     .P...P...P......
	...
     2fc:	ff 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00     ................
     30c:	00 00 00 01 00 00 00 00 00 00 00 00 00 01 00 00     ................
     31c:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     32c:	00 aa 00 00 00 00 00 00 00 00 00 01 00 00 00 00     ................
     33c:	00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 01     ................
	...
     354:	00 01 00 00 00 00 00 00 00 00 00 00 ff 00 00 00     ................
     364:	01 00 00 00 01 00 01 00 01 01 01 00 00 01 01 01     ................
	...
     37c:	ff 02 00 00 00 00 00 00 00 02 00 00 00 00 00 00     ................
     38c:	00 00 00 02 00 00 00 00 00 00 00 00 00 02 00 00     ................
     39c:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00     ................
     3ac:	02 aa 02 00 00 00 00 00 00 00 00 02 00 00 00 00     ................
     3bc:	00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 02     ................
	...
     3d4:	00 02 00 00 00 00 00 00 00 00 00 02 ff 00 00 00     ................
	...
     3fc:	ff 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
     40c:	00 00 00 08 00 00 00 00 00 00 00 00 00 08 00 00     ................
     41c:	00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 00     ................
     42c:	08 aa 08 00 00 00 00 00 00 00 00 08 00 00 00 00     ................
     43c:	00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 08     ................
	...
     454:	00 08 00 00 00 00 00 00 00 00 00 08 ff 00 00 00     ................
	...
     470:	f8 20 d8 00 f8 20 f8 00 90 d0 b0 00 ff 80 80 80     . ... ..........
     480:	80 80 80 80 80 a0 80 80 80 80 80 80 80 80 80 a0     ................
     490:	80 80 80 80 80 80 80 80 80 a0 80 80 80 80 80 80     ................
     4a0:	80 80 80 a0 80 80 80 80 80 80 80 80 80 aa 80 80     ................
     4b0:	80 80 80 80 80 80 80 a0 80 80 80 80 80 80 80 80     ................
     4c0:	80 a0 80 80 80 80 80 80 80 80 80 a0 80 80 80 80     ................
     4d0:	80 80 80 80 80 a0 80 80 80 80 80 80 80 80 80 80     ................
     4e0:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000004fc <font>:
     4fc:	00 00 00 00 00 00 00 3e 45 51 45 3e 00 3e 6b 6f     .......>EQE>.>ko
     50c:	6b 3e 00 1c 3e 7c 3e 1c 00 18 3c 7e 3c 18 00 30     k>..>|>...<~<..0
     51c:	36 7f 36 30 00 18 5c 7e 5c 18 00 00 00 00 00 00     6.60..\~\.......
	...
     53c:	00 00 00 30 48 4a 36 0e 00 06 29 79 29 06 00 00     ...0HJ6...)y)...
     54c:	00 00 00 00 00 60 7e 0a 35 3f 00 2a 1c 36 1c 2a     .....`~.5?.*.6.*
     55c:	00 00 7f 3e 1c 08 00 08 1c 3e 7f 00 00 14 36 7f     ...>.....>....6.
     56c:	36 14 00 00 5f 00 5f 00 00 06 09 7f 01 7f 00 22     6..._._........"
     57c:	4d 55 59 22 00 60 60 60 60 00 00 14 b6 ff b6 14     MUY".````.......
     58c:	00 04 06 7f 06 04 00 10 30 7f 30 10 00 08 08 3e     ........0.0....>
     59c:	1c 08 00 08 1c 3e 08 08 00 78 40 40 40 40 00 08     .....>...x@@@@..
     5ac:	3e 08 3e 08 00 30 3c 3f 3c 30 00 03 0f 3f 0f 03     >.>..0<?<0...?..
	...
     5c4:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     5d4:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     5e4:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     5f4:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     604:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     614:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     624:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     634:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     644:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     654:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     664:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     674:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     684:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     694:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     6a4:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     6b4:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     6c4:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     6d4:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     6e4:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     6f4:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     704:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     714:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     724:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     734:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     744:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     754:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     764:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     774:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     784:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     794:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     7a4:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     7b4:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     7c4:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     7d4:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     7e4:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     7f4:	01 00 00 3c 26 23 26 3c 00 1e a1 e1 21 12 00 3d     ...<&#&<....!..=
     804:	40 20 7d 00 00 38 54 54 55 09 00 20 55 55 55 78     @ }..8TTU.. UUUx
     814:	00 20 55 54 55 78 00 20 55 55 54 78 00 20 57 55     . UTUx. UUTx. WU
     824:	57 78 00 1c a2 e2 22 14 00 38 55 55 55 08 00 38     Wx...."..8UUU..8
     834:	55 54 55 08 00 38 55 55 54 08 00 00 01 7c 41 00     UTU..8UUT....|A.
     844:	00 00 01 7d 41 00 00 00 01 7c 40 00 00 70 29 24     ...}A....|@..p)$
     854:	29 70 00 78 2f 25 2f 78 00 7c 54 54 55 45 00 34     )p.x/%/x.|TTUE.4
     864:	54 7c 54 58 00 7e 09 7f 49 49 00 38 45 45 39 00     T|TX.~..II.8EE9.
     874:	00 38 45 44 39 00 00 39 45 44 38 00 00 3c 41 21     .8ED9..9ED8..<A!
     884:	7d 00 00 3d 41 20 7c 00 00 9c a1 60 3d 00 00 3d     }..=A |....`=..=
     894:	42 42 3d 00 00 3c 41 40 3d 00 80 70 68 58 38 04     BB=..<A@=..phX8.
     8a4:	00 48 3e 49 49 62 00 7e 61 5d 43 3f 00 22 14 08     .H>IIb.~a]C?."..
     8b4:	14 22 00 40 88 7e 09 02 00 20 54 55 55 78 00 00     .".@.~... TUUx..
     8c4:	00 7d 41 00 00 38 44 45 39 00 00 3c 40 21 7d 00     .}A..8DE9..<@!}.
     8d4:	00 7a 09 0a 71 00 00 7a 11 22 79 00 00 08 55 55     .z..q..z."y...UU
     8e4:	55 5e 00 4e 51 51 4e 00 00 30 48 4d 40 20 3e 41     U^.NQQN..0HM@ >A
     8f4:	5d 4b 55 3e 04 04 04 04 04 1c 00 17 08 4c 6a 50     ]KU>.........LjP
     904:	00 17 08 34 2a 78 00 00 30 7d 30 00 00 08 14 00     ...4*x..0}0.....
     914:	08 14 00 14 08 00 14 08 44 11 44 11 44 11 aa 55     ........D.D.D..U
     924:	aa 55 aa 55 bb ee bb ee bb ee 00 00 00 ff 00 00     .U.U............
     934:	08 08 08 ff 00 00 00 70 28 25 29 70 00 70 29 25     .......p(%)p.p)%
     944:	29 70 00 70 29 25 28 70 3e 41 5d 55 41 3e 0a fb     )p.p)%(p>A]UA>..
     954:	00 ff 00 00 00 ff 00 ff 00 00 0a fa 02 fe 00 00     ................
     964:	0a 0b 08 0f 00 00 00 18 24 66 24 00 00 29 2a 7c     ........$f$..)*|
     974:	2a 29 08 08 08 f8 00 00 00 00 00 0f 08 08 08 08     *)..............
     984:	08 0f 08 08 08 08 08 f8 08 08 00 00 00 ff 08 08     ................
     994:	08 08 08 08 08 08 08 08 08 ff 08 08 00 20 56 55     ............. VU
     9a4:	56 79 00 70 2a 25 2a 71 00 0f 08 0b 0a 0a 00 fe     Vy.p*%*q........
     9b4:	02 fa 0a 0a 0a 0b 08 0b 0a 0a 0a fa 02 fa 0a 0a     ................
     9c4:	00 ff 00 fb 0a 0a 0a 0a 0a 0a 0a 0a 0a fb 00 fb     ................
     9d4:	0a 0a 00 5d 22 22 22 5d 00 22 55 59 30 00 00 08     ...]"""]."UY0...
     9e4:	7f 49 41 3e 00 7c 55 55 55 44 00 7c 55 54 55 44     .IA>.|UUUD.|UTUD
     9f4:	00 7c 55 55 54 44 00 00 00 07 00 00 00 00 44 7d     .|UUTD........D}
     a04:	45 00 00 00 45 7d 45 00 00 00 45 7c 45 00 08 08     E...E}E...E|E...
     a14:	08 0f 00 00 00 00 00 f8 08 08 ff ff ff ff ff ff     ................
     a24:	f0 f0 f0 f0 f0 f0 00 00 00 77 00 00 00 00 45 7d     .........w....E}
     a34:	44 00 0f 0f 0f 0f 0f 0f 00 3c 42 43 3d 00 00 fe     D........<BC=...
     a44:	4a 4a 34 00 00 3c 43 43 3d 00 00 3d 43 42 3c 00     JJ4..<CC=..=CB<.
     a54:	00 32 49 4a 31 00 00 3a 45 46 39 00 00 fc 20 20     .2IJ1..:EF9...  
     a64:	1c 00 00 fe aa 28 10 00 00 ff a5 24 18 00 00 3c     .....(.....$...<
     a74:	40 41 3d 00 00 3c 41 41 3d 00 00 3d 41 40 3c 00     @A=..<AA=..=A@<.
     a84:	00 9c a0 61 3d 00 00 04 08 71 09 04 00 00 02 02     ...a=....q......
     a94:	02 00 00 00 07 03 00 00 00 00 08 08 08 00 00 00     ................
     aa4:	24 2e 24 00 00 24 24 24 24 24 05 17 0a 34 2a 78     $.$..$$$$$...4*x
     ab4:	00 06 09 7f 01 7f 00 22 4d 55 59 22 00 08 08 2a     ......."MUY"...*
     ac4:	08 08 00 00 08 18 18 00 00 06 09 09 06 00 00 00     ................
     ad4:	08 00 08 00 00 00 08 00 00 00 00 02 0f 00 00 00     ................
     ae4:	00 09 0f 05 00 00 00 09 0d 0a 00 00 00 3c 3c 3c     .............<<<
     af4:	3c 00 00 00 00 00 00 00                             <.......

00000afc <__ctors_end>:
     afc:	11 24       	eor	r1, r1
     afe:	1f be       	out	0x3f, r1	; 63
     b00:	cf ef       	ldi	r28, 0xFF	; 255
     b02:	d0 e4       	ldi	r29, 0x40	; 64
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	cd bf       	out	0x3d, r28	; 61

00000b08 <__do_copy_data>:
     b08:	11 e0       	ldi	r17, 0x01	; 1
     b0a:	a0 e0       	ldi	r26, 0x00	; 0
     b0c:	b1 e0       	ldi	r27, 0x01	; 1
     b0e:	e6 e6       	ldi	r30, 0x66	; 102
     b10:	fc e1       	ldi	r31, 0x1C	; 28
     b12:	00 e0       	ldi	r16, 0x00	; 0
     b14:	0b bf       	out	0x3b, r16	; 59
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <__do_copy_data+0x14>
     b18:	07 90       	elpm	r0, Z+
     b1a:	0d 92       	st	X+, r0
     b1c:	a8 3a       	cpi	r26, 0xA8	; 168
     b1e:	b1 07       	cpc	r27, r17
     b20:	d9 f7       	brne	.-10     	; 0xb18 <__do_copy_data+0x10>

00000b22 <__do_clear_bss>:
     b22:	26 e0       	ldi	r18, 0x06	; 6
     b24:	a8 ea       	ldi	r26, 0xA8	; 168
     b26:	b1 e0       	ldi	r27, 0x01	; 1
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <.do_clear_bss_start>

00000b2a <.do_clear_bss_loop>:
     b2a:	1d 92       	st	X+, r1

00000b2c <.do_clear_bss_start>:
     b2c:	a6 3d       	cpi	r26, 0xD6	; 214
     b2e:	b2 07       	cpc	r27, r18
     b30:	e1 f7       	brne	.-8      	; 0xb2a <.do_clear_bss_loop>
     b32:	45 d3       	rcall	.+1674   	; 0x11be <main>
     b34:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <_exit>

00000b38 <__bad_interrupt>:
     b38:	63 ca       	rjmp	.-2874   	; 0x0 <__vectors>

00000b3a <get_frequence>:
	PORTD &= ~(1<<FQUP);
}

void fillDataLcdBuffer (uint8_t address, uint8_t data)
{
	dataLcdBuffer[address] = data;
     b3a:	2f ef       	ldi	r18, 0xFF	; 255
     b3c:	83 ec       	ldi	r24, 0xC3	; 195
     b3e:	99 e0       	ldi	r25, 0x09	; 9
     b40:	21 50       	subi	r18, 0x01	; 1
     b42:	80 40       	sbci	r24, 0x00	; 0
     b44:	90 40       	sbci	r25, 0x00	; 0
     b46:	e1 f7       	brne	.-8      	; 0xb40 <get_frequence+0x6>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <get_frequence+0x10>
     b4a:	00 00       	nop
     b4c:	a9 d3       	rcall	.+1874   	; 0x12a0 <LCD_Clear>
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	6d d4       	rcall	.+2266   	; 0x142e <LCD_GotoXY>
     b54:	80 ea       	ldi	r24, 0xA0	; 160
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	59 d4       	rcall	.+2226   	; 0x140c <LCD_PutString_P>
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	67 d4       	rcall	.+2254   	; 0x142e <LCD_GotoXY>
     b60:	8c e8       	ldi	r24, 0x8C	; 140
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	53 d4       	rcall	.+2214   	; 0x140c <LCD_PutString_P>
     b66:	67 e0       	ldi	r22, 0x07	; 7
     b68:	84 e1       	ldi	r24, 0x14	; 20
     b6a:	61 d4       	rcall	.+2242   	; 0x142e <LCD_GotoXY>
     b6c:	80 e1       	ldi	r24, 0x10	; 16
     b6e:	f6 d3       	rcall	.+2028   	; 0x135c <LCD_PutChar>
     b70:	4c d3       	rcall	.+1688   	; 0x120a <LCD_Update>
     b72:	78 94       	sei
     b74:	2f ef       	ldi	r18, 0xFF	; 255
     b76:	83 ec       	ldi	r24, 0xC3	; 195
     b78:	99 e0       	ldi	r25, 0x09	; 9
     b7a:	21 50       	subi	r18, 0x01	; 1
     b7c:	80 40       	sbci	r24, 0x00	; 0
     b7e:	90 40       	sbci	r25, 0x00	; 0
     b80:	e1 f7       	brne	.-8      	; 0xb7a <get_frequence+0x40>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <get_frequence+0x4a>
     b84:	00 00       	nop
     b86:	03 9b       	sbis	0x00, 3	; 0
     b88:	32 c0       	rjmp	.+100    	; 0xbee <get_frequence+0xb4>
     b8a:	80 91 2c 02 	lds	r24, 0x022C
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	89 f7       	brne	.-30     	; 0xb74 <get_frequence+0x3a>
     b92:	e6 e3       	ldi	r30, 0x36	; 54
     b94:	f6 e0       	ldi	r31, 0x06	; 6
     b96:	80 81       	ld	r24, Z
     b98:	21 81       	ldd	r18, Z+1	; 0x01
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	98 2f       	mov	r25, r24
     b9e:	88 27       	eor	r24, r24
     ba0:	82 0f       	add	r24, r18
     ba2:	91 1d       	adc	r25, r1
     ba4:	90 93 ab 01 	sts	0x01AB, r25
     ba8:	80 93 aa 01 	sts	0x01AA, r24
     bac:	22 81       	ldd	r18, Z+2	; 0x02
     bae:	43 81       	ldd	r20, Z+3	; 0x03
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	32 2f       	mov	r19, r18
     bb4:	22 27       	eor	r18, r18
     bb6:	24 0f       	add	r18, r20
     bb8:	31 1d       	adc	r19, r1
     bba:	30 93 a9 01 	sts	0x01A9, r19
     bbe:	20 93 a8 01 	sts	0x01A8, r18
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	dc 01       	movw	r26, r24
     bc8:	99 27       	eor	r25, r25
     bca:	88 27       	eor	r24, r24
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	a1 1d       	adc	r26, r1
     bd2:	b1 1d       	adc	r27, r1
     bd4:	80 93 02 01 	sts	0x0102, r24
     bd8:	90 93 03 01 	sts	0x0103, r25
     bdc:	a0 93 04 01 	sts	0x0104, r26
     be0:	b0 93 05 01 	sts	0x0105, r27
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	6f d6       	rcall	.+3294   	; 0x18c8 <uart1_tx_frame>
     bea:	10 92 2c 02 	sts	0x022C, r1
     bee:	08 95       	ret

00000bf0 <start>:
     bf0:	85 e1       	ldi	r24, 0x15	; 21
     bf2:	57 d4       	rcall	.+2222   	; 0x14a2 <Backlight_LED>
     bf4:	8e ee       	ldi	r24, 0xEE	; 238
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	09 d4       	rcall	.+2066   	; 0x140c <LCD_PutString_P>
     bfa:	88 ed       	ldi	r24, 0xD8	; 216
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	06 d4       	rcall	.+2060   	; 0x140c <LCD_PutString_P>
     c00:	8d ec       	ldi	r24, 0xCD	; 205
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	03 d4       	rcall	.+2054   	; 0x140c <LCD_PutString_P>
     c06:	8e eb       	ldi	r24, 0xBE	; 190
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	00 d4       	rcall	.+2048   	; 0x140c <LCD_PutString_P>
     c0c:	81 eb       	ldi	r24, 0xB1	; 177
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	fd d3       	rcall	.+2042   	; 0x140c <LCD_PutString_P>
     c12:	fb d2       	rcall	.+1526   	; 0x120a <LCD_Update>
     c14:	67 e0       	ldi	r22, 0x07	; 7
     c16:	84 e1       	ldi	r24, 0x14	; 20
     c18:	0a d4       	rcall	.+2068   	; 0x142e <LCD_GotoXY>
     c1a:	80 e1       	ldi	r24, 0x10	; 16
     c1c:	9f d3       	rcall	.+1854   	; 0x135c <LCD_PutChar>
     c1e:	f5 d2       	rcall	.+1514   	; 0x120a <LCD_Update>
     c20:	03 99       	sbic	0x00, 3	; 0
     c22:	fe cf       	rjmp	.-4      	; 0xc20 <start+0x30>
     c24:	03 9b       	sbis	0x00, 3	; 0
     c26:	fe cf       	rjmp	.-4      	; 0xc24 <start+0x34>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	89 ef       	ldi	r24, 0xF9	; 249
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	80 40       	sbci	r24, 0x00	; 0
     c32:	90 40       	sbci	r25, 0x00	; 0
     c34:	e1 f7       	brne	.-8      	; 0xc2e <start+0x3e>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <start+0x48>
     c38:	00 00       	nop
     c3a:	03 99       	sbic	0x00, 3	; 0
     c3c:	fe cf       	rjmp	.-4      	; 0xc3a <start+0x4a>
     c3e:	08 95       	ret

00000c40 <adc_init>:
     c40:	81 e6       	ldi	r24, 0x61	; 97
     c42:	80 93 7c 00 	sts	0x007C, r24
     c46:	ea e7       	ldi	r30, 0x7A	; 122
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	82 6c       	ori	r24, 0xC2	; 194
     c4e:	80 83       	st	Z, r24
     c50:	08 95       	ret

00000c52 <AD9850_setup>:
     c52:	84 b1       	in	r24, 0x04	; 4
     c54:	86 60       	ori	r24, 0x06	; 6
     c56:	84 b9       	out	0x04, r24	; 4
     c58:	85 b1       	in	r24, 0x05	; 5
     c5a:	89 7f       	andi	r24, 0xF9	; 249
     c5c:	85 b9       	out	0x05, r24	; 5
     c5e:	8a b1       	in	r24, 0x0a	; 10
     c60:	80 6c       	ori	r24, 0xC0	; 192
     c62:	8a b9       	out	0x0a, r24	; 10
     c64:	8b b1       	in	r24, 0x0b	; 11
     c66:	8f 73       	andi	r24, 0x3F	; 63
     c68:	8b b9       	out	0x0b, r24	; 11
     c6a:	08 95       	ret

00000c6c <AD9850_reset>:
     c6c:	2a 98       	cbi	0x05, 2	; 5
     c6e:	5e 98       	cbi	0x0b, 6	; 11
     c70:	5f 98       	cbi	0x0b, 7	; 11
     c72:	8a e1       	ldi	r24, 0x1A	; 26
     c74:	8a 95       	dec	r24
     c76:	f1 f7       	brne	.-4      	; 0xc74 <AD9850_reset+0x8>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <AD9850_reset+0xe>
     c7a:	5f 9a       	sbi	0x0b, 7	; 11
     c7c:	8a e1       	ldi	r24, 0x1A	; 26
     c7e:	8a 95       	dec	r24
     c80:	f1 f7       	brne	.-4      	; 0xc7e <AD9850_reset+0x12>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <AD9850_reset+0x18>
     c84:	5f 98       	cbi	0x0b, 7	; 11
     c86:	8a e1       	ldi	r24, 0x1A	; 26
     c88:	8a 95       	dec	r24
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <AD9850_reset+0x1c>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <AD9850_reset+0x22>
     c8e:	2a 98       	cbi	0x05, 2	; 5
     c90:	8a e1       	ldi	r24, 0x1A	; 26
     c92:	8a 95       	dec	r24
     c94:	f1 f7       	brne	.-4      	; 0xc92 <AD9850_reset+0x26>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <AD9850_reset+0x2c>
     c98:	2a 9a       	sbi	0x05, 2	; 5
     c9a:	8a e1       	ldi	r24, 0x1A	; 26
     c9c:	8a 95       	dec	r24
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <AD9850_reset+0x30>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <AD9850_reset+0x36>
     ca2:	2a 98       	cbi	0x05, 2	; 5
     ca4:	8a e1       	ldi	r24, 0x1A	; 26
     ca6:	8a 95       	dec	r24
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <AD9850_reset+0x3a>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <AD9850_reset+0x40>
     cac:	29 98       	cbi	0x05, 1	; 5
     cae:	5e 98       	cbi	0x0b, 6	; 11
     cb0:	8a e1       	ldi	r24, 0x1A	; 26
     cb2:	8a 95       	dec	r24
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <AD9850_reset+0x46>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <AD9850_reset+0x4c>
     cb8:	5e 9a       	sbi	0x0b, 6	; 11
     cba:	8a e1       	ldi	r24, 0x1A	; 26
     cbc:	8a 95       	dec	r24
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <AD9850_reset+0x50>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <AD9850_reset+0x56>
     cc2:	5e 98       	cbi	0x0b, 6	; 11
     cc4:	8a e1       	ldi	r24, 0x1A	; 26
     cc6:	8a 95       	dec	r24
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <AD9850_reset+0x5a>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <AD9850_reset+0x60>
     ccc:	08 95       	ret

00000cce <AD9850_Setfrequency>:
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	34 e2       	ldi	r19, 0x24	; 36
     cd2:	44 e7       	ldi	r20, 0x74	; 116
     cd4:	59 e4       	ldi	r21, 0x49	; 73
     cd6:	fe d5       	rcall	.+3068   	; 0x18d4 <__divsf3>
     cd8:	2f e6       	ldi	r18, 0x6F	; 111
     cda:	32 e1       	ldi	r19, 0x12	; 18
     cdc:	43 e0       	ldi	r20, 0x03	; 3
     cde:	5c e4       	ldi	r21, 0x4C	; 76
     ce0:	1b d7       	rcall	.+3638   	; 0x1b18 <__mulsf3>
     ce2:	60 d6       	rcall	.+3264   	; 0x19a4 <__fixunssfsi>
     ce4:	5e 98       	cbi	0x0b, 6	; 11
     ce6:	28 e0       	ldi	r18, 0x08	; 8
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	60 ff       	sbrs	r22, 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <AD9850_Setfrequency+0x24>
     cee:	29 9a       	sbi	0x05, 1	; 5
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <AD9850_Setfrequency+0x26>
     cf2:	29 98       	cbi	0x05, 1	; 5
     cf4:	2a 9a       	sbi	0x05, 2	; 5
     cf6:	2a 98       	cbi	0x05, 2	; 5
     cf8:	66 95       	lsr	r22
     cfa:	21 50       	subi	r18, 0x01	; 1
     cfc:	31 09       	sbc	r19, r1
     cfe:	a9 f7       	brne	.-22     	; 0xcea <AD9850_Setfrequency+0x1c>
     d00:	28 e0       	ldi	r18, 0x08	; 8
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	70 ff       	sbrs	r23, 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <AD9850_Setfrequency+0x3e>
     d08:	29 9a       	sbi	0x05, 1	; 5
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <AD9850_Setfrequency+0x40>
     d0c:	29 98       	cbi	0x05, 1	; 5
     d0e:	2a 9a       	sbi	0x05, 2	; 5
     d10:	2a 98       	cbi	0x05, 2	; 5
     d12:	76 95       	lsr	r23
     d14:	21 50       	subi	r18, 0x01	; 1
     d16:	31 09       	sbc	r19, r1
     d18:	a9 f7       	brne	.-22     	; 0xd04 <AD9850_Setfrequency+0x36>
     d1a:	28 e0       	ldi	r18, 0x08	; 8
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	80 ff       	sbrs	r24, 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <AD9850_Setfrequency+0x58>
     d22:	29 9a       	sbi	0x05, 1	; 5
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <AD9850_Setfrequency+0x5a>
     d26:	29 98       	cbi	0x05, 1	; 5
     d28:	2a 9a       	sbi	0x05, 2	; 5
     d2a:	2a 98       	cbi	0x05, 2	; 5
     d2c:	86 95       	lsr	r24
     d2e:	86 95       	lsr	r24
     d30:	21 50       	subi	r18, 0x01	; 1
     d32:	31 09       	sbc	r19, r1
     d34:	a1 f7       	brne	.-24     	; 0xd1e <AD9850_Setfrequency+0x50>
     d36:	28 e0       	ldi	r18, 0x08	; 8
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	90 ff       	sbrs	r25, 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <AD9850_Setfrequency+0x74>
     d3e:	29 9a       	sbi	0x05, 1	; 5
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <AD9850_Setfrequency+0x76>
     d42:	29 98       	cbi	0x05, 1	; 5
     d44:	2a 9a       	sbi	0x05, 2	; 5
     d46:	2a 98       	cbi	0x05, 2	; 5
     d48:	96 95       	lsr	r25
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	31 09       	sbc	r19, r1
     d4e:	a9 f7       	brne	.-22     	; 0xd3a <AD9850_Setfrequency+0x6c>
     d50:	88 e0       	ldi	r24, 0x08	; 8
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	29 98       	cbi	0x05, 1	; 5
     d56:	2a 9a       	sbi	0x05, 2	; 5
     d58:	2a 98       	cbi	0x05, 2	; 5
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	d9 f7       	brne	.-10     	; 0xd54 <AD9850_Setfrequency+0x86>
     d5e:	5e 9a       	sbi	0x0b, 6	; 11
     d60:	8a e1       	ldi	r24, 0x1A	; 26
     d62:	8a 95       	dec	r24
     d64:	f1 f7       	brne	.-4      	; 0xd62 <AD9850_Setfrequency+0x94>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <AD9850_Setfrequency+0x9a>
     d68:	5e 98       	cbi	0x0b, 6	; 11
     d6a:	08 95       	ret

00000d6c <create_raster>:
void create_raster()
{
	uint16_t raster_offset = 0;
	uint8_t fb_x = 0;
	uint8_t fb_y = 0;
	LCD_Clear();
     d6c:	99 d2       	rcall	.+1330   	; 0x12a0 <LCD_Clear>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0d c0       	rjmp	.+26     	; 0xd8e <create_raster+0x22>
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
			lcd_framebuffer[fb_y][fb_x] = pgm_read_byte(&raster[raster_offset++]);
     d74:	cf 01       	movw	r24, r30
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	e4 50       	subi	r30, 0x04	; 4
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	e4 91       	lpm	r30, Z
     d7e:	ed 93       	st	X+, r30
     d80:	fc 01       	movw	r30, r24
	uint16_t raster_offset = 0;
	uint8_t fb_x = 0;
	uint8_t fb_y = 0;
	LCD_Clear();
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
     d82:	82 17       	cp	r24, r18
     d84:	93 07       	cpc	r25, r19
     d86:	b1 f7       	brne	.-20     	; 0xd74 <create_raster+0x8>
{
	uint16_t raster_offset = 0;
	uint8_t fb_x = 0;
	uint8_t fb_y = 0;
	LCD_Clear();
	for (fb_y = 0; fb_y < 8; fb_y++)
     d88:	21 15       	cp	r18, r1
     d8a:	34 40       	sbci	r19, 0x04	; 4
     d8c:	41 f0       	breq	.+16     	; 0xd9e <create_raster+0x32>
     d8e:	dc 01       	movw	r26, r24
     d90:	aa 5c       	subi	r26, 0xCA	; 202
     d92:	bd 4f       	sbci	r27, 0xFD	; 253
     d94:	9c 01       	movw	r18, r24
     d96:	20 58       	subi	r18, 0x80	; 128
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
{
	dataLcdBuffer[address] = data;
}

void create_raster()
{
     d9a:	fc 01       	movw	r30, r24
     d9c:	eb cf       	rjmp	.-42     	; 0xd74 <create_raster+0x8>
	uint8_t fb_y = 0;
	LCD_Clear();
	for (fb_y = 0; fb_y < 8; fb_y++)
		for (fb_x = 0; fb_x < 128; fb_x++)
			lcd_framebuffer[fb_y][fb_x] = pgm_read_byte(&raster[raster_offset++]);
	lcd_frameupdate = 0xff;
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	80 93 1c 02 	sts	0x021C, r24
	LCD_Update();
     da4:	32 c2       	rjmp	.+1124   	; 0x120a <LCD_Update>
     da6:	08 95       	ret

00000da8 <frequence_display>:
}

void frequence_display()
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	a0 97       	sbiw	r28, 0x20	; 32
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
	char getfrequency_buffer[32];
	LCD_GotoXY(17,5);
     dbc:	65 e0       	ldi	r22, 0x05	; 5
     dbe:	81 e1       	ldi	r24, 0x11	; 17
     dc0:	36 d3       	rcall	.+1644   	; 0x142e <LCD_GotoXY>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     dc2:	4a e0       	ldi	r20, 0x0A	; 10
     dc4:	be 01       	movw	r22, r28
     dc6:	6f 5f       	subi	r22, 0xFF	; 255
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	80 91 02 01 	lds	r24, 0x0102
     dce:	90 91 03 01 	lds	r25, 0x0103
     dd2:	14 d7       	rcall	.+3624   	; 0x1bfc <__itoa_ncheck>
	// display the labels on LCD
	itoa(((uint32_t)AD_freq), getfrequency_buffer, 10);
	//sprintf(getfrequency_buffer,"%0i; %0i; %0i; %0i",data_frame_in[0],data_frame_in[1],data_frame_in[2],data_frame_in[3]);
	LCD_PutString(getfrequency_buffer);
     dd4:	ce 01       	movw	r24, r28
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	0b d3       	rcall	.+1558   	; 0x13f0 <LCD_PutString>
	LCD_GotoXY(20,7);
     dda:	67 e0       	ldi	r22, 0x07	; 7
     ddc:	84 e1       	ldi	r24, 0x14	; 20
     dde:	27 d3       	rcall	.+1614   	; 0x142e <LCD_GotoXY>
	LCD_PutChar(0x10);
     de0:	80 e1       	ldi	r24, 0x10	; 16
     de2:	bc d2       	rcall	.+1400   	; 0x135c <LCD_PutChar>
	LCD_Update();
     de4:	12 d2       	rcall	.+1060   	; 0x120a <LCD_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     de6:	8f e3       	ldi	r24, 0x3F	; 63
     de8:	9c e9       	ldi	r25, 0x9C	; 156
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <frequence_display+0x42>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <frequence_display+0x48>
     df0:	00 00       	nop
	_delay_ms(10);
}
     df2:	a0 96       	adiw	r28, 0x20	; 32
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <create_wave>:

void create_wave()
{
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
	LCD_Clear();
     e10:	47 d2       	rcall	.+1166   	; 0x12a0 <LCD_Clear>
	Backlight_LED(BL_GREEN_ON);
     e12:	84 e0       	ldi	r24, 0x04	; 4
     e14:	46 d3       	rcall	.+1676   	; 0x14a2 <Backlight_LED>
	create_raster();
     e16:	aa df       	rcall	.-172    	; 0xd6c <create_raster>
	frequence_display();
     e18:	c7 df       	rcall	.-114    	; 0xda8 <frequence_display>
     e1a:	0f 2e       	mov	r0, r31
     e1c:	fc ea       	ldi	r31, 0xAC	; 172
     e1e:	ef 2e       	mov	r14, r31
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	ff 2e       	mov	r15, r31
     e24:	f0 2d       	mov	r31, r0
     e26:	00 e1       	ldi	r16, 0x10	; 16
     e28:	12 e0       	ldi	r17, 0x02	; 2
     e2a:	e7 01       	movw	r28, r14
     e2c:	8c 2f       	mov	r24, r28
     e2e:	8e 19       	sub	r24, r14
	uint8_t i;
	for(i=0;i<100;i++)
	{
		LCD_DrawPixel(i,dataLcdBuffer[i],1);
     e30:	69 91       	ld	r22, Y+
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	4b d2       	rcall	.+1174   	; 0x12cc <LCD_DrawPixel>
		LCD_Update();
     e36:	e9 d1       	rcall	.+978    	; 0x120a <LCD_Update>
	LCD_Clear();
	Backlight_LED(BL_GREEN_ON);
	create_raster();
	frequence_display();
	uint8_t i;
	for(i=0;i<100;i++)
     e38:	c0 17       	cp	r28, r16
     e3a:	d1 07       	cpc	r29, r17
     e3c:	b9 f7       	brne	.-18     	; 0xe2c <create_wave+0x28>
	{
		LCD_DrawPixel(i,dataLcdBuffer[i],1);
		LCD_Update();
	}
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	08 95       	ret

00000e4c <signal_display>:

void signal_display()
{
     e4c:	7f 92       	push	r7
     e4e:	8f 92       	push	r8
     e50:	9f 92       	push	r9
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	2f ef       	ldi	r18, 0xFF	; 255
     e68:	83 ec       	ldi	r24, 0xC3	; 195
     e6a:	99 e0       	ldi	r25, 0x09	; 9
     e6c:	21 50       	subi	r18, 0x01	; 1
     e6e:	80 40       	sbci	r24, 0x00	; 0
     e70:	90 40       	sbci	r25, 0x00	; 0
     e72:	e1 f7       	brne	.-8      	; 0xe6c <signal_display+0x20>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <signal_display+0x2a>
     e76:	00 00       	nop
	//-----------------read signal from ADC-----------------------------------
	uint16_t i,k;
	//uint32_t endOfPeriod=0;
	uint8_t freqComplete=0;
	_delay_ms(200);
	create_wave();
     e78:	c5 df       	rcall	.-118    	; 0xe04 <create_wave>
		lowLimit = 255;
		//endOfPeriod = 0;
		freqComplete = 0;
		complete = FALSE;

		for (i=2; i<15000; i++)
     e7a:	68 94       	set
     e7c:	99 24       	eor	r9, r9
     e7e:	91 f8       	bld	r9, 1
     e80:	b1 2c       	mov	r11, r1
		{
			ADCSRA |= (1 << ADSC); // Enable ADC
     e82:	ca e7       	ldi	r28, 0x7A	; 122
     e84:	d0 e0       	ldi	r29, 0x00	; 0
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;
     e86:	09 e7       	ldi	r16, 0x79	; 121
     e88:	10 e0       	ldi	r17, 0x00	; 0

			if (upLimit < ADCvalue)  // Find the higher voltage level of the input waveform.
				upLimit = ADCvalue;

			if (lowLimit > ADCvalue) // Find the lower voltage level of the input waveform.
				lowLimit = ADCvalue;
     e8a:	0f 2e       	mov	r0, r31
     e8c:	f4 e3       	ldi	r31, 0x34	; 52
     e8e:	ef 2e       	mov	r14, r31
     e90:	f2 e0       	ldi	r31, 0x02	; 2
     e92:	ff 2e       	mov	r15, r31
     e94:	f0 2d       	mov	r31, r0
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
				freqComplete = 3; //we found the end of the first period.
     e96:	0f 2e       	mov	r0, r31
     e98:	f3 e0       	ldi	r31, 0x03	; 3
     e9a:	8f 2e       	mov	r8, r31
     e9c:	f0 2d       	mov	r31, r0
				ADCvalue += 3;
				ADCvalue /= 3;
				ADCvalue += 2;
			}
			else
				ADCvalue = 2;
     e9e:	c9 2c       	mov	r12, r9
     ea0:	db 2c       	mov	r13, r11
	_delay_ms(200);
	create_wave();

	for(;;)
	{
		if((~PINA&(1<<PINA5))&& (timeDiv <= 120))
     ea2:	05 99       	sbic	0x00, 5	; 0
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <signal_display+0x72>
     ea6:	80 91 16 02 	lds	r24, 0x0216
     eaa:	90 91 17 02 	lds	r25, 0x0217
     eae:	89 37       	cpi	r24, 0x79	; 121
     eb0:	91 05       	cpc	r25, r1
     eb2:	28 f4       	brcc	.+10     	; 0xebe <signal_display+0x72>
			timeDiv += 1;
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	90 93 17 02 	sts	0x0217, r25
     eba:	80 93 16 02 	sts	0x0216, r24
			
		if((~PINA&(1<<PINA4)) && (timeDiv >= 1))
     ebe:	04 99       	sbic	0x00, 4	; 0
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <signal_display+0x8c>
     ec2:	80 91 16 02 	lds	r24, 0x0216
     ec6:	90 91 17 02 	lds	r25, 0x0217
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	29 f0       	breq	.+10     	; 0xed8 <signal_display+0x8c>
			timeDiv -= 1;
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	90 93 17 02 	sts	0x0217, r25
     ed4:	80 93 16 02 	sts	0x0216, r24
			
		if((~PINA&(1<<PINA7)) && (Ypos2 <= 60))
     ed8:	07 99       	sbic	0x00, 7	; 0
     eda:	07 c0       	rjmp	.+14     	; 0xeea <signal_display+0x9e>
     edc:	80 91 06 01 	lds	r24, 0x0106
     ee0:	8d 33       	cpi	r24, 0x3D	; 61
     ee2:	1c f4       	brge	.+6      	; 0xeea <signal_display+0x9e>
			Ypos2--;
     ee4:	81 50       	subi	r24, 0x01	; 1
     ee6:	80 93 06 01 	sts	0x0106, r24
			
		if((~PINA&(1<<PINA6)) && (Ypos2 >= -60))
     eea:	06 99       	sbic	0x00, 6	; 0
     eec:	07 c0       	rjmp	.+14     	; 0xefc <signal_display+0xb0>
     eee:	80 91 06 01 	lds	r24, 0x0106
     ef2:	84 3c       	cpi	r24, 0xC4	; 196
     ef4:	1c f0       	brlt	.+6      	; 0xefc <signal_display+0xb0>
			Ypos2++;
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	80 93 06 01 	sts	0x0106, r24
			
		if (~PINA&(1<<PINA3))
     efc:	03 9b       	sbis	0x00, 3	; 0
     efe:	20 c1       	rjmp	.+576    	; 0x1140 <signal_display+0x2f4>
			break;		//when Joystick Button is pressed, get the frequence from serial port again;

		findZero = 0;
     f00:	10 92 14 02 	sts	0x0214, r1
		upLimit = 0;
     f04:	10 92 13 02 	sts	0x0213, r1
		lowLimit = 255;
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	80 93 07 01 	sts	0x0107, r24
		//endOfPeriod = 0;
		freqComplete = 0;
		complete = FALSE;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 11 02 	sts	0x0211, r24

		findZero = 0;
		upLimit = 0;
		lowLimit = 255;
		//endOfPeriod = 0;
		freqComplete = 0;
     f14:	e0 e0       	ldi	r30, 0x00	; 0
		complete = FALSE;

		for (i=2; i<15000; i++)
     f16:	49 2d       	mov	r20, r9
     f18:	5b 2d       	mov	r21, r11
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     f1a:	68 94       	set
     f1c:	aa 24       	eor	r10, r10
     f1e:	a1 f8       	bld	r10, 1
			ADCSRA |= (1 << ADSC); // Enable ADC
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     f20:	f1 e0       	ldi	r31, 0x01	; 1
		freqComplete = 0;
		complete = FALSE;

		for (i=2; i<15000; i++)
		{
			ADCSRA |= (1 << ADSC); // Enable ADC
     f22:	88 81       	ld	r24, Y
     f24:	80 64       	ori	r24, 0x40	; 64
     f26:	88 83       	st	Y, r24
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
     f28:	88 81       	ld	r24, Y
     f2a:	84 ff       	sbrs	r24, 4
     f2c:	fd cf       	rjmp	.-6      	; 0xf28 <signal_display+0xdc>
			ADCvalue = ADCH;
     f2e:	d8 01       	movw	r26, r16
     f30:	7c 90       	ld	r7, X
     f32:	87 2d       	mov	r24, r7
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	90 93 35 02 	sts	0x0235, r25
     f3a:	80 93 34 02 	sts	0x0234, r24

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
     f3e:	20 91 15 02 	lds	r18, 0x0215
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	28 17       	cp	r18, r24
     f46:	39 07       	cpc	r19, r25
     f48:	08 f0       	brcs	.+2      	; 0xf4c <signal_display+0x100>
     f4a:	00 c1       	rjmp	.+512    	; 0x114c <signal_display+0x300>
     f4c:	60 91 12 02 	lds	r22, 0x0212
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	68 17       	cp	r22, r24
     f54:	79 07       	cpc	r23, r25
     f56:	c0 f4       	brcc	.+48     	; 0xf88 <signal_display+0x13c>
     f58:	e1 11       	cpse	r30, r1
     f5a:	fd c0       	rjmp	.+506    	; 0x1156 <signal_display+0x30a>
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     f5c:	82 17       	cp	r24, r18
     f5e:	93 07       	cpc	r25, r19
     f60:	48 f0       	brcs	.+18     	; 0xf74 <signal_display+0x128>
			ADCSRA |= (1 << ADSC); // Enable ADC
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     f62:	ef 2f       	mov	r30, r31
     f64:	11 c0       	rjmp	.+34     	; 0xf88 <signal_display+0x13c>
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     f66:	60 91 12 02 	lds	r22, 0x0212
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	68 17       	cp	r22, r24
     f6e:	79 07       	cpc	r23, r25
     f70:	b0 f4       	brcc	.+44     	; 0xf9e <signal_display+0x152>
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <signal_display+0x12a>
			ADCSRA |= (1 << ADSC); // Enable ADC
			loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
			ADCvalue = ADCH;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
     f74:	ef 2f       	mov	r30, r31
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
     f76:	e1 30       	cpi	r30, 0x01	; 1
     f78:	09 f0       	breq	.+2      	; 0xf7c <signal_display+0x130>
     f7a:	f1 c0       	rjmp	.+482    	; 0x115e <signal_display+0x312>
				freqComplete = 2;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     f7c:	28 17       	cp	r18, r24
     f7e:	39 07       	cpc	r19, r25
     f80:	68 f4       	brcc	.+26     	; 0xf9c <signal_display+0x150>
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     f82:	ea 2d       	mov	r30, r10
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <signal_display+0x13c>
     f86:	ea 2d       	mov	r30, r10

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
     f88:	20 91 12 02 	lds	r18, 0x0212
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	28 17       	cp	r18, r24
     f90:	39 07       	cpc	r19, r25
     f92:	28 f4       	brcc	.+10     	; 0xf9e <signal_display+0x152>
     f94:	e2 30       	cpi	r30, 0x02	; 2
     f96:	19 f4       	brne	.+6      	; 0xf9e <signal_display+0x152>
				freqComplete = 3; //we found the end of the first period.
     f98:	e8 2d       	mov	r30, r8
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <signal_display+0x152>
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
     f9c:	ea 2d       	mov	r30, r10

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
				freqComplete = 3; //we found the end of the first period.
			

			prevADCvalue = ADCvalue; // Get a backup of the current ADC value.
     f9e:	70 92 12 02 	sts	0x0212, r7

			for(k=timeDiv;k>0;k--) 
     fa2:	20 91 16 02 	lds	r18, 0x0216
     fa6:	30 91 17 02 	lds	r19, 0x0217
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	81 f0       	breq	.+32     	; 0xfd0 <signal_display+0x184>
			{
				ADCSRA |= (1 << ADSC);   // Enable ADC
     fb0:	88 81       	ld	r24, Y
     fb2:	80 64       	ori	r24, 0x40	; 64
     fb4:	88 83       	st	Y, r24
				loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
     fb6:	88 81       	ld	r24, Y
     fb8:	84 ff       	sbrs	r24, 4
     fba:	fd cf       	rjmp	.-6      	; 0xfb6 <signal_display+0x16a>
				ADCvalue = ADCH;
     fbc:	d8 01       	movw	r26, r16
     fbe:	8c 91       	ld	r24, X
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	90 93 35 02 	sts	0x0235, r25
     fc6:	80 93 34 02 	sts	0x0234, r24
				freqComplete = 3; //we found the end of the first period.
			

			prevADCvalue = ADCvalue; // Get a backup of the current ADC value.

			for(k=timeDiv;k>0;k--) 
     fca:	21 50       	subi	r18, 0x01	; 1
     fcc:	31 09       	sbc	r19, r1
     fce:	81 f7       	brne	.-32     	; 0xfb0 <signal_display+0x164>
				ADCSRA |= (1 << ADSC);   // Enable ADC
				loop_until_bit_is_set(ADCSRA, ADIF); // wait until conversion complete.
				ADCvalue = ADCH;
			}

			if (upLimit < ADCvalue)  // Find the higher voltage level of the input waveform.
     fd0:	20 91 34 02 	lds	r18, 0x0234
     fd4:	30 91 35 02 	lds	r19, 0x0235
     fd8:	80 91 13 02 	lds	r24, 0x0213
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	82 17       	cp	r24, r18
     fe0:	93 07       	cpc	r25, r19
     fe2:	10 f4       	brcc	.+4      	; 0xfe8 <signal_display+0x19c>
				upLimit = ADCvalue;
     fe4:	20 93 13 02 	sts	0x0213, r18

			if (lowLimit > ADCvalue) // Find the lower voltage level of the input waveform.
     fe8:	80 91 07 01 	lds	r24, 0x0107
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	28 17       	cp	r18, r24
     ff0:	39 07       	cpc	r19, r25
     ff2:	20 f4       	brcc	.+8      	; 0xffc <signal_display+0x1b0>
				lowLimit = ADCvalue;
     ff4:	d7 01       	movw	r26, r14
     ff6:	8c 91       	ld	r24, X
     ff8:	80 93 07 01 	sts	0x0107, r24

			if (ADCvalue > 0)
     ffc:	21 15       	cp	r18, r1
     ffe:	31 05       	cpc	r19, r1
    1000:	69 f0       	breq	.+26     	; 0x101c <signal_display+0x1d0>
			{
				//voltage = ((upLimit-lowLimit)*2); //Get the Vpp and store it to "voltage" (Volts Peak-to-peak of inputed waveform).
				ADCvalue += 3;
    1002:	2d 5f       	subi	r18, 0xFD	; 253
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
				ADCvalue /= 3;
    1006:	ab ea       	ldi	r26, 0xAB	; 171
    1008:	ba ea       	ldi	r27, 0xAA	; 170
    100a:	e9 d5       	rcall	.+3026   	; 0x1bde <__umulhisi3>
    100c:	96 95       	lsr	r25
    100e:	87 95       	ror	r24
				ADCvalue += 2;
    1010:	02 96       	adiw	r24, 0x02	; 2
    1012:	90 93 35 02 	sts	0x0235, r25
    1016:	80 93 34 02 	sts	0x0234, r24
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <signal_display+0x1d8>
			}
			else
				ADCvalue = 2;
    101c:	c0 92 34 02 	sts	0x0234, r12
    1020:	d0 92 35 02 	sts	0x0235, r13
		
			position = ADCvalue + Ypos2 ; 
    1024:	90 91 06 01 	lds	r25, 0x0106
    1028:	d7 01       	movw	r26, r14
    102a:	8c 91       	ld	r24, X
    102c:	89 0f       	add	r24, r25
    102e:	80 93 10 02 	sts	0x0210, r24
			if ((position <= 63) && (position >= 0) && (i<100) && (freqComplete >= 1))
    1032:	80 34       	cpi	r24, 0x40	; 64
    1034:	58 f4       	brcc	.+22     	; 0x104c <signal_display+0x200>
    1036:	44 36       	cpi	r20, 0x64	; 100
    1038:	51 05       	cpc	r21, r1
    103a:	80 f4       	brcc	.+32     	; 0x105c <signal_display+0x210>
    103c:	ee 23       	and	r30, r30
    103e:	49 f0       	breq	.+18     	; 0x1052 <signal_display+0x206>
    1040:	da 01       	movw	r26, r20
    1042:	bb 27       	eor	r27, r27
	PORTD &= ~(1<<FQUP);
}

void fillDataLcdBuffer (uint8_t address, uint8_t data)
{
	dataLcdBuffer[address] = data;
    1044:	a4 55       	subi	r26, 0x54	; 84
    1046:	be 4f       	sbci	r27, 0xFE	; 254
    1048:	8c 93       	st	X, r24
    104a:	0d c0       	rjmp	.+26     	; 0x1066 <signal_display+0x21a>
			position = ADCvalue + Ypos2 ; 
			if ((position <= 63) && (position >= 0) && (i<100) && (freqComplete >= 1))
				fillDataLcdBuffer(i,position);
			else
			{
				if(i<100)
    104c:	44 36       	cpi	r20, 0x64	; 100
    104e:	51 05       	cpc	r21, r1
    1050:	28 f4       	brcc	.+10     	; 0x105c <signal_display+0x210>
    1052:	da 01       	movw	r26, r20
    1054:	bb 27       	eor	r27, r27
	PORTD &= ~(1<<FQUP);
}

void fillDataLcdBuffer (uint8_t address, uint8_t data)
{
	dataLcdBuffer[address] = data;
    1056:	a4 55       	subi	r26, 0x54	; 84
    1058:	be 4f       	sbci	r27, 0xFE	; 254
    105a:	1c 92       	st	X, r1
			else
			{
				if(i<100)
					fillDataLcdBuffer(i,0);

				if((i>100)&&(freqComplete==3))
    105c:	45 36       	cpi	r20, 0x65	; 101
    105e:	51 05       	cpc	r21, r1
    1060:	10 f0       	brcs	.+4      	; 0x1066 <signal_display+0x21a>
    1062:	e3 30       	cpi	r30, 0x03	; 3
    1064:	39 f0       	breq	.+14     	; 0x1074 <signal_display+0x228>
		lowLimit = 255;
		//endOfPeriod = 0;
		freqComplete = 0;
		complete = FALSE;

		for (i=2; i<15000; i++)
    1066:	4f 5f       	subi	r20, 0xFF	; 255
    1068:	5f 4f       	sbci	r21, 0xFF	; 255
    106a:	48 39       	cpi	r20, 0x98	; 152
    106c:	ba e3       	ldi	r27, 0x3A	; 58
    106e:	5b 07       	cpc	r21, r27
    1070:	09 f0       	breq	.+2      	; 0x1074 <signal_display+0x228>
    1072:	57 cf       	rjmp	.-338    	; 0xf22 <signal_display+0xd6>

				if((i>100)&&(freqComplete==3))
					break;
			}
		}
		if(upLimit != lowLimit)
    1074:	20 91 13 02 	lds	r18, 0x0213
    1078:	80 91 07 01 	lds	r24, 0x0107
    107c:	28 17       	cp	r18, r24
    107e:	41 f0       	breq	.+16     	; 0x1090 <signal_display+0x244>
			trigger = ((upLimit + lowLimit)/2);
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	82 0f       	add	r24, r18
    1084:	91 1d       	adc	r25, r1
    1086:	95 95       	asr	r25
    1088:	87 95       	ror	r24
    108a:	80 93 15 02 	sts	0x0215, r24
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <signal_display+0x248>
		else
			trigger = upLimit;
    1090:	20 93 15 02 	sts	0x0215, r18

//--------------------display the signal----------------------------
		create_wave();
    1094:	b7 de       	rcall	.-658    	; 0xe04 <create_wave>
//-------------------------------------------------------------------

		dataCounter = 0;
    1096:	10 92 19 02 	sts	0x0219, r1
    109a:	10 92 18 02 	sts	0x0218, r1
		complete = FALSE;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 11 02 	sts	0x0211, r24
		freqComplete = 0;
    10a4:	60 e0       	ldi	r22, 0x00	; 0
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
    10a6:	e2 e0       	ldi	r30, 0x02	; 2
			loop_until_bit_is_set(ADCSRA, ADIF);
			ADCvalue = ADCH;

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
    10a8:	71 e0       	ldi	r23, 0x01	; 1
		complete = FALSE;
		freqComplete = 0;

		do
		{
			prevADCvalue = ADCvalue;
    10aa:	d7 01       	movw	r26, r14
    10ac:	8c 91       	ld	r24, X
    10ae:	80 93 12 02 	sts	0x0212, r24
			
			ADCSRA |= (1 << ADSC);    // Enable ADC
    10b2:	88 81       	ld	r24, Y
    10b4:	80 64       	ori	r24, 0x40	; 64
    10b6:	88 83       	st	Y, r24
			loop_until_bit_is_set(ADCSRA, ADIF);
    10b8:	88 81       	ld	r24, Y
    10ba:	84 ff       	sbrs	r24, 4
    10bc:	fd cf       	rjmp	.-6      	; 0x10b8 <signal_display+0x26c>
			ADCvalue = ADCH;
    10be:	d8 01       	movw	r26, r16
    10c0:	8c 91       	ld	r24, X
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	90 93 35 02 	sts	0x0235, r25
    10c8:	80 93 34 02 	sts	0x0234, r24

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
    10cc:	20 91 15 02 	lds	r18, 0x0215
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	28 17       	cp	r18, r24
    10d4:	39 07       	cpc	r19, r25
    10d6:	08 f0       	brcs	.+2      	; 0x10da <signal_display+0x28e>
    10d8:	4b c0       	rjmp	.+150    	; 0x1170 <signal_display+0x324>
    10da:	40 91 12 02 	lds	r20, 0x0212
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	48 17       	cp	r20, r24
    10e2:	59 07       	cpc	r21, r25
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <signal_display+0x29c>
    10e6:	58 c0       	rjmp	.+176    	; 0x1198 <signal_display+0x34c>
    10e8:	61 11       	cpse	r22, r1
    10ea:	3e c0       	rjmp	.+124    	; 0x1168 <signal_display+0x31c>
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    10ec:	82 17       	cp	r24, r18
    10ee:	93 07       	cpc	r25, r19
    10f0:	48 f0       	brcs	.+18     	; 0x1104 <signal_display+0x2b8>
			loop_until_bit_is_set(ADCSRA, ADIF);
			ADCvalue = ADCH;

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
    10f2:	67 2f       	mov	r22, r23
    10f4:	51 c0       	rjmp	.+162    	; 0x1198 <signal_display+0x34c>
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    10f6:	40 91 12 02 	lds	r20, 0x0212
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	48 17       	cp	r20, r24
    10fe:	59 07       	cpc	r21, r25
    1100:	50 f4       	brcc	.+20     	; 0x1116 <signal_display+0x2ca>
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <signal_display+0x2ba>
			loop_until_bit_is_set(ADCSRA, ADIF);
			ADCvalue = ADCH;

			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
    1104:	67 2f       	mov	r22, r23
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    1106:	61 30       	cpi	r22, 0x01	; 1
    1108:	c1 f5       	brne	.+112    	; 0x117a <signal_display+0x32e>
    110a:	3b c0       	rjmp	.+118    	; 0x1182 <signal_display+0x336>
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
    110c:	62 30       	cpi	r22, 0x02	; 2
    110e:	19 f4       	brne	.+6      	; 0x1116 <signal_display+0x2ca>
			{
				freqComplete = 3; 
				complete = TRUE;
    1110:	10 92 11 02 	sts	0x0211, r1
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
			{
				freqComplete = 3; 
    1114:	68 2d       	mov	r22, r8
				complete = TRUE;
			}
			if(dataCounter > 3000)
    1116:	80 91 18 02 	lds	r24, 0x0218
    111a:	90 91 19 02 	lds	r25, 0x0219
    111e:	89 3b       	cpi	r24, 0xB9	; 185
    1120:	bb e0       	ldi	r27, 0x0B	; 11
    1122:	9b 07       	cpc	r25, r27
    1124:	10 f0       	brcs	.+4      	; 0x112a <signal_display+0x2de>
				complete = TRUE;
    1126:	10 92 11 02 	sts	0x0211, r1
			dataCounter++;
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	90 93 19 02 	sts	0x0219, r25
    1130:	80 93 18 02 	sts	0x0218, r24
		}while(complete == FALSE);
    1134:	80 91 11 02 	lds	r24, 0x0211
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	09 f4       	brne	.+2      	; 0x113e <signal_display+0x2f2>
    113c:	b6 cf       	rjmp	.-148    	; 0x10aa <signal_display+0x25e>
    113e:	b1 ce       	rjmp	.-670    	; 0xea2 <signal_display+0x56>
	}
	(*get_frequence_p)();
    1140:	e0 91 00 01 	lds	r30, 0x0100
    1144:	f0 91 01 01 	lds	r31, 0x0101
    1148:	09 95       	icall
    114a:	2b c0       	rjmp	.+86     	; 0x11a2 <signal_display+0x356>

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    114c:	82 17       	cp	r24, r18
    114e:	93 07       	cpc	r25, r19
    1150:	08 f4       	brcc	.+2      	; 0x1154 <signal_display+0x308>
    1152:	09 cf       	rjmp	.-494    	; 0xf66 <signal_display+0x11a>
    1154:	24 cf       	rjmp	.-440    	; 0xf9e <signal_display+0x152>
    1156:	82 17       	cp	r24, r18
    1158:	93 07       	cpc	r25, r19
    115a:	c0 f0       	brcs	.+48     	; 0x118c <signal_display+0x340>
    115c:	15 cf       	rjmp	.-470    	; 0xf88 <signal_display+0x13c>
				freqComplete = 2;

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
    115e:	28 17       	cp	r18, r24
    1160:	39 07       	cpc	r19, r25
    1162:	08 f4       	brcc	.+2      	; 0x1166 <signal_display+0x31a>
    1164:	17 cf       	rjmp	.-466    	; 0xf94 <signal_display+0x148>
    1166:	1b cf       	rjmp	.-458    	; 0xf9e <signal_display+0x152>
			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    1168:	82 17       	cp	r24, r18
    116a:	93 07       	cpc	r25, r19
    116c:	90 f0       	brcs	.+36     	; 0x1192 <signal_display+0x346>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <signal_display+0x34c>
    1170:	82 17       	cp	r24, r18
    1172:	93 07       	cpc	r25, r19
    1174:	08 f4       	brcc	.+2      	; 0x1178 <signal_display+0x32c>
    1176:	bf cf       	rjmp	.-130    	; 0x10f6 <signal_display+0x2aa>
    1178:	ce cf       	rjmp	.-100    	; 0x1116 <signal_display+0x2ca>
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
    117a:	28 17       	cp	r18, r24
    117c:	39 07       	cpc	r19, r25
    117e:	30 f2       	brcs	.-116    	; 0x110c <signal_display+0x2c0>
    1180:	ca cf       	rjmp	.-108    	; 0x1116 <signal_display+0x2ca>
    1182:	28 17       	cp	r18, r24
    1184:	39 07       	cpc	r19, r25
    1186:	20 f2       	brcs	.-120    	; 0x1110 <signal_display+0x2c4>
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
				freqComplete = 2;
    1188:	6e 2f       	mov	r22, r30
    118a:	c5 cf       	rjmp	.-118    	; 0x1116 <signal_display+0x2ca>

			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
			
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    118c:	e1 30       	cpi	r30, 0x01	; 1
    118e:	39 f7       	brne	.-50     	; 0x115e <signal_display+0x312>
    1190:	fa ce       	rjmp	.-524    	; 0xf86 <signal_display+0x13a>
			//Find the start of the period of the measured waveform. 
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 0))
				freqComplete = 1;
	
			//If you have found the start of the period, find the rise of the waveform.
			if((ADCvalue < trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 1))
    1192:	61 30       	cpi	r22, 0x01	; 1
    1194:	91 f7       	brne	.-28     	; 0x117a <signal_display+0x32e>
    1196:	bc cf       	rjmp	.-136    	; 0x1110 <signal_display+0x2c4>
				freqComplete = 2;

			//The next step is to find the start of the next period...
			if((ADCvalue > trigger) && (prevADCvalue < ADCvalue) && (freqComplete == 2))
    1198:	48 17       	cp	r20, r24
    119a:	59 07       	cpc	r21, r25
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <signal_display+0x354>
    119e:	b6 cf       	rjmp	.-148    	; 0x110c <signal_display+0x2c0>
    11a0:	ba cf       	rjmp	.-140    	; 0x1116 <signal_display+0x2ca>
				complete = TRUE;
			dataCounter++;
		}while(complete == FALSE);
	}
	(*get_frequence_p)();
}
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	7f 90       	pop	r7
    11bc:	08 95       	ret

000011be <main>:
};

int main(void)
{
	// set PA3-PA7 as input and activated internal Pull-Up
	DDRA &= ~((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
    11be:	81 b1       	in	r24, 0x01	; 1
    11c0:	87 70       	andi	r24, 0x07	; 7
    11c2:	81 b9       	out	0x01, r24	; 1
	PORTA |= ((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
    11c4:	82 b1       	in	r24, 0x02	; 2
    11c6:	88 6f       	ori	r24, 0xF8	; 248
    11c8:	82 b9       	out	0x02, r24	; 2

	LCD_Init();
    11ca:	47 d1       	rcall	.+654    	; 0x145a <LCD_Init>
    uart_init1();
    11cc:	63 d3       	rcall	.+1734   	; 0x1894 <uart_init1>
	adc_init();
    11ce:	38 dd       	rcall	.-1424   	; 0xc40 <adc_init>
	
	AD9850_setup();
    11d0:	40 dd       	rcall	.-1408   	; 0xc52 <AD9850_setup>
	AD9850_reset();
    11d2:	4c dd       	rcall	.-1384   	; 0xc6c <AD9850_reset>
	
	start ();
    11d4:	0d dd       	rcall	.-1510   	; 0xbf0 <start>
	
	get_frequence();
    11d6:	b1 dc       	rcall	.-1694   	; 0xb3a <get_frequence>
    11d8:	2f ef       	ldi	r18, 0xFF	; 255
    11da:	83 ec       	ldi	r24, 0xC3	; 195
    11dc:	99 e0       	ldi	r25, 0x09	; 9
    11de:	21 50       	subi	r18, 0x01	; 1
    11e0:	80 40       	sbci	r24, 0x00	; 0
    11e2:	90 40       	sbci	r25, 0x00	; 0
    11e4:	e1 f7       	brne	.-8      	; 0x11de <main+0x20>
    11e6:	00 c0       	rjmp	.+0      	; 0x11e8 <main+0x2a>
    11e8:	00 00       	nop
	_delay_ms(200);
	
	for(;;)
	{
		AD9850_Setfrequency(AD_freq);
    11ea:	60 91 02 01 	lds	r22, 0x0102
    11ee:	70 91 03 01 	lds	r23, 0x0103
    11f2:	80 91 04 01 	lds	r24, 0x0104
    11f6:	90 91 05 01 	lds	r25, 0x0105
    11fa:	00 d4       	rcall	.+2048   	; 0x19fc <__floatunsisf>
    11fc:	68 dd       	rcall	.-1328   	; 0xcce <AD9850_Setfrequency>
		signal_display();
    11fe:	26 de       	rcall	.-948    	; 0xe4c <signal_display>
	}	
    1200:	f4 cf       	rjmp	.-24     	; 0x11ea <main+0x2c>

00001202 <dataflash_init>:
void
dataflash_init (void)
{
  // AT45DB081 doesn't actually need an intialization,
  // only the ChipSelect should be configured as an output.
  DDRB |= (1 << PB4);
    1202:	24 9a       	sbi	0x04, 4	; 4
  DATAFLASH_Chip_Unselect;
    1204:	2c 9a       	sbi	0x05, 4	; 5
  SPI_MasterInit();
    1206:	59 c1       	rjmp	.+690    	; 0x14ba <SPI_MasterInit>
    1208:	08 95       	ret

0000120a <LCD_Update>:
  unsigned char x;
  
  for (x = 0; x < 128; x++)
    lcd_framebuffer[line][x] = 0x00;
  
  lcd_frameupdate |= (1 << line);
    120a:	bf 92       	push	r11
    120c:	cf 92       	push	r12
    120e:	df 92       	push	r13
    1210:	ef 92       	push	r14
    1212:	ff 92       	push	r15
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	bf b6       	in	r11, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	06 e3       	ldi	r16, 0x36	; 54
    1222:	16 e0       	ldi	r17, 0x06	; 6
    1224:	0f 2e       	mov	r0, r31
    1226:	f6 e3       	ldi	r31, 0x36	; 54
    1228:	cf 2e       	mov	r12, r31
    122a:	f2 e0       	ldi	r31, 0x02	; 2
    122c:	df 2e       	mov	r13, r31
    122e:	f0 2d       	mov	r31, r0
    1230:	0f 2e       	mov	r0, r31
    1232:	f7 e0       	ldi	r31, 0x07	; 7
    1234:	ef 2e       	mov	r14, r31
    1236:	f1 2c       	mov	r15, r1
    1238:	f0 2d       	mov	r31, r0
    123a:	80 91 1c 02 	lds	r24, 0x021C
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 2c       	mov	r0, r14
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <LCD_Update+0x3e>
    1244:	95 95       	asr	r25
    1246:	87 95       	ror	r24
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <LCD_Update+0x3a>
    124c:	80 ff       	sbrs	r24, 0
    124e:	13 c0       	rjmp	.+38     	; 0x1276 <LCD_Update+0x6c>
    1250:	46 98       	cbi	0x08, 6	; 8
    1252:	47 98       	cbi	0x08, 7	; 8
    1254:	8e 2d       	mov	r24, r14
    1256:	80 6b       	ori	r24, 0xB0	; 176
    1258:	42 d1       	rcall	.+644    	; 0x14de <SPI_MasterTransfer>
    125a:	80 e1       	ldi	r24, 0x10	; 16
    125c:	40 d1       	rcall	.+640    	; 0x14de <SPI_MasterTransfer>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	3e d1       	rcall	.+636    	; 0x14de <SPI_MasterTransfer>
    1262:	47 9a       	sbi	0x08, 7	; 8
    1264:	e8 01       	movw	r28, r16
    1266:	c0 58       	subi	r28, 0x80	; 128
    1268:	d1 09       	sbc	r29, r1
    126a:	89 91       	ld	r24, Y+
    126c:	38 d1       	rcall	.+624    	; 0x14de <SPI_MasterTransfer>
    126e:	c0 17       	cp	r28, r16
    1270:	d1 07       	cpc	r29, r17
    1272:	d9 f7       	brne	.-10     	; 0x126a <LCD_Update+0x60>
    1274:	46 9a       	sbi	0x08, 6	; 8
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	e8 1a       	sub	r14, r24
    127a:	f1 08       	sbc	r15, r1
    127c:	00 58       	subi	r16, 0x80	; 128
    127e:	11 09       	sbc	r17, r1
    1280:	0c 15       	cp	r16, r12
    1282:	1d 05       	cpc	r17, r13
    1284:	d1 f6       	brne	.-76     	; 0x123a <LCD_Update+0x30>
    1286:	10 92 1c 02 	sts	0x021C, r1
    128a:	bf be       	out	0x3f, r11	; 63
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	bf 90       	pop	r11
    129e:	08 95       	ret

000012a0 <LCD_Clear>:
    12a0:	e6 e3       	ldi	r30, 0x36	; 54
    12a2:	f2 e0       	ldi	r31, 0x02	; 2
    12a4:	26 e3       	ldi	r18, 0x36	; 54
    12a6:	36 e0       	ldi	r19, 0x06	; 6
    12a8:	08 c0       	rjmp	.+16     	; 0x12ba <LCD_Clear+0x1a>
    12aa:	11 92       	st	Z+, r1
    12ac:	e8 17       	cp	r30, r24
    12ae:	f9 07       	cpc	r31, r25
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <LCD_Clear+0xa>
    12b2:	fc 01       	movw	r30, r24
    12b4:	82 17       	cp	r24, r18
    12b6:	93 07       	cpc	r25, r19
    12b8:	21 f0       	breq	.+8      	; 0x12c2 <LCD_Clear+0x22>
    12ba:	cf 01       	movw	r24, r30
    12bc:	80 58       	subi	r24, 0x80	; 128
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	f4 cf       	rjmp	.-24     	; 0x12aa <LCD_Clear+0xa>
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	80 93 1c 02 	sts	0x021C, r24
    12c8:	a0 cf       	rjmp	.-192    	; 0x120a <LCD_Update>
    12ca:	08 95       	ret

000012cc <LCD_DrawPixel>:
    12cc:	88 23       	and	r24, r24
    12ce:	0c f4       	brge	.+2      	; 0x12d2 <LCD_DrawPixel+0x6>
    12d0:	44 c0       	rjmp	.+136    	; 0x135a <LCD_DrawPixel+0x8e>
    12d2:	60 34       	cpi	r22, 0x40	; 64
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <LCD_DrawPixel+0xc>
    12d6:	41 c0       	rjmp	.+130    	; 0x135a <LCD_DrawPixel+0x8e>
    12d8:	56 2f       	mov	r21, r22
    12da:	56 95       	lsr	r21
    12dc:	56 95       	lsr	r21
    12de:	56 95       	lsr	r21
    12e0:	67 70       	andi	r22, 0x07	; 7
    12e2:	21 e0       	ldi	r18, 0x01	; 1
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <LCD_DrawPixel+0x20>
    12e8:	22 0f       	add	r18, r18
    12ea:	33 1f       	adc	r19, r19
    12ec:	6a 95       	dec	r22
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <LCD_DrawPixel+0x1c>
    12f0:	44 23       	and	r20, r20
    12f2:	19 f0       	breq	.+6      	; 0x12fa <LCD_DrawPixel+0x2e>
    12f4:	42 30       	cpi	r20, 0x02	; 2
    12f6:	71 f0       	breq	.+28     	; 0x1314 <LCD_DrawPixel+0x48>
    12f8:	19 c0       	rjmp	.+50     	; 0x132c <LCD_DrawPixel+0x60>
    12fa:	90 e8       	ldi	r25, 0x80	; 128
    12fc:	59 9f       	mul	r21, r25
    12fe:	f0 01       	movw	r30, r0
    1300:	11 24       	eor	r1, r1
    1302:	e8 0f       	add	r30, r24
    1304:	f1 1d       	adc	r31, r1
    1306:	ea 5c       	subi	r30, 0xCA	; 202
    1308:	fd 4f       	sbci	r31, 0xFD	; 253
    130a:	20 95       	com	r18
    130c:	80 81       	ld	r24, Z
    130e:	28 23       	and	r18, r24
    1310:	20 83       	st	Z, r18
    1312:	17 c0       	rjmp	.+46     	; 0x1342 <LCD_DrawPixel+0x76>
    1314:	90 e8       	ldi	r25, 0x80	; 128
    1316:	59 9f       	mul	r21, r25
    1318:	f0 01       	movw	r30, r0
    131a:	11 24       	eor	r1, r1
    131c:	e8 0f       	add	r30, r24
    131e:	f1 1d       	adc	r31, r1
    1320:	ea 5c       	subi	r30, 0xCA	; 202
    1322:	fd 4f       	sbci	r31, 0xFD	; 253
    1324:	80 81       	ld	r24, Z
    1326:	28 27       	eor	r18, r24
    1328:	20 83       	st	Z, r18
    132a:	0b c0       	rjmp	.+22     	; 0x1342 <LCD_DrawPixel+0x76>
    132c:	90 e8       	ldi	r25, 0x80	; 128
    132e:	59 9f       	mul	r21, r25
    1330:	f0 01       	movw	r30, r0
    1332:	11 24       	eor	r1, r1
    1334:	e8 0f       	add	r30, r24
    1336:	f1 1d       	adc	r31, r1
    1338:	ea 5c       	subi	r30, 0xCA	; 202
    133a:	fd 4f       	sbci	r31, 0xFD	; 253
    133c:	80 81       	ld	r24, Z
    133e:	28 2b       	or	r18, r24
    1340:	20 83       	st	Z, r18
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 c0       	rjmp	.+4      	; 0x134c <LCD_DrawPixel+0x80>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	5a 95       	dec	r21
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <LCD_DrawPixel+0x7c>
    1350:	90 91 1c 02 	lds	r25, 0x021C
    1354:	89 2b       	or	r24, r25
    1356:	80 93 1c 02 	sts	0x021C, r24
    135a:	08 95       	ret

0000135c <LCD_PutChar>:
    135c:	8a 30       	cpi	r24, 0x0A	; 10
    135e:	29 f0       	breq	.+10     	; 0x136a <LCD_PutChar+0xe>
    1360:	8d 30       	cpi	r24, 0x0D	; 13
    1362:	61 f4       	brne	.+24     	; 0x137c <LCD_PutChar+0x20>
    1364:	10 92 1b 02 	sts	0x021B, r1
    1368:	08 95       	ret
    136a:	80 91 1a 02 	lds	r24, 0x021A
    136e:	87 30       	cpi	r24, 0x07	; 7
    1370:	08 f0       	brcs	.+2      	; 0x1374 <LCD_PutChar+0x18>
    1372:	3d c0       	rjmp	.+122    	; 0x13ee <LCD_PutChar+0x92>
    1374:	8f 5f       	subi	r24, 0xFF	; 255
    1376:	80 93 1a 02 	sts	0x021A, r24
    137a:	08 95       	ret
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	fc 01       	movw	r30, r24
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	e8 0f       	add	r30, r24
    1386:	f9 1f       	adc	r31, r25
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	e4 50       	subi	r30, 0x04	; 4
    138e:	fb 4f       	sbci	r31, 0xFB	; 251
    1390:	80 91 1b 02 	lds	r24, 0x021B
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	dc 01       	movw	r26, r24
    1398:	aa 0f       	add	r26, r26
    139a:	bb 1f       	adc	r27, r27
    139c:	a8 0f       	add	r26, r24
    139e:	b9 1f       	adc	r27, r25
    13a0:	aa 0f       	add	r26, r26
    13a2:	bb 1f       	adc	r27, r27
    13a4:	80 91 1a 02 	lds	r24, 0x021A
    13a8:	90 e8       	ldi	r25, 0x80	; 128
    13aa:	89 9f       	mul	r24, r25
    13ac:	a0 0d       	add	r26, r0
    13ae:	b1 1d       	adc	r27, r1
    13b0:	11 24       	eor	r1, r1
    13b2:	aa 5c       	subi	r26, 0xCA	; 202
    13b4:	bd 4f       	sbci	r27, 0xFD	; 253
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	94 91       	lpm	r25, Z
    13ba:	9d 93       	st	X+, r25
    13bc:	8f 5f       	subi	r24, 0xFF	; 255
    13be:	31 96       	adiw	r30, 0x01	; 1
    13c0:	86 30       	cpi	r24, 0x06	; 6
    13c2:	d1 f7       	brne	.-12     	; 0x13b8 <LCD_PutChar+0x5c>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	00 90 1a 02 	lds	r0, 0x021A
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <LCD_PutChar+0x76>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <LCD_PutChar+0x72>
    13d6:	90 91 1c 02 	lds	r25, 0x021C
    13da:	89 2b       	or	r24, r25
    13dc:	80 93 1c 02 	sts	0x021C, r24
    13e0:	80 91 1b 02 	lds	r24, 0x021B
    13e4:	84 31       	cpi	r24, 0x14	; 20
    13e6:	18 f4       	brcc	.+6      	; 0x13ee <LCD_PutChar+0x92>
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 1b 02 	sts	0x021B, r24
    13ee:	08 95       	ret

000013f0 <LCD_PutString>:
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	ec 01       	movw	r28, r24
    13f6:	88 81       	ld	r24, Y
    13f8:	88 23       	and	r24, r24
    13fa:	29 f0       	breq	.+10     	; 0x1406 <LCD_PutString+0x16>
    13fc:	89 91       	ld	r24, Y+
    13fe:	ae df       	rcall	.-164    	; 0x135c <LCD_PutChar>
    1400:	88 81       	ld	r24, Y
    1402:	81 11       	cpse	r24, r1
    1404:	fb cf       	rjmp	.-10     	; 0x13fc <LCD_PutString+0xc>
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <LCD_PutString_P>:
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	fc 01       	movw	r30, r24
    1412:	84 91       	lpm	r24, Z
    1414:	ef 01       	movw	r28, r30
    1416:	21 96       	adiw	r28, 0x01	; 1
    1418:	88 23       	and	r24, r24
    141a:	31 f0       	breq	.+12     	; 0x1428 <LCD_PutString_P+0x1c>
    141c:	9f df       	rcall	.-194    	; 0x135c <LCD_PutChar>
    141e:	fe 01       	movw	r30, r28
    1420:	84 91       	lpm	r24, Z
    1422:	21 96       	adiw	r28, 0x01	; 1
    1424:	81 11       	cpse	r24, r1
    1426:	fa cf       	rjmp	.-12     	; 0x141c <LCD_PutString_P+0x10>
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <LCD_GotoXY>:
    142e:	80 93 1b 02 	sts	0x021B, r24
    1432:	60 93 1a 02 	sts	0x021A, r22
    1436:	08 95       	ret

00001438 <Backlight_Off>:
}

void
Backlight_Off (void)
{
  TWI_Start();
    1438:	6b d0       	rcall	.+214    	; 0x1510 <TWI_Start>
  TWI_Address_RW(0xc4);
    143a:	84 ec       	ldi	r24, 0xC4	; 196
    143c:	84 d0       	rcall	.+264    	; 0x1546 <TWI_Address_RW>
  TWI_Write(0x11);
    143e:	81 e1       	ldi	r24, 0x11	; 17
    1440:	9f d0       	rcall	.+318    	; 0x1580 <TWI_Write>
  TWI_Write(0x00);
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	9d d0       	rcall	.+314    	; 0x1580 <TWI_Write>
  TWI_Write(0x00);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	9b d0       	rcall	.+310    	; 0x1580 <TWI_Write>
  TWI_Write(0x00);
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	99 d0       	rcall	.+306    	; 0x1580 <TWI_Write>
  TWI_Write(0x00);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	97 d0       	rcall	.+302    	; 0x1580 <TWI_Write>
  TWI_Write(0x00);
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	95 d0       	rcall	.+298    	; 0x1580 <TWI_Write>
  TWI_Stop();
    1456:	b1 c0       	rjmp	.+354    	; 0x15ba <TWI_Stop>
    1458:	08 95       	ret

0000145a <LCD_Init>:
  SPI_MasterTransfer(data);
}

void
LCD_Init (void)
{
    145a:	cf 93       	push	r28
  SPI_MasterInit();
    145c:	2e d0       	rcall	.+92     	; 0x14ba <SPI_MasterInit>

  /* Set Register Select and Chip Select as Output */
  DDRC |= (1<<PC7)|(1<<PC6);
    145e:	87 b1       	in	r24, 0x07	; 7
    1460:	80 6c       	ori	r24, 0xC0	; 192
    1462:	87 b9       	out	0x07, r24	; 7
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
    1464:	cf b7       	in	r28, 0x3f	; 63
  cli();
    1466:	f8 94       	cli
  
  /* Starting Init Command Sequence */
  LCD_Command_Mode;
    1468:	47 98       	cbi	0x08, 7	; 8
  LCD_Chip_Select;
    146a:	46 98       	cbi	0x08, 6	; 8
uint8_t lcd_texty = 0;

void
LCD_Send (uint8_t data)
{
  SPI_MasterTransfer(data);
    146c:	82 ee       	ldi	r24, 0xE2	; 226
    146e:	37 d0       	rcall	.+110    	; 0x14de <SPI_MasterTransfer>
    1470:	83 ea       	ldi	r24, 0xA3	; 163
    1472:	35 d0       	rcall	.+106    	; 0x14de <SPI_MasterTransfer>
    1474:	81 e8       	ldi	r24, 0x81	; 129
    1476:	33 d0       	rcall	.+102    	; 0x14de <SPI_MasterTransfer>
    1478:	88 e0       	ldi	r24, 0x08	; 8
    147a:	31 d0       	rcall	.+98     	; 0x14de <SPI_MasterTransfer>
    147c:	80 ea       	ldi	r24, 0xA0	; 160
    147e:	2f d0       	rcall	.+94     	; 0x14de <SPI_MasterTransfer>
    1480:	88 ec       	ldi	r24, 0xC8	; 200
    1482:	2d d0       	rcall	.+90     	; 0x14de <SPI_MasterTransfer>
    1484:	85 e2       	ldi	r24, 0x25	; 37
    1486:	2b d0       	rcall	.+86     	; 0x14de <SPI_MasterTransfer>
    1488:	8f e2       	ldi	r24, 0x2F	; 47
    148a:	29 d0       	rcall	.+82     	; 0x14de <SPI_MasterTransfer>
    148c:	8f ea       	ldi	r24, 0xAF	; 175
    148e:	27 d0       	rcall	.+78     	; 0x14de <SPI_MasterTransfer>
  LCD_Send(LCD_COMMON_OUTPUT_MODE_REVERSE);
  LCD_Send(LCD_V5_VOLTAGE_REGULATOR | 0x05);
  LCD_Send(LCD_POWER_CONTROLLER_SET | 0x07);
  LCD_Send(LCD_DISPLAY_ON);
  
  LCD_Chip_Unselect;
    1490:	46 9a       	sbi	0x08, 6	; 8
  LCD_Data_Mode;
    1492:	47 9a       	sbi	0x08, 7	; 8
  
  LCD_Clear();
    1494:	05 df       	rcall	.-502    	; 0x12a0 <LCD_Clear>
  
  /* Restore Status Register */
  SREG = sreg;
    1496:	cf bf       	out	0x3f, r28	; 63
  
  // Initialize TWI for Backlight Control
  TWI_Init();
    1498:	27 d0       	rcall	.+78     	; 0x14e8 <TWI_Init>
  Backlight_Off();
    149a:	ce df       	rcall	.-100    	; 0x1438 <Backlight_Off>
  
  // Initialize Dataflash
  dataflash_init();
    149c:	b2 de       	rcall	.-668    	; 0x1202 <dataflash_init>
}
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <Backlight_LED>:
  TWI_Stop();
}

void
Backlight_LED (uint8_t led_selector)
{
    14a2:	cf 93       	push	r28
    14a4:	c8 2f       	mov	r28, r24
  TWI_Start();
    14a6:	34 d0       	rcall	.+104    	; 0x1510 <TWI_Start>
  TWI_Address_RW(0xc4);
    14a8:	84 ec       	ldi	r24, 0xC4	; 196
    14aa:	4d d0       	rcall	.+154    	; 0x1546 <TWI_Address_RW>
  TWI_Write(0x15);
    14ac:	85 e1       	ldi	r24, 0x15	; 21
    14ae:	68 d0       	rcall	.+208    	; 0x1580 <TWI_Write>
  TWI_Write(led_selector);
    14b0:	8c 2f       	mov	r24, r28
    14b2:	66 d0       	rcall	.+204    	; 0x1580 <TWI_Write>
  TWI_Stop();
    14b4:	82 d0       	rcall	.+260    	; 0x15ba <TWI_Stop>
}
    14b6:	cf 91       	pop	r28
    14b8:	08 95       	ret

000014ba <SPI_MasterInit>:

void
SPI_MasterInit (void)
{
  /* Check if already initialized */
  if (!(SPI_flag & 1))
    14ba:	80 91 1d 02 	lds	r24, 0x021D
    14be:	80 fd       	sbrc	r24, 0
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <SPI_MasterInit+0x22>
    {
      /* Set MOSI and SCK output */
      DDRB |= (1<<PB5)|(1<<PB7);
    14c2:	84 b1       	in	r24, 0x04	; 4
    14c4:	80 6a       	ori	r24, 0xA0	; 160
    14c6:	84 b9       	out	0x04, r24	; 4
      
      /* Enable SPI, Master */
      SPCR = (1<<SPE)|(1<<MSTR);
    14c8:	80 e5       	ldi	r24, 0x50	; 80
    14ca:	8c bd       	out	0x2c, r24	; 44
      
      /* Set Double SPI Speed Bit, SPI clock will be fck/2 */
      SPSR = (1<<SPI2X);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	8d bd       	out	0x2d, r24	; 45
      
      /* Set SPI Init Flag */
      SPI_flag = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 1e 02 	sts	0x021E, r25
    14d8:	80 93 1d 02 	sts	0x021D, r24
    14dc:	08 95       	ret

000014de <SPI_MasterTransfer>:

void
SPI_MasterTransfer (unsigned char c)
{
  /* Start transmission */
  SPDR = c;
    14de:	8e bd       	out	0x2e, r24	; 46
  
  /* Wait for transmission complete */
  while (!(SPSR & (1<<SPIF)));
    14e0:	0d b4       	in	r0, 0x2d	; 45
    14e2:	07 fe       	sbrs	r0, 7
    14e4:	fd cf       	rjmp	.-6      	; 0x14e0 <SPI_MasterTransfer+0x2>
}
    14e6:	08 95       	ret

000014e8 <TWI_Init>:

void
TWI_Init (void)
{
  // Port Setup
  DDRC &= ~((1 << PC0)|(1 << PC1));
    14e8:	87 b1       	in	r24, 0x07	; 7
    14ea:	8c 7f       	andi	r24, 0xFC	; 252
    14ec:	87 b9       	out	0x07, r24	; 7
  PORTC |= (1 << PC0)|(1 << PC1);
    14ee:	88 b1       	in	r24, 0x08	; 8
    14f0:	83 60       	ori	r24, 0x03	; 3
    14f2:	88 b9       	out	0x08, r24	; 8
  
  // Setup TWI Speed to 400kHZ (TWPS = 1)
  TWBR = 3;
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	80 93 b8 00 	sts	0x00B8, r24
  
  // Using TIMER2 to detect timeout
  TCCR2B = (7 << CS20);
    14fa:	87 e0       	ldi	r24, 0x07	; 7
    14fc:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = (1 << OCIE2A);
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	80 93 70 00 	sts	0x0070, r24
  
  OCR2A = 125;
    1506:	8d e7       	ldi	r24, 0x7D	; 125
    1508:	80 93 b3 00 	sts	0x00B3, r24
  
  // Interrupts REQUIRED!
  sei();
    150c:	78 94       	sei
    150e:	08 95       	ret

00001510 <TWI_Start>:
}

int16_t
TWI_Start (void)
{
  twi_timeout = 10;
    1510:	8a e0       	ldi	r24, 0x0A	; 10
    1512:	80 93 1f 02 	sts	0x021F, r24
  
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
    1516:	84 ea       	ldi	r24, 0xA4	; 164
    1518:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    151c:	ec eb       	ldi	r30, 0xBC	; 188
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 91 1f 02 	lds	r24, 0x021F
    1524:	88 23       	and	r24, r24
    1526:	19 f0       	breq	.+6      	; 0x152e <TWI_Start+0x1e>
    1528:	80 81       	ld	r24, Z
    152a:	88 23       	and	r24, r24
    152c:	cc f7       	brge	.-14     	; 0x1520 <TWI_Start+0x10>
  
  if (twi_timeout)
    152e:	80 91 1f 02 	lds	r24, 0x021F
    1532:	88 23       	and	r24, r24
    1534:	29 f0       	breq	.+10     	; 0x1540 <TWI_Start+0x30>
    return (int16_t) (TWSR & 0xf8);
    1536:	80 91 b9 00 	lds	r24, 0x00B9
    153a:	88 7f       	andi	r24, 0xF8	; 248
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	08 95       	ret
  else
    return -1;
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	9f ef       	ldi	r25, 0xFF	; 255
}
    1544:	08 95       	ret

00001546 <TWI_Address_RW>:

int16_t
TWI_Address_RW (uint8_t address)
{
  twi_timeout = 10;
    1546:	9a e0       	ldi	r25, 0x0A	; 10
    1548:	90 93 1f 02 	sts	0x021F, r25
  
  TWDR = address;
    154c:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
    1550:	84 e8       	ldi	r24, 0x84	; 132
    1552:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    1556:	ec eb       	ldi	r30, 0xBC	; 188
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 91 1f 02 	lds	r24, 0x021F
    155e:	88 23       	and	r24, r24
    1560:	19 f0       	breq	.+6      	; 0x1568 <TWI_Address_RW+0x22>
    1562:	80 81       	ld	r24, Z
    1564:	88 23       	and	r24, r24
    1566:	cc f7       	brge	.-14     	; 0x155a <TWI_Address_RW+0x14>
  
  if (twi_timeout)
    1568:	80 91 1f 02 	lds	r24, 0x021F
    156c:	88 23       	and	r24, r24
    156e:	29 f0       	breq	.+10     	; 0x157a <TWI_Address_RW+0x34>
    return (int16_t) (TWSR & 0xf8);
    1570:	80 91 b9 00 	lds	r24, 0x00B9
    1574:	88 7f       	andi	r24, 0xF8	; 248
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	08 95       	ret
  else
    return -1;
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	9f ef       	ldi	r25, 0xFF	; 255
}
    157e:	08 95       	ret

00001580 <TWI_Write>:

int16_t
TWI_Write (uint8_t data)
{
  twi_timeout = 10;
    1580:	9a e0       	ldi	r25, 0x0A	; 10
    1582:	90 93 1f 02 	sts	0x021F, r25
  
  TWDR = data;
    1586:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
    158a:	84 e8       	ldi	r24, 0x84	; 132
    158c:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
    1590:	ec eb       	ldi	r30, 0xBC	; 188
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 91 1f 02 	lds	r24, 0x021F
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <TWI_Write+0x22>
    159c:	80 81       	ld	r24, Z
    159e:	88 23       	and	r24, r24
    15a0:	cc f7       	brge	.-14     	; 0x1594 <TWI_Write+0x14>
  
  if (twi_timeout)
    15a2:	80 91 1f 02 	lds	r24, 0x021F
    15a6:	88 23       	and	r24, r24
    15a8:	29 f0       	breq	.+10     	; 0x15b4 <TWI_Write+0x34>
    return (int16_t) (TWSR & 0xf8);
    15aa:	80 91 b9 00 	lds	r24, 0x00B9
    15ae:	88 7f       	andi	r24, 0xF8	; 248
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	08 95       	ret
  else
    return -1;
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	9f ef       	ldi	r25, 0xFF	; 255
}
    15b8:	08 95       	ret

000015ba <TWI_Stop>:

void
TWI_Stop (void)
{
  twi_timeout = 10;
    15ba:	8a e0       	ldi	r24, 0x0A	; 10
    15bc:	80 93 1f 02 	sts	0x021F, r24
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
    15c0:	84 e9       	ldi	r24, 0x94	; 148
    15c2:	80 93 bc 00 	sts	0x00BC, r24
    15c6:	08 95       	ret

000015c8 <__vector_9>:
}

// ISR will be called every 8ms to decrease twi_timeout if > 0
ISR (TIMER2_COMPA_vect)
{
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	0b b6       	in	r0, 0x3b	; 59
    15d4:	0f 92       	push	r0
    15d6:	8f 93       	push	r24
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
  OCR2A += 125;
    15dc:	e3 eb       	ldi	r30, 0xB3	; 179
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	83 58       	subi	r24, 0x83	; 131
    15e4:	80 83       	st	Z, r24

  if (twi_timeout)
    15e6:	80 91 1f 02 	lds	r24, 0x021F
    15ea:	88 23       	and	r24, r24
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <__vector_9+0x30>
    twi_timeout--;
    15ee:	80 91 1f 02 	lds	r24, 0x021F
    15f2:	81 50       	subi	r24, 0x01	; 1
    15f4:	80 93 1f 02 	sts	0x021F, r24
}
    15f8:	ff 91       	pop	r31
    15fa:	ef 91       	pop	r30
    15fc:	8f 91       	pop	r24
    15fe:	0f 90       	pop	r0
    1600:	0b be       	out	0x3b, r0	; 59
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	0f 90       	pop	r0
    1608:	1f 90       	pop	r1
    160a:	18 95       	reti

0000160c <__vector_20>:
uint8_t uart0_tx_frame()
{
	uart_tx_byte(PREAMBLE);
	uart_tx_byte(device_address);
	return 1;
}
    160c:	1f 92       	push	r1
    160e:	0f 92       	push	r0
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	0f 92       	push	r0
    1614:	11 24       	eor	r1, r1
    1616:	0b b6       	in	r0, 0x3b	; 59
    1618:	0f 92       	push	r0
    161a:	2f 93       	push	r18
    161c:	8f 93       	push	r24
    161e:	9f 93       	push	r25
    1620:	ef 93       	push	r30
    1622:	ff 93       	push	r31
    1624:	90 91 c6 00 	lds	r25, 0x00C6
    1628:	9d 30       	cpi	r25, 0x0D	; 13
    162a:	19 f1       	breq	.+70     	; 0x1672 <__vector_20+0x66>
    162c:	80 91 2b 02 	lds	r24, 0x022B
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	19 f4       	brne	.+6      	; 0x163a <__vector_20+0x2e>
    1634:	90 93 2a 02 	sts	0x022A, r25
    1638:	18 c0       	rjmp	.+48     	; 0x166a <__vector_20+0x5e>
    163a:	2e ef       	ldi	r18, 0xFE	; 254
    163c:	28 0f       	add	r18, r24
    163e:	20 3a       	cpi	r18, 0xA0	; 160
    1640:	80 f4       	brcc	.+32     	; 0x1662 <__vector_20+0x56>
    1642:	20 91 2a 02 	lds	r18, 0x022A
    1646:	23 30       	cpi	r18, 0x03	; 3
    1648:	61 f4       	brne	.+24     	; 0x1662 <__vector_20+0x56>
    164a:	e8 2f       	mov	r30, r24
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	ec 5c       	subi	r30, 0xCC	; 204
    1650:	f9 4f       	sbci	r31, 0xF9	; 249
    1652:	90 83       	st	Z, r25
    1654:	90 81       	ld	r25, Z
    1656:	20 91 29 02 	lds	r18, 0x0229
    165a:	92 27       	eor	r25, r18
    165c:	90 93 29 02 	sts	0x0229, r25
    1660:	04 c0       	rjmp	.+8      	; 0x166a <__vector_20+0x5e>
    1662:	82 3a       	cpi	r24, 0xA2	; 162
    1664:	11 f4       	brne	.+4      	; 0x166a <__vector_20+0x5e>
    1666:	90 93 28 02 	sts	0x0228, r25
    166a:	8f 5f       	subi	r24, 0xFF	; 255
    166c:	80 93 2b 02 	sts	0x022B, r24
    1670:	12 c0       	rjmp	.+36     	; 0x1696 <__vector_20+0x8a>
    1672:	90 91 29 02 	lds	r25, 0x0229
    1676:	80 91 28 02 	lds	r24, 0x0228
    167a:	98 13       	cpse	r25, r24
    167c:	03 c0       	rjmp	.+6      	; 0x1684 <__vector_20+0x78>
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	80 93 2c 02 	sts	0x022C, r24
    1684:	10 92 2b 02 	sts	0x022B, r1
    1688:	10 92 2a 02 	sts	0x022A, r1
    168c:	8b eb       	ldi	r24, 0xBB	; 187
    168e:	80 93 28 02 	sts	0x0228, r24
    1692:	10 92 29 02 	sts	0x0229, r1
    1696:	ff 91       	pop	r31
    1698:	ef 91       	pop	r30
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	2f 91       	pop	r18
    16a0:	0f 90       	pop	r0
    16a2:	0b be       	out	0x3b, r0	; 59
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_22>:
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	0b b6       	in	r0, 0x3b	; 59
    16ba:	0f 92       	push	r0
    16bc:	2f 93       	push	r18
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
    16c6:	e0 91 27 02 	lds	r30, 0x0227
    16ca:	e0 3a       	cpi	r30, 0xA0	; 160
    16cc:	b0 f4       	brcc	.+44     	; 0x16fa <__vector_22+0x4c>
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	e8 5f       	subi	r30, 0xF8	; 248
    16d2:	fe 4f       	sbci	r31, 0xFE	; 254
    16d4:	80 81       	ld	r24, Z
    16d6:	80 93 c6 00 	sts	0x00C6, r24
    16da:	80 91 27 02 	lds	r24, 0x0227
    16de:	e8 2f       	mov	r30, r24
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	e8 5f       	subi	r30, 0xF8	; 248
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
    16e6:	90 81       	ld	r25, Z
    16e8:	20 91 26 02 	lds	r18, 0x0226
    16ec:	92 27       	eor	r25, r18
    16ee:	90 93 26 02 	sts	0x0226, r25
    16f2:	8f 5f       	subi	r24, 0xFF	; 255
    16f4:	80 93 27 02 	sts	0x0227, r24
    16f8:	1d c0       	rjmp	.+58     	; 0x1734 <__vector_22+0x86>
    16fa:	e0 3a       	cpi	r30, 0xA0	; 160
    16fc:	51 f4       	brne	.+20     	; 0x1712 <__vector_22+0x64>
    16fe:	80 91 26 02 	lds	r24, 0x0226
    1702:	80 93 c6 00 	sts	0x00C6, r24
    1706:	80 91 27 02 	lds	r24, 0x0227
    170a:	8f 5f       	subi	r24, 0xFF	; 255
    170c:	80 93 27 02 	sts	0x0227, r24
    1710:	11 c0       	rjmp	.+34     	; 0x1734 <__vector_22+0x86>
    1712:	e1 3a       	cpi	r30, 0xA1	; 161
    1714:	49 f4       	brne	.+18     	; 0x1728 <__vector_22+0x7a>
    1716:	8d e0       	ldi	r24, 0x0D	; 13
    1718:	80 93 c6 00 	sts	0x00C6, r24
    171c:	80 91 27 02 	lds	r24, 0x0227
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	80 93 27 02 	sts	0x0227, r24
    1726:	06 c0       	rjmp	.+12     	; 0x1734 <__vector_22+0x86>
    1728:	10 92 26 02 	sts	0x0226, r1
    172c:	10 92 27 02 	sts	0x0227, r1
    1730:	10 92 2c 02 	sts	0x022C, r1
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0b be       	out	0x3b, r0	; 59
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <__vector_28>:
    174c:	1f 92       	push	r1
    174e:	0f 92       	push	r0
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	0f 92       	push	r0
    1754:	11 24       	eor	r1, r1
    1756:	0b b6       	in	r0, 0x3b	; 59
    1758:	0f 92       	push	r0
    175a:	2f 93       	push	r18
    175c:	8f 93       	push	r24
    175e:	9f 93       	push	r25
    1760:	ef 93       	push	r30
    1762:	ff 93       	push	r31
    1764:	90 91 ce 00 	lds	r25, 0x00CE
    1768:	9d 30       	cpi	r25, 0x0D	; 13
    176a:	19 f1       	breq	.+70     	; 0x17b2 <__vector_28+0x66>
    176c:	80 91 25 02 	lds	r24, 0x0225
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	19 f4       	brne	.+6      	; 0x177a <__vector_28+0x2e>
    1774:	90 93 24 02 	sts	0x0224, r25
    1778:	18 c0       	rjmp	.+48     	; 0x17aa <__vector_28+0x5e>
    177a:	2e ef       	ldi	r18, 0xFE	; 254
    177c:	28 0f       	add	r18, r24
    177e:	20 3a       	cpi	r18, 0xA0	; 160
    1780:	80 f4       	brcc	.+32     	; 0x17a2 <__vector_28+0x56>
    1782:	20 91 24 02 	lds	r18, 0x0224
    1786:	23 30       	cpi	r18, 0x03	; 3
    1788:	61 f4       	brne	.+24     	; 0x17a2 <__vector_28+0x56>
    178a:	e8 2f       	mov	r30, r24
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	ec 5c       	subi	r30, 0xCC	; 204
    1790:	f9 4f       	sbci	r31, 0xF9	; 249
    1792:	90 83       	st	Z, r25
    1794:	90 81       	ld	r25, Z
    1796:	20 91 23 02 	lds	r18, 0x0223
    179a:	92 27       	eor	r25, r18
    179c:	90 93 23 02 	sts	0x0223, r25
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <__vector_28+0x5e>
    17a2:	82 3a       	cpi	r24, 0xA2	; 162
    17a4:	11 f4       	brne	.+4      	; 0x17aa <__vector_28+0x5e>
    17a6:	90 93 22 02 	sts	0x0222, r25
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	80 93 25 02 	sts	0x0225, r24
    17b0:	16 c0       	rjmp	.+44     	; 0x17de <__vector_28+0x92>
    17b2:	90 91 23 02 	lds	r25, 0x0223
    17b6:	80 91 22 02 	lds	r24, 0x0222
    17ba:	98 13       	cpse	r25, r24
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <__vector_28+0x80>
    17be:	80 91 24 02 	lds	r24, 0x0224
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	19 f4       	brne	.+6      	; 0x17cc <__vector_28+0x80>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 93 2c 02 	sts	0x022C, r24
    17cc:	10 92 25 02 	sts	0x0225, r1
    17d0:	10 92 24 02 	sts	0x0224, r1
    17d4:	8b eb       	ldi	r24, 0xBB	; 187
    17d6:	80 93 22 02 	sts	0x0222, r24
    17da:	10 92 23 02 	sts	0x0223, r1
    17de:	ff 91       	pop	r31
    17e0:	ef 91       	pop	r30
    17e2:	9f 91       	pop	r25
    17e4:	8f 91       	pop	r24
    17e6:	2f 91       	pop	r18
    17e8:	0f 90       	pop	r0
    17ea:	0b be       	out	0x3b, r0	; 59
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	0f 90       	pop	r0
    17f2:	1f 90       	pop	r1
    17f4:	18 95       	reti

000017f6 <__vector_30>:
    17f6:	1f 92       	push	r1
    17f8:	0f 92       	push	r0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	0b b6       	in	r0, 0x3b	; 59
    1802:	0f 92       	push	r0
    1804:	2f 93       	push	r18
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	e0 91 21 02 	lds	r30, 0x0221
    1812:	e0 3a       	cpi	r30, 0xA0	; 160
    1814:	b0 f4       	brcc	.+44     	; 0x1842 <__vector_30+0x4c>
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	e8 5f       	subi	r30, 0xF8	; 248
    181a:	fe 4f       	sbci	r31, 0xFE	; 254
    181c:	80 81       	ld	r24, Z
    181e:	80 93 ce 00 	sts	0x00CE, r24
    1822:	80 91 21 02 	lds	r24, 0x0221
    1826:	e8 2f       	mov	r30, r24
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	e8 5f       	subi	r30, 0xF8	; 248
    182c:	fe 4f       	sbci	r31, 0xFE	; 254
    182e:	90 81       	ld	r25, Z
    1830:	20 91 20 02 	lds	r18, 0x0220
    1834:	92 27       	eor	r25, r18
    1836:	90 93 20 02 	sts	0x0220, r25
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	80 93 21 02 	sts	0x0221, r24
    1840:	1d c0       	rjmp	.+58     	; 0x187c <__vector_30+0x86>
    1842:	e0 3a       	cpi	r30, 0xA0	; 160
    1844:	51 f4       	brne	.+20     	; 0x185a <__vector_30+0x64>
    1846:	80 91 20 02 	lds	r24, 0x0220
    184a:	80 93 ce 00 	sts	0x00CE, r24
    184e:	80 91 21 02 	lds	r24, 0x0221
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	80 93 21 02 	sts	0x0221, r24
    1858:	11 c0       	rjmp	.+34     	; 0x187c <__vector_30+0x86>
    185a:	e1 3a       	cpi	r30, 0xA1	; 161
    185c:	49 f4       	brne	.+18     	; 0x1870 <__vector_30+0x7a>
    185e:	8d e0       	ldi	r24, 0x0D	; 13
    1860:	80 93 ce 00 	sts	0x00CE, r24
    1864:	80 91 21 02 	lds	r24, 0x0221
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	80 93 21 02 	sts	0x0221, r24
    186e:	06 c0       	rjmp	.+12     	; 0x187c <__vector_30+0x86>
    1870:	10 92 20 02 	sts	0x0220, r1
    1874:	10 92 21 02 	sts	0x0221, r1
    1878:	10 92 2c 02 	sts	0x022C, r1
    187c:	ff 91       	pop	r31
    187e:	ef 91       	pop	r30
    1880:	9f 91       	pop	r25
    1882:	8f 91       	pop	r24
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0b be       	out	0x3b, r0	; 59
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <uart_init1>:
    1894:	e8 ec       	ldi	r30, 0xC8	; 200
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	80 83       	st	Z, r24
    189c:	88 ed       	ldi	r24, 0xD8	; 216
    189e:	80 93 c9 00 	sts	0x00C9, r24
    18a2:	86 e0       	ldi	r24, 0x06	; 6
    18a4:	80 93 ca 00 	sts	0x00CA, r24
    18a8:	10 92 cd 00 	sts	0x00CD, r1
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	80 93 cc 00 	sts	0x00CC, r24
    18b2:	08 95       	ret

000018b4 <uart1_tx_byte>:
	}
}

void uart1_tx_byte(unsigned char c)
{
	while (!(UCSR1A & (1<<UDRE1)))  /* warten bis Senden moeglich */
    18b4:	e8 ec       	ldi	r30, 0xC8	; 200
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	90 81       	ld	r25, Z
    18ba:	95 ff       	sbrs	r25, 5
    18bc:	fd cf       	rjmp	.-6      	; 0x18b8 <uart1_tx_byte+0x4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    18be:	f8 94       	cli
	{
	}
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		UDR1 = c;
    18c0:	80 93 ce 00 	sts	0x00CE, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    18c4:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    18c6:	08 95       	ret

000018c8 <uart1_tx_frame>:
}


uint8_t uart1_tx_frame()
{
	uart1_tx_byte(PREAMBLE);
    18c8:	8a ea       	ldi	r24, 0xAA	; 170
    18ca:	f4 df       	rcall	.-24     	; 0x18b4 <uart1_tx_byte>
	uart1_tx_byte(device_address);
    18cc:	83 e0       	ldi	r24, 0x03	; 3
    18ce:	f2 df       	rcall	.-28     	; 0x18b4 <uart1_tx_byte>
	return 1;
}
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	08 95       	ret

000018d4 <__divsf3>:
    18d4:	0c d0       	rcall	.+24     	; 0x18ee <__divsf3x>
    18d6:	e6 c0       	rjmp	.+460    	; 0x1aa4 <__fp_round>
    18d8:	de d0       	rcall	.+444    	; 0x1a96 <__fp_pscB>
    18da:	40 f0       	brcs	.+16     	; 0x18ec <__divsf3+0x18>
    18dc:	d5 d0       	rcall	.+426    	; 0x1a88 <__fp_pscA>
    18de:	30 f0       	brcs	.+12     	; 0x18ec <__divsf3+0x18>
    18e0:	21 f4       	brne	.+8      	; 0x18ea <__divsf3+0x16>
    18e2:	5f 3f       	cpi	r21, 0xFF	; 255
    18e4:	19 f0       	breq	.+6      	; 0x18ec <__divsf3+0x18>
    18e6:	c7 c0       	rjmp	.+398    	; 0x1a76 <__fp_inf>
    18e8:	51 11       	cpse	r21, r1
    18ea:	10 c1       	rjmp	.+544    	; 0x1b0c <__fp_szero>
    18ec:	ca c0       	rjmp	.+404    	; 0x1a82 <__fp_nan>

000018ee <__divsf3x>:
    18ee:	eb d0       	rcall	.+470    	; 0x1ac6 <__fp_split3>
    18f0:	98 f3       	brcs	.-26     	; 0x18d8 <__divsf3+0x4>

000018f2 <__divsf3_pse>:
    18f2:	99 23       	and	r25, r25
    18f4:	c9 f3       	breq	.-14     	; 0x18e8 <__divsf3+0x14>
    18f6:	55 23       	and	r21, r21
    18f8:	b1 f3       	breq	.-20     	; 0x18e6 <__divsf3+0x12>
    18fa:	95 1b       	sub	r25, r21
    18fc:	55 0b       	sbc	r21, r21
    18fe:	bb 27       	eor	r27, r27
    1900:	aa 27       	eor	r26, r26
    1902:	62 17       	cp	r22, r18
    1904:	73 07       	cpc	r23, r19
    1906:	84 07       	cpc	r24, r20
    1908:	38 f0       	brcs	.+14     	; 0x1918 <__divsf3_pse+0x26>
    190a:	9f 5f       	subi	r25, 0xFF	; 255
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	22 0f       	add	r18, r18
    1910:	33 1f       	adc	r19, r19
    1912:	44 1f       	adc	r20, r20
    1914:	aa 1f       	adc	r26, r26
    1916:	a9 f3       	breq	.-22     	; 0x1902 <__divsf3_pse+0x10>
    1918:	33 d0       	rcall	.+102    	; 0x1980 <__divsf3_pse+0x8e>
    191a:	0e 2e       	mov	r0, r30
    191c:	3a f0       	brmi	.+14     	; 0x192c <__divsf3_pse+0x3a>
    191e:	e0 e8       	ldi	r30, 0x80	; 128
    1920:	30 d0       	rcall	.+96     	; 0x1982 <__divsf3_pse+0x90>
    1922:	91 50       	subi	r25, 0x01	; 1
    1924:	50 40       	sbci	r21, 0x00	; 0
    1926:	e6 95       	lsr	r30
    1928:	00 1c       	adc	r0, r0
    192a:	ca f7       	brpl	.-14     	; 0x191e <__divsf3_pse+0x2c>
    192c:	29 d0       	rcall	.+82     	; 0x1980 <__divsf3_pse+0x8e>
    192e:	fe 2f       	mov	r31, r30
    1930:	27 d0       	rcall	.+78     	; 0x1980 <__divsf3_pse+0x8e>
    1932:	66 0f       	add	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	bb 1f       	adc	r27, r27
    193a:	26 17       	cp	r18, r22
    193c:	37 07       	cpc	r19, r23
    193e:	48 07       	cpc	r20, r24
    1940:	ab 07       	cpc	r26, r27
    1942:	b0 e8       	ldi	r27, 0x80	; 128
    1944:	09 f0       	breq	.+2      	; 0x1948 <__divsf3_pse+0x56>
    1946:	bb 0b       	sbc	r27, r27
    1948:	80 2d       	mov	r24, r0
    194a:	bf 01       	movw	r22, r30
    194c:	ff 27       	eor	r31, r31
    194e:	93 58       	subi	r25, 0x83	; 131
    1950:	5f 4f       	sbci	r21, 0xFF	; 255
    1952:	2a f0       	brmi	.+10     	; 0x195e <__divsf3_pse+0x6c>
    1954:	9e 3f       	cpi	r25, 0xFE	; 254
    1956:	51 05       	cpc	r21, r1
    1958:	68 f0       	brcs	.+26     	; 0x1974 <__divsf3_pse+0x82>
    195a:	8d c0       	rjmp	.+282    	; 0x1a76 <__fp_inf>
    195c:	d7 c0       	rjmp	.+430    	; 0x1b0c <__fp_szero>
    195e:	5f 3f       	cpi	r21, 0xFF	; 255
    1960:	ec f3       	brlt	.-6      	; 0x195c <__divsf3_pse+0x6a>
    1962:	98 3e       	cpi	r25, 0xE8	; 232
    1964:	dc f3       	brlt	.-10     	; 0x195c <__divsf3_pse+0x6a>
    1966:	86 95       	lsr	r24
    1968:	77 95       	ror	r23
    196a:	67 95       	ror	r22
    196c:	b7 95       	ror	r27
    196e:	f7 95       	ror	r31
    1970:	9f 5f       	subi	r25, 0xFF	; 255
    1972:	c9 f7       	brne	.-14     	; 0x1966 <__divsf3_pse+0x74>
    1974:	88 0f       	add	r24, r24
    1976:	91 1d       	adc	r25, r1
    1978:	96 95       	lsr	r25
    197a:	87 95       	ror	r24
    197c:	97 f9       	bld	r25, 7
    197e:	08 95       	ret
    1980:	e1 e0       	ldi	r30, 0x01	; 1
    1982:	66 0f       	add	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	88 1f       	adc	r24, r24
    1988:	bb 1f       	adc	r27, r27
    198a:	62 17       	cp	r22, r18
    198c:	73 07       	cpc	r23, r19
    198e:	84 07       	cpc	r24, r20
    1990:	ba 07       	cpc	r27, r26
    1992:	20 f0       	brcs	.+8      	; 0x199c <__divsf3_pse+0xaa>
    1994:	62 1b       	sub	r22, r18
    1996:	73 0b       	sbc	r23, r19
    1998:	84 0b       	sbc	r24, r20
    199a:	ba 0b       	sbc	r27, r26
    199c:	ee 1f       	adc	r30, r30
    199e:	88 f7       	brcc	.-30     	; 0x1982 <__divsf3_pse+0x90>
    19a0:	e0 95       	com	r30
    19a2:	08 95       	ret

000019a4 <__fixunssfsi>:
    19a4:	98 d0       	rcall	.+304    	; 0x1ad6 <__fp_splitA>
    19a6:	88 f0       	brcs	.+34     	; 0x19ca <__fixunssfsi+0x26>
    19a8:	9f 57       	subi	r25, 0x7F	; 127
    19aa:	90 f0       	brcs	.+36     	; 0x19d0 <__fixunssfsi+0x2c>
    19ac:	b9 2f       	mov	r27, r25
    19ae:	99 27       	eor	r25, r25
    19b0:	b7 51       	subi	r27, 0x17	; 23
    19b2:	a0 f0       	brcs	.+40     	; 0x19dc <__fixunssfsi+0x38>
    19b4:	d1 f0       	breq	.+52     	; 0x19ea <__fixunssfsi+0x46>
    19b6:	66 0f       	add	r22, r22
    19b8:	77 1f       	adc	r23, r23
    19ba:	88 1f       	adc	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	1a f0       	brmi	.+6      	; 0x19c6 <__fixunssfsi+0x22>
    19c0:	ba 95       	dec	r27
    19c2:	c9 f7       	brne	.-14     	; 0x19b6 <__fixunssfsi+0x12>
    19c4:	12 c0       	rjmp	.+36     	; 0x19ea <__fixunssfsi+0x46>
    19c6:	b1 30       	cpi	r27, 0x01	; 1
    19c8:	81 f0       	breq	.+32     	; 0x19ea <__fixunssfsi+0x46>
    19ca:	9f d0       	rcall	.+318    	; 0x1b0a <__fp_zero>
    19cc:	b1 e0       	ldi	r27, 0x01	; 1
    19ce:	08 95       	ret
    19d0:	9c c0       	rjmp	.+312    	; 0x1b0a <__fp_zero>
    19d2:	67 2f       	mov	r22, r23
    19d4:	78 2f       	mov	r23, r24
    19d6:	88 27       	eor	r24, r24
    19d8:	b8 5f       	subi	r27, 0xF8	; 248
    19da:	39 f0       	breq	.+14     	; 0x19ea <__fixunssfsi+0x46>
    19dc:	b9 3f       	cpi	r27, 0xF9	; 249
    19de:	cc f3       	brlt	.-14     	; 0x19d2 <__fixunssfsi+0x2e>
    19e0:	86 95       	lsr	r24
    19e2:	77 95       	ror	r23
    19e4:	67 95       	ror	r22
    19e6:	b3 95       	inc	r27
    19e8:	d9 f7       	brne	.-10     	; 0x19e0 <__fixunssfsi+0x3c>
    19ea:	3e f4       	brtc	.+14     	; 0x19fa <__fixunssfsi+0x56>
    19ec:	90 95       	com	r25
    19ee:	80 95       	com	r24
    19f0:	70 95       	com	r23
    19f2:	61 95       	neg	r22
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	8f 4f       	sbci	r24, 0xFF	; 255
    19f8:	9f 4f       	sbci	r25, 0xFF	; 255
    19fa:	08 95       	ret

000019fc <__floatunsisf>:
    19fc:	e8 94       	clt
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <__floatsisf+0x12>

00001a00 <__floatsisf>:
    1a00:	97 fb       	bst	r25, 7
    1a02:	3e f4       	brtc	.+14     	; 0x1a12 <__floatsisf+0x12>
    1a04:	90 95       	com	r25
    1a06:	80 95       	com	r24
    1a08:	70 95       	com	r23
    1a0a:	61 95       	neg	r22
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	99 23       	and	r25, r25
    1a14:	a9 f0       	breq	.+42     	; 0x1a40 <__floatsisf+0x40>
    1a16:	f9 2f       	mov	r31, r25
    1a18:	96 e9       	ldi	r25, 0x96	; 150
    1a1a:	bb 27       	eor	r27, r27
    1a1c:	93 95       	inc	r25
    1a1e:	f6 95       	lsr	r31
    1a20:	87 95       	ror	r24
    1a22:	77 95       	ror	r23
    1a24:	67 95       	ror	r22
    1a26:	b7 95       	ror	r27
    1a28:	f1 11       	cpse	r31, r1
    1a2a:	f8 cf       	rjmp	.-16     	; 0x1a1c <__floatsisf+0x1c>
    1a2c:	fa f4       	brpl	.+62     	; 0x1a6c <__floatsisf+0x6c>
    1a2e:	bb 0f       	add	r27, r27
    1a30:	11 f4       	brne	.+4      	; 0x1a36 <__floatsisf+0x36>
    1a32:	60 ff       	sbrs	r22, 0
    1a34:	1b c0       	rjmp	.+54     	; 0x1a6c <__floatsisf+0x6c>
    1a36:	6f 5f       	subi	r22, 0xFF	; 255
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	16 c0       	rjmp	.+44     	; 0x1a6c <__floatsisf+0x6c>
    1a40:	88 23       	and	r24, r24
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <__floatsisf+0x48>
    1a44:	96 e9       	ldi	r25, 0x96	; 150
    1a46:	11 c0       	rjmp	.+34     	; 0x1a6a <__floatsisf+0x6a>
    1a48:	77 23       	and	r23, r23
    1a4a:	21 f0       	breq	.+8      	; 0x1a54 <__floatsisf+0x54>
    1a4c:	9e e8       	ldi	r25, 0x8E	; 142
    1a4e:	87 2f       	mov	r24, r23
    1a50:	76 2f       	mov	r23, r22
    1a52:	05 c0       	rjmp	.+10     	; 0x1a5e <__floatsisf+0x5e>
    1a54:	66 23       	and	r22, r22
    1a56:	71 f0       	breq	.+28     	; 0x1a74 <__floatsisf+0x74>
    1a58:	96 e8       	ldi	r25, 0x86	; 134
    1a5a:	86 2f       	mov	r24, r22
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	2a f0       	brmi	.+10     	; 0x1a6c <__floatsisf+0x6c>
    1a62:	9a 95       	dec	r25
    1a64:	66 0f       	add	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	da f7       	brpl	.-10     	; 0x1a62 <__floatsisf+0x62>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	96 95       	lsr	r25
    1a70:	87 95       	ror	r24
    1a72:	97 f9       	bld	r25, 7
    1a74:	08 95       	ret

00001a76 <__fp_inf>:
    1a76:	97 f9       	bld	r25, 7
    1a78:	9f 67       	ori	r25, 0x7F	; 127
    1a7a:	80 e8       	ldi	r24, 0x80	; 128
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	08 95       	ret

00001a82 <__fp_nan>:
    1a82:	9f ef       	ldi	r25, 0xFF	; 255
    1a84:	80 ec       	ldi	r24, 0xC0	; 192
    1a86:	08 95       	ret

00001a88 <__fp_pscA>:
    1a88:	00 24       	eor	r0, r0
    1a8a:	0a 94       	dec	r0
    1a8c:	16 16       	cp	r1, r22
    1a8e:	17 06       	cpc	r1, r23
    1a90:	18 06       	cpc	r1, r24
    1a92:	09 06       	cpc	r0, r25
    1a94:	08 95       	ret

00001a96 <__fp_pscB>:
    1a96:	00 24       	eor	r0, r0
    1a98:	0a 94       	dec	r0
    1a9a:	12 16       	cp	r1, r18
    1a9c:	13 06       	cpc	r1, r19
    1a9e:	14 06       	cpc	r1, r20
    1aa0:	05 06       	cpc	r0, r21
    1aa2:	08 95       	ret

00001aa4 <__fp_round>:
    1aa4:	09 2e       	mov	r0, r25
    1aa6:	03 94       	inc	r0
    1aa8:	00 0c       	add	r0, r0
    1aaa:	11 f4       	brne	.+4      	; 0x1ab0 <__fp_round+0xc>
    1aac:	88 23       	and	r24, r24
    1aae:	52 f0       	brmi	.+20     	; 0x1ac4 <__fp_round+0x20>
    1ab0:	bb 0f       	add	r27, r27
    1ab2:	40 f4       	brcc	.+16     	; 0x1ac4 <__fp_round+0x20>
    1ab4:	bf 2b       	or	r27, r31
    1ab6:	11 f4       	brne	.+4      	; 0x1abc <__fp_round+0x18>
    1ab8:	60 ff       	sbrs	r22, 0
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <__fp_round+0x20>
    1abc:	6f 5f       	subi	r22, 0xFF	; 255
    1abe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac4:	08 95       	ret

00001ac6 <__fp_split3>:
    1ac6:	57 fd       	sbrc	r21, 7
    1ac8:	90 58       	subi	r25, 0x80	; 128
    1aca:	44 0f       	add	r20, r20
    1acc:	55 1f       	adc	r21, r21
    1ace:	59 f0       	breq	.+22     	; 0x1ae6 <__fp_splitA+0x10>
    1ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad2:	71 f0       	breq	.+28     	; 0x1af0 <__fp_splitA+0x1a>
    1ad4:	47 95       	ror	r20

00001ad6 <__fp_splitA>:
    1ad6:	88 0f       	add	r24, r24
    1ad8:	97 fb       	bst	r25, 7
    1ada:	99 1f       	adc	r25, r25
    1adc:	61 f0       	breq	.+24     	; 0x1af6 <__fp_splitA+0x20>
    1ade:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae0:	79 f0       	breq	.+30     	; 0x1b00 <__fp_splitA+0x2a>
    1ae2:	87 95       	ror	r24
    1ae4:	08 95       	ret
    1ae6:	12 16       	cp	r1, r18
    1ae8:	13 06       	cpc	r1, r19
    1aea:	14 06       	cpc	r1, r20
    1aec:	55 1f       	adc	r21, r21
    1aee:	f2 cf       	rjmp	.-28     	; 0x1ad4 <__fp_split3+0xe>
    1af0:	46 95       	lsr	r20
    1af2:	f1 df       	rcall	.-30     	; 0x1ad6 <__fp_splitA>
    1af4:	08 c0       	rjmp	.+16     	; 0x1b06 <__fp_splitA+0x30>
    1af6:	16 16       	cp	r1, r22
    1af8:	17 06       	cpc	r1, r23
    1afa:	18 06       	cpc	r1, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	f1 cf       	rjmp	.-30     	; 0x1ae2 <__fp_splitA+0xc>
    1b00:	86 95       	lsr	r24
    1b02:	71 05       	cpc	r23, r1
    1b04:	61 05       	cpc	r22, r1
    1b06:	08 94       	sec
    1b08:	08 95       	ret

00001b0a <__fp_zero>:
    1b0a:	e8 94       	clt

00001b0c <__fp_szero>:
    1b0c:	bb 27       	eor	r27, r27
    1b0e:	66 27       	eor	r22, r22
    1b10:	77 27       	eor	r23, r23
    1b12:	cb 01       	movw	r24, r22
    1b14:	97 f9       	bld	r25, 7
    1b16:	08 95       	ret

00001b18 <__mulsf3>:
    1b18:	0b d0       	rcall	.+22     	; 0x1b30 <__mulsf3x>
    1b1a:	c4 cf       	rjmp	.-120    	; 0x1aa4 <__fp_round>
    1b1c:	b5 df       	rcall	.-150    	; 0x1a88 <__fp_pscA>
    1b1e:	28 f0       	brcs	.+10     	; 0x1b2a <__mulsf3+0x12>
    1b20:	ba df       	rcall	.-140    	; 0x1a96 <__fp_pscB>
    1b22:	18 f0       	brcs	.+6      	; 0x1b2a <__mulsf3+0x12>
    1b24:	95 23       	and	r25, r21
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <__mulsf3+0x12>
    1b28:	a6 cf       	rjmp	.-180    	; 0x1a76 <__fp_inf>
    1b2a:	ab cf       	rjmp	.-170    	; 0x1a82 <__fp_nan>
    1b2c:	11 24       	eor	r1, r1
    1b2e:	ee cf       	rjmp	.-36     	; 0x1b0c <__fp_szero>

00001b30 <__mulsf3x>:
    1b30:	ca df       	rcall	.-108    	; 0x1ac6 <__fp_split3>
    1b32:	a0 f3       	brcs	.-24     	; 0x1b1c <__mulsf3+0x4>

00001b34 <__mulsf3_pse>:
    1b34:	95 9f       	mul	r25, r21
    1b36:	d1 f3       	breq	.-12     	; 0x1b2c <__mulsf3+0x14>
    1b38:	95 0f       	add	r25, r21
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	55 1f       	adc	r21, r21
    1b3e:	62 9f       	mul	r22, r18
    1b40:	f0 01       	movw	r30, r0
    1b42:	72 9f       	mul	r23, r18
    1b44:	bb 27       	eor	r27, r27
    1b46:	f0 0d       	add	r31, r0
    1b48:	b1 1d       	adc	r27, r1
    1b4a:	63 9f       	mul	r22, r19
    1b4c:	aa 27       	eor	r26, r26
    1b4e:	f0 0d       	add	r31, r0
    1b50:	b1 1d       	adc	r27, r1
    1b52:	aa 1f       	adc	r26, r26
    1b54:	64 9f       	mul	r22, r20
    1b56:	66 27       	eor	r22, r22
    1b58:	b0 0d       	add	r27, r0
    1b5a:	a1 1d       	adc	r26, r1
    1b5c:	66 1f       	adc	r22, r22
    1b5e:	82 9f       	mul	r24, r18
    1b60:	22 27       	eor	r18, r18
    1b62:	b0 0d       	add	r27, r0
    1b64:	a1 1d       	adc	r26, r1
    1b66:	62 1f       	adc	r22, r18
    1b68:	73 9f       	mul	r23, r19
    1b6a:	b0 0d       	add	r27, r0
    1b6c:	a1 1d       	adc	r26, r1
    1b6e:	62 1f       	adc	r22, r18
    1b70:	83 9f       	mul	r24, r19
    1b72:	a0 0d       	add	r26, r0
    1b74:	61 1d       	adc	r22, r1
    1b76:	22 1f       	adc	r18, r18
    1b78:	74 9f       	mul	r23, r20
    1b7a:	33 27       	eor	r19, r19
    1b7c:	a0 0d       	add	r26, r0
    1b7e:	61 1d       	adc	r22, r1
    1b80:	23 1f       	adc	r18, r19
    1b82:	84 9f       	mul	r24, r20
    1b84:	60 0d       	add	r22, r0
    1b86:	21 1d       	adc	r18, r1
    1b88:	82 2f       	mov	r24, r18
    1b8a:	76 2f       	mov	r23, r22
    1b8c:	6a 2f       	mov	r22, r26
    1b8e:	11 24       	eor	r1, r1
    1b90:	9f 57       	subi	r25, 0x7F	; 127
    1b92:	50 40       	sbci	r21, 0x00	; 0
    1b94:	8a f0       	brmi	.+34     	; 0x1bb8 <__mulsf3_pse+0x84>
    1b96:	e1 f0       	breq	.+56     	; 0x1bd0 <__mulsf3_pse+0x9c>
    1b98:	88 23       	and	r24, r24
    1b9a:	4a f0       	brmi	.+18     	; 0x1bae <__mulsf3_pse+0x7a>
    1b9c:	ee 0f       	add	r30, r30
    1b9e:	ff 1f       	adc	r31, r31
    1ba0:	bb 1f       	adc	r27, r27
    1ba2:	66 1f       	adc	r22, r22
    1ba4:	77 1f       	adc	r23, r23
    1ba6:	88 1f       	adc	r24, r24
    1ba8:	91 50       	subi	r25, 0x01	; 1
    1baa:	50 40       	sbci	r21, 0x00	; 0
    1bac:	a9 f7       	brne	.-22     	; 0x1b98 <__mulsf3_pse+0x64>
    1bae:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	70 f0       	brcs	.+28     	; 0x1bd0 <__mulsf3_pse+0x9c>
    1bb4:	60 cf       	rjmp	.-320    	; 0x1a76 <__fp_inf>
    1bb6:	aa cf       	rjmp	.-172    	; 0x1b0c <__fp_szero>
    1bb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bba:	ec f3       	brlt	.-6      	; 0x1bb6 <__mulsf3_pse+0x82>
    1bbc:	98 3e       	cpi	r25, 0xE8	; 232
    1bbe:	dc f3       	brlt	.-10     	; 0x1bb6 <__mulsf3_pse+0x82>
    1bc0:	86 95       	lsr	r24
    1bc2:	77 95       	ror	r23
    1bc4:	67 95       	ror	r22
    1bc6:	b7 95       	ror	r27
    1bc8:	f7 95       	ror	r31
    1bca:	e7 95       	ror	r30
    1bcc:	9f 5f       	subi	r25, 0xFF	; 255
    1bce:	c1 f7       	brne	.-16     	; 0x1bc0 <__mulsf3_pse+0x8c>
    1bd0:	fe 2b       	or	r31, r30
    1bd2:	88 0f       	add	r24, r24
    1bd4:	91 1d       	adc	r25, r1
    1bd6:	96 95       	lsr	r25
    1bd8:	87 95       	ror	r24
    1bda:	97 f9       	bld	r25, 7
    1bdc:	08 95       	ret

00001bde <__umulhisi3>:
    1bde:	a2 9f       	mul	r26, r18
    1be0:	b0 01       	movw	r22, r0
    1be2:	b3 9f       	mul	r27, r19
    1be4:	c0 01       	movw	r24, r0
    1be6:	a3 9f       	mul	r26, r19
    1be8:	70 0d       	add	r23, r0
    1bea:	81 1d       	adc	r24, r1
    1bec:	11 24       	eor	r1, r1
    1bee:	91 1d       	adc	r25, r1
    1bf0:	b2 9f       	mul	r27, r18
    1bf2:	70 0d       	add	r23, r0
    1bf4:	81 1d       	adc	r24, r1
    1bf6:	11 24       	eor	r1, r1
    1bf8:	91 1d       	adc	r25, r1
    1bfa:	08 95       	ret

00001bfc <__itoa_ncheck>:
    1bfc:	bb 27       	eor	r27, r27
    1bfe:	4a 30       	cpi	r20, 0x0A	; 10
    1c00:	31 f4       	brne	.+12     	; 0x1c0e <__itoa_ncheck+0x12>
    1c02:	99 23       	and	r25, r25
    1c04:	22 f4       	brpl	.+8      	; 0x1c0e <__itoa_ncheck+0x12>
    1c06:	bd e2       	ldi	r27, 0x2D	; 45
    1c08:	90 95       	com	r25
    1c0a:	81 95       	neg	r24
    1c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <__utoa_common>

00001c10 <__utoa_ncheck>:
    1c10:	bb 27       	eor	r27, r27

00001c12 <__utoa_common>:
    1c12:	fb 01       	movw	r30, r22
    1c14:	55 27       	eor	r21, r21
    1c16:	aa 27       	eor	r26, r26
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	aa 1f       	adc	r26, r26
    1c1e:	a4 17       	cp	r26, r20
    1c20:	10 f0       	brcs	.+4      	; 0x1c26 <__utoa_common+0x14>
    1c22:	a4 1b       	sub	r26, r20
    1c24:	83 95       	inc	r24
    1c26:	50 51       	subi	r21, 0x10	; 16
    1c28:	b9 f7       	brne	.-18     	; 0x1c18 <__utoa_common+0x6>
    1c2a:	a0 5d       	subi	r26, 0xD0	; 208
    1c2c:	aa 33       	cpi	r26, 0x3A	; 58
    1c2e:	08 f0       	brcs	.+2      	; 0x1c32 <__utoa_common+0x20>
    1c30:	a9 5d       	subi	r26, 0xD9	; 217
    1c32:	a1 93       	st	Z+, r26
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	79 f7       	brne	.-34     	; 0x1c16 <__utoa_common+0x4>
    1c38:	b1 11       	cpse	r27, r1
    1c3a:	b1 93       	st	Z+, r27
    1c3c:	11 92       	st	Z+, r1
    1c3e:	cb 01       	movw	r24, r22
    1c40:	00 c0       	rjmp	.+0      	; 0x1c42 <strrev>

00001c42 <strrev>:
    1c42:	dc 01       	movw	r26, r24
    1c44:	fc 01       	movw	r30, r24
    1c46:	67 2f       	mov	r22, r23
    1c48:	71 91       	ld	r23, Z+
    1c4a:	77 23       	and	r23, r23
    1c4c:	e1 f7       	brne	.-8      	; 0x1c46 <strrev+0x4>
    1c4e:	32 97       	sbiw	r30, 0x02	; 2
    1c50:	04 c0       	rjmp	.+8      	; 0x1c5a <strrev+0x18>
    1c52:	7c 91       	ld	r23, X
    1c54:	6d 93       	st	X+, r22
    1c56:	70 83       	st	Z, r23
    1c58:	62 91       	ld	r22, -Z
    1c5a:	ae 17       	cp	r26, r30
    1c5c:	bf 07       	cpc	r27, r31
    1c5e:	c8 f3       	brcs	.-14     	; 0x1c52 <strrev+0x10>
    1c60:	08 95       	ret

00001c62 <_exit>:
    1c62:	f8 94       	cli

00001c64 <__stop_program>:
    1c64:	ff cf       	rjmp	.-2      	; 0x1c64 <__stop_program>
