
001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000125c  000012f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000125c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000466  00800104  00800104  000012f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000265b  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b50  00000000  00000000  00003c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000149d  00000000  00000000  00004777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b8  00000000  00000000  00005c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a0  00000000  00000000  000062cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a37  00000000  00000000  0000696c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000083a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	83 c3       	rjmp	.+1798   	; 0x708 <__ctors_end>
       2:	00 00       	nop
       4:	9e c3       	rjmp	.+1852   	; 0x742 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c3       	rjmp	.+1848   	; 0x742 <__bad_interrupt>
       a:	00 00       	nop
       c:	9a c3       	rjmp	.+1844   	; 0x742 <__bad_interrupt>
       e:	00 00       	nop
      10:	98 c3       	rjmp	.+1840   	; 0x742 <__bad_interrupt>
      12:	00 00       	nop
      14:	96 c3       	rjmp	.+1836   	; 0x742 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c3       	rjmp	.+1832   	; 0x742 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	92 c3       	rjmp	.+1828   	; 0x742 <__bad_interrupt>
      1e:	00 00       	nop
      20:	90 c3       	rjmp	.+1824   	; 0x742 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c6       	rjmp	.+3408   	; 0xd76 <__vector_9>
      26:	00 00       	nop
      28:	8c c3       	rjmp	.+1816   	; 0x742 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8a c3       	rjmp	.+1812   	; 0x742 <__bad_interrupt>
      2e:	00 00       	nop
      30:	88 c3       	rjmp	.+1808   	; 0x742 <__bad_interrupt>
      32:	00 00       	nop
      34:	86 c3       	rjmp	.+1804   	; 0x742 <__bad_interrupt>
      36:	00 00       	nop
      38:	84 c3       	rjmp	.+1800   	; 0x742 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	82 c3       	rjmp	.+1796   	; 0x742 <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c3       	rjmp	.+1792   	; 0x742 <__bad_interrupt>
      42:	00 00       	nop
      44:	7e c3       	rjmp	.+1788   	; 0x742 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c3       	rjmp	.+1784   	; 0x742 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c3       	rjmp	.+1780   	; 0x742 <__bad_interrupt>
      4e:	00 00       	nop
      50:	da c6       	rjmp	.+3508   	; 0xe06 <__vector_20>
      52:	00 00       	nop
      54:	03 c7       	rjmp	.+3590   	; 0xe5c <__vector_21>
      56:	00 00       	nop
      58:	74 c3       	rjmp	.+1768   	; 0x742 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	72 c3       	rjmp	.+1764   	; 0x742 <__bad_interrupt>
      5e:	00 00       	nop
      60:	70 c3       	rjmp	.+1760   	; 0x742 <__bad_interrupt>
      62:	00 00       	nop
      64:	6e c3       	rjmp	.+1756   	; 0x742 <__bad_interrupt>
      66:	00 00       	nop
      68:	6c c3       	rjmp	.+1752   	; 0x742 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6a c3       	rjmp	.+1748   	; 0x742 <__bad_interrupt>
      6e:	00 00       	nop
      70:	68 c3       	rjmp	.+1744   	; 0x742 <__bad_interrupt>
      72:	00 00       	nop
      74:	66 c3       	rjmp	.+1740   	; 0x742 <__bad_interrupt>
      76:	00 00       	nop
      78:	64 c3       	rjmp	.+1736   	; 0x742 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	62 c3       	rjmp	.+1732   	; 0x742 <__bad_interrupt>
      7e:	00 00       	nop
      80:	60 c3       	rjmp	.+1728   	; 0x742 <__bad_interrupt>
      82:	00 00       	nop
      84:	5e c3       	rjmp	.+1724   	; 0x742 <__bad_interrupt>
      86:	00 00       	nop
      88:	5c c3       	rjmp	.+1720   	; 0x742 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	72 69       	ori	r23, 0x92	; 146
      8e:	67 68       	ori	r22, 0x87	; 135
      90:	74 20       	and	r7, r4
      92:	41 44       	sbci	r20, 0x41	; 65
      94:	43 20       	and	r4, r3
      96:	3d 20       	and	r3, r13
      98:	20 20       	and	r2, r0
      9a:	0d 0a       	sbc	r0, r29
      9c:	0a 00       	.word	0x000a	; ????

0000009e <__c.2101>:
      9e:	6c 65 66 74 20 20 41 44 43 20 3d 20 20 20 0d 0a     left  ADC =   ..
      ae:	0a 00                                               ..

000000b0 <__c.2047>:
      b0:	57 61 6e 67 20 53 68 69 68 61 6e 67 0d 0a 00        Wang Shihang...

000000bf <__c.2045>:
      bf:	5a 68 61 6e 67 20 59 75 65 0d 0a 00                 Zhang Yue...

000000cb <__c.2043>:
      cb:	4c 69 20 58 75 65 6a 69 6e 67 0d 0a 00              Li Xuejing...

000000d8 <__c.2041>:
      d8:	4d 65 6d 62 65 72 73 3a 0d 0a 00                    Members:...

000000e3 <__c.2039>:
      e3:	44 44 53 2d 53 69 67 6e 61 6c 67 65 6e 65 72 61     DDS-Signalgenera
      f3:	74 6f 72 0d 0a 00                                   tor...

000000f9 <__c.2037>:
      f9:	50 72 6f 6a 65 63 74 20 30 34 3a 0d 0a 00           Project 04:...

00000107 <font>:
     107:	00 00 00 00 00 00 00 3e 45 51 45 3e 00 3e 6b 6f     .......>EQE>.>ko
     117:	6b 3e 00 1c 3e 7c 3e 1c 00 18 3c 7e 3c 18 00 30     k>..>|>...<~<..0
     127:	36 7f 36 30 00 18 5c 7e 5c 18 00 00 00 00 00 00     6.60..\~\.......
	...
     147:	00 00 00 30 48 4a 36 0e 00 06 29 79 29 06 00 00     ...0HJ6...)y)...
     157:	00 00 00 00 00 60 7e 0a 35 3f 00 2a 1c 36 1c 2a     .....`~.5?.*.6.*
     167:	00 00 7f 3e 1c 08 00 08 1c 3e 7f 00 00 14 36 7f     ...>.....>....6.
     177:	36 14 00 00 5f 00 5f 00 00 06 09 7f 01 7f 00 22     6..._._........"
     187:	4d 55 59 22 00 60 60 60 60 00 00 14 b6 ff b6 14     MUY".````.......
     197:	00 04 06 7f 06 04 00 10 30 7f 30 10 00 08 08 3e     ........0.0....>
     1a7:	1c 08 00 08 1c 3e 08 08 00 78 40 40 40 40 00 08     .....>...x@@@@..
     1b7:	3e 08 3e 08 00 30 3c 3f 3c 30 00 03 0f 3f 0f 03     >.>..0<?<0...?..
	...
     1cf:	06 5f 06 00 00 07 03 00 07 03 00 24 7e 24 7e 24     ._.........$~$~$
     1df:	00 24 2b 6a 12 00 00 63 13 08 64 63 00 36 49 56     .$+j...c..dc.6IV
     1ef:	20 50 00 00 07 03 00 00 00 00 3e 41 00 00 00 00      P........>A....
     1ff:	41 3e 00 00 00 08 3e 1c 3e 08 00 08 08 3e 08 08     A>....>.>....>..
     20f:	00 00 e0 60 00 00 00 08 08 08 08 08 00 00 60 60     ...`..........``
     21f:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     22f:	42 7f 40 00 00 62 51 49 49 46 00 22 49 49 49 36     B.@..bQIIF."III6
     23f:	00 18 14 12 7f 10 00 2f 49 49 49 31 00 3c 4a 49     ......./III1.<JI
     24f:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     25f:	49 49 29 1e 00 00 6c 6c 00 00 00 00 ec 6c 00 00     II)...ll.....l..
     26f:	00 08 14 22 41 00 00 24 24 24 24 24 00 00 41 22     ..."A..$$$$$..A"
     27f:	14 08 00 02 01 59 09 06 00 3e 41 5d 55 1e 00 7e     .....Y...>A]U..~
     28f:	11 11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22     ...~..III6.>AAA"
     29f:	00 7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09     ..AAA>..IIIA....
     2af:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     2bf:	41 7f 41 00 00 30 40 40 40 3f 00 7f 08 14 22 41     A.A..0@@@?...."A
     2cf:	00 7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 02 04     ..@@@@..........
     2df:	08 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     2ef:	41 51 21 5e 00 7f 09 09 19 66 00 26 49 49 49 32     AQ!^.....f.&III2
     2ff:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     30f:	20 1f 00 3f 40 3c 40 3f 00 63 14 08 14 63 00 07      ..?@<@?.c...c..
     31f:	08 70 08 07 00 71 49 45 43 00 00 00 7f 41 41 00     .p...qIEC....AA.
     32f:	00 02 04 08 10 20 00 00 41 41 7f 00 00 04 02 01     ..... ..AA......
     33f:	02 04 80 80 80 80 80 80 00 00 03 07 00 00 00 20     ............... 
     34f:	54 54 54 78 00 7f 44 44 44 38 00 38 44 44 44 28     TTTx..DDD8.8DDD(
     35f:	00 38 44 44 44 7f 00 38 54 54 54 08 00 08 7e 09     .8DDD..8TTT...~.
     36f:	09 00 00 18 a4 a4 a4 7c 00 7f 04 04 78 00 00 00     .......|....x...
     37f:	00 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     .}@..@..}....(D.
     38f:	00 00 00 7f 40 00 00 7c 04 18 04 78 00 7c 04 04     ....@..|...x.|..
     39f:	78 00 00 38 44 44 44 38 00 fc 44 44 44 38 00 38     x..8DDD8..DDD8.8
     3af:	44 44 44 fc 00 44 78 44 04 08 00 08 54 54 54 20     DDD..DxD....TTT 
     3bf:	00 04 3e 44 24 00 00 3c 40 20 7c 00 00 1c 20 40     ..>D$..<@ |... @
     3cf:	20 1c 00 3c 60 30 60 3c 00 6c 10 10 6c 00 00 9c      ..<`0`<.l..l...
     3df:	a0 60 3c 00 00 64 54 54 4c 00 00 08 3e 41 41 00     .`<..dTTL...>AA.
     3ef:	00 00 00 77 00 00 00 00 41 41 3e 08 00 02 01 02     ...w....AA>.....
     3ff:	01 00 00 3c 26 23 26 3c 00 1e a1 e1 21 12 00 3d     ...<&#&<....!..=
     40f:	40 20 7d 00 00 38 54 54 55 09 00 20 55 55 55 78     @ }..8TTU.. UUUx
     41f:	00 20 55 54 55 78 00 20 55 55 54 78 00 20 57 55     . UTUx. UUTx. WU
     42f:	57 78 00 1c a2 e2 22 14 00 38 55 55 55 08 00 38     Wx...."..8UUU..8
     43f:	55 54 55 08 00 38 55 55 54 08 00 00 01 7c 41 00     UTU..8UUT....|A.
     44f:	00 00 01 7d 41 00 00 00 01 7c 40 00 00 70 29 24     ...}A....|@..p)$
     45f:	29 70 00 78 2f 25 2f 78 00 7c 54 54 55 45 00 34     )p.x/%/x.|TTUE.4
     46f:	54 7c 54 58 00 7e 09 7f 49 49 00 38 45 45 39 00     T|TX.~..II.8EE9.
     47f:	00 38 45 44 39 00 00 39 45 44 38 00 00 3c 41 21     .8ED9..9ED8..<A!
     48f:	7d 00 00 3d 41 20 7c 00 00 9c a1 60 3d 00 00 3d     }..=A |....`=..=
     49f:	42 42 3d 00 00 3c 41 40 3d 00 80 70 68 58 38 04     BB=..<A@=..phX8.
     4af:	00 48 3e 49 49 62 00 7e 61 5d 43 3f 00 22 14 08     .H>IIb.~a]C?."..
     4bf:	14 22 00 40 88 7e 09 02 00 20 54 55 55 78 00 00     .".@.~... TUUx..
     4cf:	00 7d 41 00 00 38 44 45 39 00 00 3c 40 21 7d 00     .}A..8DE9..<@!}.
     4df:	00 7a 09 0a 71 00 00 7a 11 22 79 00 00 08 55 55     .z..q..z."y...UU
     4ef:	55 5e 00 4e 51 51 4e 00 00 30 48 4d 40 20 3e 41     U^.NQQN..0HM@ >A
     4ff:	5d 4b 55 3e 04 04 04 04 04 1c 00 17 08 4c 6a 50     ]KU>.........LjP
     50f:	00 17 08 34 2a 78 00 00 30 7d 30 00 00 08 14 00     ...4*x..0}0.....
     51f:	08 14 00 14 08 00 14 08 44 11 44 11 44 11 aa 55     ........D.D.D..U
     52f:	aa 55 aa 55 bb ee bb ee bb ee 00 00 00 ff 00 00     .U.U............
     53f:	08 08 08 ff 00 00 00 70 28 25 29 70 00 70 29 25     .......p(%)p.p)%
     54f:	29 70 00 70 29 25 28 70 3e 41 5d 55 41 3e 0a fb     )p.p)%(p>A]UA>..
     55f:	00 ff 00 00 00 ff 00 ff 00 00 0a fa 02 fe 00 00     ................
     56f:	0a 0b 08 0f 00 00 00 18 24 66 24 00 00 29 2a 7c     ........$f$..)*|
     57f:	2a 29 08 08 08 f8 00 00 00 00 00 0f 08 08 08 08     *)..............
     58f:	08 0f 08 08 08 08 08 f8 08 08 00 00 00 ff 08 08     ................
     59f:	08 08 08 08 08 08 08 08 08 ff 08 08 00 20 56 55     ............. VU
     5af:	56 79 00 70 2a 25 2a 71 00 0f 08 0b 0a 0a 00 fe     Vy.p*%*q........
     5bf:	02 fa 0a 0a 0a 0b 08 0b 0a 0a 0a fa 02 fa 0a 0a     ................
     5cf:	00 ff 00 fb 0a 0a 0a 0a 0a 0a 0a 0a 0a fb 00 fb     ................
     5df:	0a 0a 00 5d 22 22 22 5d 00 22 55 59 30 00 00 08     ...]"""]."UY0...
     5ef:	7f 49 41 3e 00 7c 55 55 55 44 00 7c 55 54 55 44     .IA>.|UUUD.|UTUD
     5ff:	00 7c 55 55 54 44 00 00 00 07 00 00 00 00 44 7d     .|UUTD........D}
     60f:	45 00 00 00 45 7d 45 00 00 00 45 7c 45 00 08 08     E...E}E...E|E...
     61f:	08 0f 00 00 00 00 00 f8 08 08 ff ff ff ff ff ff     ................
     62f:	f0 f0 f0 f0 f0 f0 00 00 00 77 00 00 00 00 45 7d     .........w....E}
     63f:	44 00 0f 0f 0f 0f 0f 0f 00 3c 42 43 3d 00 00 fe     D........<BC=...
     64f:	4a 4a 34 00 00 3c 43 43 3d 00 00 3d 43 42 3c 00     JJ4..<CC=..=CB<.
     65f:	00 32 49 4a 31 00 00 3a 45 46 39 00 00 fc 20 20     .2IJ1..:EF9...  
     66f:	1c 00 00 fe aa 28 10 00 00 ff a5 24 18 00 00 3c     .....(.....$...<
     67f:	40 41 3d 00 00 3c 41 41 3d 00 00 3d 41 40 3c 00     @A=..<AA=..=A@<.
     68f:	00 9c a0 61 3d 00 00 04 08 71 09 04 00 00 02 02     ...a=....q......
     69f:	02 00 00 00 07 03 00 00 00 00 08 08 08 00 00 00     ................
     6af:	24 2e 24 00 00 24 24 24 24 24 05 17 0a 34 2a 78     $.$..$$$$$...4*x
     6bf:	00 06 09 7f 01 7f 00 22 4d 55 59 22 00 08 08 2a     ......."MUY"...*
     6cf:	08 08 00 00 08 18 18 00 00 06 09 09 06 00 00 00     ................
     6df:	08 00 08 00 00 00 08 00 00 00 00 02 0f 00 00 00     ................
     6ef:	00 09 0f 05 00 00 00 09 0d 0a 00 00 00 3c 3c 3c     .............<<<
     6ff:	3c 00 00 00 00 00 00 00 00                          <........

00000708 <__ctors_end>:
     708:	11 24       	eor	r1, r1
     70a:	1f be       	out	0x3f, r1	; 63
     70c:	cf ef       	ldi	r28, 0xFF	; 255
     70e:	d0 e4       	ldi	r29, 0x40	; 64
     710:	de bf       	out	0x3e, r29	; 62
     712:	cd bf       	out	0x3d, r28	; 61

00000714 <__do_copy_data>:
     714:	11 e0       	ldi	r17, 0x01	; 1
     716:	a0 e0       	ldi	r26, 0x00	; 0
     718:	b1 e0       	ldi	r27, 0x01	; 1
     71a:	ec e5       	ldi	r30, 0x5C	; 92
     71c:	f2 e1       	ldi	r31, 0x12	; 18
     71e:	00 e0       	ldi	r16, 0x00	; 0
     720:	0b bf       	out	0x3b, r16	; 59
     722:	02 c0       	rjmp	.+4      	; 0x728 <__do_copy_data+0x14>
     724:	07 90       	elpm	r0, Z+
     726:	0d 92       	st	X+, r0
     728:	a4 30       	cpi	r26, 0x04	; 4
     72a:	b1 07       	cpc	r27, r17
     72c:	d9 f7       	brne	.-10     	; 0x724 <__do_copy_data+0x10>

0000072e <__do_clear_bss>:
     72e:	25 e0       	ldi	r18, 0x05	; 5
     730:	a4 e0       	ldi	r26, 0x04	; 4
     732:	b1 e0       	ldi	r27, 0x01	; 1
     734:	01 c0       	rjmp	.+2      	; 0x738 <.do_clear_bss_start>

00000736 <.do_clear_bss_loop>:
     736:	1d 92       	st	X+, r1

00000738 <.do_clear_bss_start>:
     738:	aa 36       	cpi	r26, 0x6A	; 106
     73a:	b2 07       	cpc	r27, r18
     73c:	e1 f7       	brne	.-8      	; 0x736 <.do_clear_bss_loop>
     73e:	1b d1       	rcall	.+566    	; 0x976 <main>
     740:	8b c5       	rjmp	.+2838   	; 0x1258 <_exit>

00000742 <__bad_interrupt>:
     742:	5e cc       	rjmp	.-1860   	; 0x0 <__vectors>

00000744 <start>:
	adc_display();	
}

void start ()
{
	Backlight_LED(BL_RED_ON | BL_GREEN_ON | BL_BLUE_ON);
     744:	85 e1       	ldi	r24, 0x15	; 21
     746:	84 d2       	rcall	.+1288   	; 0xc50 <Backlight_LED>
	LCD_PutString_P(PSTR("Project 04:\r\n"));
     748:	89 ef       	ldi	r24, 0xF9	; 249
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	36 d2       	rcall	.+1132   	; 0xbba <LCD_PutString_P>
	LCD_PutString_P(PSTR("DDS-Signalgenerator\r\n"));
     74e:	83 ee       	ldi	r24, 0xE3	; 227
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	33 d2       	rcall	.+1126   	; 0xbba <LCD_PutString_P>
	LCD_PutString_P(PSTR("Members:\r\n"));
     754:	88 ed       	ldi	r24, 0xD8	; 216
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	30 d2       	rcall	.+1120   	; 0xbba <LCD_PutString_P>
	LCD_PutString_P(PSTR("Li Xuejing\r\n"));
     75a:	8b ec       	ldi	r24, 0xCB	; 203
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	2d d2       	rcall	.+1114   	; 0xbba <LCD_PutString_P>
	LCD_PutString_P(PSTR("Zhang Yue\r\n"));
     760:	8f eb       	ldi	r24, 0xBF	; 191
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	2a d2       	rcall	.+1108   	; 0xbba <LCD_PutString_P>
	LCD_PutString_P(PSTR("Wang Shihang\r\n"));
     766:	80 eb       	ldi	r24, 0xB0	; 176
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	27 d2       	rcall	.+1102   	; 0xbba <LCD_PutString_P>
	LCD_Update();
     76c:	6d d1       	rcall	.+730    	; 0xa48 <LCD_Update>
	wait_joy_button();
     76e:	67 e0       	ldi	r22, 0x07	; 7
     770:	84 e1       	ldi	r24, 0x14	; 20
     772:	34 d2       	rcall	.+1128   	; 0xbdc <LCD_GotoXY>
     774:	80 e1       	ldi	r24, 0x10	; 16
     776:	c9 d1       	rcall	.+914    	; 0xb0a <LCD_PutChar>
     778:	67 d1       	rcall	.+718    	; 0xa48 <LCD_Update>
     77a:	03 99       	sbic	0x00, 3	; 0
     77c:	fe cf       	rjmp	.-4      	; 0x77a <start+0x36>
     77e:	03 9b       	sbis	0x00, 3	; 0
     780:	fe cf       	rjmp	.-4      	; 0x77e <start+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	89 ef       	ldi	r24, 0xF9	; 249
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	80 40       	sbci	r24, 0x00	; 0
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <start+0x44>
     790:	00 c0       	rjmp	.+0      	; 0x792 <start+0x4e>
     792:	00 00       	nop
     794:	03 99       	sbic	0x00, 3	; 0
     796:	fe cf       	rjmp	.-4      	; 0x794 <start+0x50>
}
     798:	08 95       	ret

0000079a <AD9850_setup>:

void AD9850_setup()
{
	DDRD |= ((1<<DATA)|(1<<WCLK)|(1<<FQUP)|(1<<RESET));		//???AD9850?????????
     79a:	8a b1       	in	r24, 0x0a	; 10
     79c:	8c 65       	ori	r24, 0x5C	; 92
     79e:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<DATA)|(1<<WCLK)|(1<<FQUP)|(1<<RESET));	//????????????
     7a0:	8b b1       	in	r24, 0x0b	; 11
     7a2:	83 7a       	andi	r24, 0xA3	; 163
     7a4:	8b b9       	out	0x0b, r24	; 11
     7a6:	08 95       	ret

000007a8 <AD9850_reset>:
}

void AD9850_reset()
{
	PORTD &= ~((1<<WCLK)|(1<<FQUP));
     7a8:	8b b1       	in	r24, 0x0b	; 11
     7aa:	87 7e       	andi	r24, 0xE7	; 231
     7ac:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<RESET);									//pulse RESET
     7ae:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b0:	8a e1       	ldi	r24, 0x1A	; 26
     7b2:	8a 95       	dec	r24
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <AD9850_reset+0xa>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <AD9850_reset+0x10>
	_delay_us(5);
	PORTD |= (1<<RESET);
     7b8:	5e 9a       	sbi	0x0b, 6	; 11
     7ba:	8a e1       	ldi	r24, 0x1A	; 26
     7bc:	8a 95       	dec	r24
     7be:	f1 f7       	brne	.-4      	; 0x7bc <AD9850_reset+0x14>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <AD9850_reset+0x1a>
	_delay_us(5);
	PORTD &= ~(1<<RESET);
     7c2:	5e 98       	cbi	0x0b, 6	; 11
     7c4:	8a e1       	ldi	r24, 0x1A	; 26
     7c6:	8a 95       	dec	r24
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <AD9850_reset+0x1e>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <AD9850_reset+0x24>
	_delay_us(5);
	
	PORTD &= ~(1<<WCLK);									//pulse WCLK
     7cc:	5b 98       	cbi	0x0b, 3	; 11
     7ce:	8a e1       	ldi	r24, 0x1A	; 26
     7d0:	8a 95       	dec	r24
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <AD9850_reset+0x28>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <AD9850_reset+0x2e>
	_delay_us(5);
	PORTD |= (1<<WCLK);
     7d6:	5b 9a       	sbi	0x0b, 3	; 11
     7d8:	8a e1       	ldi	r24, 0x1A	; 26
     7da:	8a 95       	dec	r24
     7dc:	f1 f7       	brne	.-4      	; 0x7da <AD9850_reset+0x32>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <AD9850_reset+0x38>
	_delay_us(5);
	PORTD &= ~(1<<WCLK);
     7e0:	5b 98       	cbi	0x0b, 3	; 11
     7e2:	8a e1       	ldi	r24, 0x1A	; 26
     7e4:	8a 95       	dec	r24
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <AD9850_reset+0x3c>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <AD9850_reset+0x42>
	_delay_us(5);
	
	PORTD &= ~(1<<DATA);									//make sure DATA pin is LOW
     7ea:	5a 98       	cbi	0x0b, 2	; 11
	
	PORTD &= ~(1<<FQUP);									//pulse FQUP
     7ec:	5c 98       	cbi	0x0b, 4	; 11
     7ee:	8a e1       	ldi	r24, 0x1A	; 26
     7f0:	8a 95       	dec	r24
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <AD9850_reset+0x48>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <AD9850_reset+0x4e>
	_delay_us(5);
	PORTD |= (1<<FQUP);
     7f6:	5c 9a       	sbi	0x0b, 4	; 11
     7f8:	8a e1       	ldi	r24, 0x1A	; 26
     7fa:	8a 95       	dec	r24
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <AD9850_reset+0x52>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <AD9850_reset+0x58>
	_delay_us(5);
	PORTD &= ~(1<<FQUP);
     800:	5c 98       	cbi	0x0b, 4	; 11
     802:	8a e1       	ldi	r24, 0x1A	; 26
     804:	8a 95       	dec	r24
     806:	f1 f7       	brne	.-4      	; 0x804 <AD9850_reset+0x5c>
     808:	00 c0       	rjmp	.+0      	; 0x80a <AD9850_reset+0x62>
     80a:	08 95       	ret

0000080c <AD9850_Setfrequency>:
void AD9850_Setfrequency(double freq)
{
	int i;
	double x;
	x =  pow(2,32)/125;
	freq = freq/1000;
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	4a e7       	ldi	r20, 0x7A	; 122
     812:	54 e4       	ldi	r21, 0x44	; 68
     814:	69 d3       	rcall	.+1746   	; 0xee8 <__divsf3>
	uint32_t tuning_word = freq * x;
     816:	2f e6       	ldi	r18, 0x6F	; 111
     818:	32 e1       	ldi	r19, 0x12	; 18
     81a:	43 e0       	ldi	r20, 0x03	; 3
     81c:	5c e4       	ldi	r21, 0x4C	; 76
     81e:	86 d4       	rcall	.+2316   	; 0x112c <__mulsf3>
     820:	cb d3       	rcall	.+1942   	; 0xfb8 <__fixunssfsi>
	PORTD &= ~(1<<FQUP);
     822:	5c 98       	cbi	0x0b, 4	; 11
	
	//write W0
	uint8_t W0 = tuning_word;
     824:	28 e0       	ldi	r18, 0x08	; 8
     826:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W0&0x01)
     828:	60 ff       	sbrs	r22, 0
     82a:	02 c0       	rjmp	.+4      	; 0x830 <AD9850_Setfrequency+0x24>
		{
			PORTD |= (1<<DATA);
     82c:	5a 9a       	sbi	0x0b, 2	; 11
     82e:	01 c0       	rjmp	.+2      	; 0x832 <AD9850_Setfrequency+0x26>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     830:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     832:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     834:	5b 98       	cbi	0x0b, 3	; 11
		W0 = W0>>1;
     836:	66 95       	lsr	r22
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	31 09       	sbc	r19, r1
	uint32_t tuning_word = freq * x;
	PORTD &= ~(1<<FQUP);
	
	//write W0
	uint8_t W0 = tuning_word;
	for(i=0; i<8; i++ )
     83c:	a9 f7       	brne	.-22     	; 0x828 <AD9850_Setfrequency+0x1c>
		PORTD &= ~(1<<WCLK);
		W0 = W0>>1;
	}
	
	//write W1
	uint8_t W1 = tuning_word>>8;
     83e:	28 e0       	ldi	r18, 0x08	; 8
     840:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W1&0x01)
     842:	70 ff       	sbrs	r23, 0
     844:	02 c0       	rjmp	.+4      	; 0x84a <AD9850_Setfrequency+0x3e>
		{
			PORTD |= (1<<DATA);
     846:	5a 9a       	sbi	0x0b, 2	; 11
     848:	01 c0       	rjmp	.+2      	; 0x84c <AD9850_Setfrequency+0x40>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     84a:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     84c:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     84e:	5b 98       	cbi	0x0b, 3	; 11
		W1 = W1>>1;
     850:	76 95       	lsr	r23
     852:	21 50       	subi	r18, 0x01	; 1
     854:	31 09       	sbc	r19, r1
		W0 = W0>>1;
	}
	
	//write W1
	uint8_t W1 = tuning_word>>8;
	for(i=0; i<8; i++ )
     856:	a9 f7       	brne	.-22     	; 0x842 <AD9850_Setfrequency+0x36>
		PORTD &= ~(1<<WCLK);
		W1 = W1>>1;
	}
	
	//write W2
	uint8_t W2 = tuning_word>>16;
     858:	28 e0       	ldi	r18, 0x08	; 8
     85a:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W2&0x01)
     85c:	80 ff       	sbrs	r24, 0
     85e:	02 c0       	rjmp	.+4      	; 0x864 <AD9850_Setfrequency+0x58>
		{
			PORTD |= (1<<DATA);
     860:	5a 9a       	sbi	0x0b, 2	; 11
     862:	01 c0       	rjmp	.+2      	; 0x866 <AD9850_Setfrequency+0x5a>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     864:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     866:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     868:	5b 98       	cbi	0x0b, 3	; 11
		W2 = W2>>2;
     86a:	86 95       	lsr	r24
     86c:	86 95       	lsr	r24
     86e:	21 50       	subi	r18, 0x01	; 1
     870:	31 09       	sbc	r19, r1
		W1 = W1>>1;
	}
	
	//write W2
	uint8_t W2 = tuning_word>>16;
	for(i=0; i<8; i++ )
     872:	a1 f7       	brne	.-24     	; 0x85c <AD9850_Setfrequency+0x50>
		PORTD &= ~(1<<WCLK);
		W2 = W2>>2;
	}
	
	//write W3
	uint8_t W3 = tuning_word>>24;
     874:	28 e0       	ldi	r18, 0x08	; 8
     876:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0; i<8; i++ )
	{
		if(W3&0x01)
     878:	90 ff       	sbrs	r25, 0
     87a:	02 c0       	rjmp	.+4      	; 0x880 <AD9850_Setfrequency+0x74>
		{
			PORTD |= (1<<DATA);
     87c:	5a 9a       	sbi	0x0b, 2	; 11
     87e:	01 c0       	rjmp	.+2      	; 0x882 <AD9850_Setfrequency+0x76>
		}
		else
		{
			PORTD &= ~(1<<DATA);
     880:	5a 98       	cbi	0x0b, 2	; 11
		}
		PORTD |= (1<<WCLK);
     882:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     884:	5b 98       	cbi	0x0b, 3	; 11
		W3 = W3>>1;
     886:	96 95       	lsr	r25
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	31 09       	sbc	r19, r1
		W2 = W2>>2;
	}
	
	//write W3
	uint8_t W3 = tuning_word>>24;
	for(i=0; i<8; i++ )
     88c:	a9 f7       	brne	.-22     	; 0x878 <AD9850_Setfrequency+0x6c>
     88e:	88 e0       	ldi	r24, 0x08	; 8
     890:	90 e0       	ldi	r25, 0x00	; 0
	
	//write W4
	uint8_t W4 = 0x00;
	for(i=0; i<8; i++ )
	{
		PORTD &= ~(1<<DATA);
     892:	5a 98       	cbi	0x0b, 2	; 11
		PORTD |= (1<<WCLK);
     894:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD &= ~(1<<WCLK);
     896:	5b 98       	cbi	0x0b, 3	; 11
     898:	01 97       	sbiw	r24, 0x01	; 1
		W3 = W3>>1;
	}
	
	//write W4
	uint8_t W4 = 0x00;
	for(i=0; i<8; i++ )
     89a:	d9 f7       	brne	.-10     	; 0x892 <AD9850_Setfrequency+0x86>
		PORTD |= (1<<WCLK);
		PORTD &= ~(1<<WCLK);
		W4 = W4>>1;
	}
	
	PORTD |= (1<<FQUP);
     89c:	5c 9a       	sbi	0x0b, 4	; 11
     89e:	8a e1       	ldi	r24, 0x1A	; 26
     8a0:	8a 95       	dec	r24
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <AD9850_Setfrequency+0x94>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <AD9850_Setfrequency+0x9a>
	_delay_us(5);
	PORTD &= ~(1<<FQUP);
     8a6:	5c 98       	cbi	0x0b, 4	; 11
     8a8:	08 95       	ret

000008aa <adc_init>:

//ADC???
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     8aa:	80 e4       	ldi	r24, 0x40	; 64
     8ac:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = ((1<<ADEN)|(1<<ADPS2)|(1<<ADPS1));
     8b0:	86 e8       	ldi	r24, 0x86	; 134
     8b2:	80 93 7a 00 	sts	0x007A, r24
     8b6:	08 95       	ret

000008b8 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     8b8:	ec e7       	ldi	r30, 0x7C	; 124
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	90 81       	ld	r25, Z
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     8be:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     8c0:	98 7f       	andi	r25, 0xF8	; 248
     8c2:	89 2b       	or	r24, r25
     8c4:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     8c6:	ea e7       	ldi	r30, 0x7A	; 122
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	80 64       	ori	r24, 0x40	; 64
     8ce:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     8d0:	80 81       	ld	r24, Z
     8d2:	86 fd       	sbrc	r24, 6
     8d4:	fd cf       	rjmp	.-6      	; 0x8d0 <adc_read+0x18>
	
	return (ADC);
     8d6:	80 91 78 00 	lds	r24, 0x0078
     8da:	90 91 79 00 	lds	r25, 0x0079
}
     8de:	08 95       	ret

000008e0 <adc_display>:

void adc_display()
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	2a 97       	sbiw	r28, 0x0a	; 10
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
	uint16_t adc_result1, adc_result2;
	char adc_buffer[10];
	LCD_Clear();
     8f4:	f4 d0       	rcall	.+488    	; 0xade <LCD_Clear>
	Backlight_LED(BL_BLUE_ON);
     8f6:	80 e1       	ldi	r24, 0x10	; 16
     8f8:	ab d1       	rcall	.+854    	; 0xc50 <Backlight_LED>
	// initialize adc and lcd
	
	LCD_GotoXY(0,0);
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	6e d1       	rcall	.+732    	; 0xbdc <LCD_GotoXY>
	// display the labels on LCD
	LCD_PutString_P(PSTR("left  ADC =   \r\n\n"));
     900:	8e e9       	ldi	r24, 0x9E	; 158
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	5a d1       	rcall	.+692    	; 0xbba <LCD_PutString_P>
	LCD_PutString_P(PSTR("right ADC =   \r\n\n"));
     906:	8c e8       	ldi	r24, 0x8C	; 140
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	57 d1       	rcall	.+686    	; 0xbba <LCD_PutString_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     90c:	2f ef       	ldi	r18, 0xFF	; 255
     90e:	80 e7       	ldi	r24, 0x70	; 112
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	21 50       	subi	r18, 0x01	; 1
     914:	80 40       	sbci	r24, 0x00	; 0
     916:	90 40       	sbci	r25, 0x00	; 0
     918:	e1 f7       	brne	.-8      	; 0x912 <adc_display+0x32>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <adc_display+0x3c>
     91c:	00 00       	nop
	_delay_ms(50);
	
	while(1)
	{
		adc_result1 = adc_read(1);      // read adc value at PA0
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	cb df       	rcall	.-106    	; 0x8b8 <adc_read>
     922:	7c 01       	movw	r14, r24
		adc_result2 = adc_read(2);      // read adc value at PA1
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	c8 df       	rcall	.-112    	; 0x8b8 <adc_read>
     928:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     92a:	4a e0       	ldi	r20, 0x0A	; 10
     92c:	be 01       	movw	r22, r28
     92e:	6f 5f       	subi	r22, 0xFF	; 255
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	c7 01       	movw	r24, r14
     934:	5e d4       	rcall	.+2236   	; 0x11f2 <__itoa_ncheck>
		
		// now display on lcd
		itoa(adc_result1, adc_buffer, 10);
		LCD_GotoXY(12,0);
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	8c e0       	ldi	r24, 0x0C	; 12
     93a:	50 d1       	rcall	.+672    	; 0xbdc <LCD_GotoXY>
		LCD_PutString(adc_buffer);
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	2e d1       	rcall	.+604    	; 0xb9e <LCD_PutString>
     942:	4a e0       	ldi	r20, 0x0A	; 10
     944:	be 01       	movw	r22, r28
     946:	6f 5f       	subi	r22, 0xFF	; 255
     948:	7f 4f       	sbci	r23, 0xFF	; 255
     94a:	c8 01       	movw	r24, r16
     94c:	52 d4       	rcall	.+2212   	; 0x11f2 <__itoa_ncheck>
		
		itoa(adc_result2, adc_buffer, 10);
		LCD_GotoXY(12,2);
     94e:	62 e0       	ldi	r22, 0x02	; 2
     950:	8c e0       	ldi	r24, 0x0C	; 12
     952:	44 d1       	rcall	.+648    	; 0xbdc <LCD_GotoXY>
		LCD_PutString(adc_buffer);
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	22 d1       	rcall	.+580    	; 0xb9e <LCD_PutString>
		UART_PutString(adc_buffer);
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	b3 d2       	rcall	.+1382   	; 0xec6 <UART_PutString>
		
		LCD_Update();
     960:	73 d0       	rcall	.+230    	; 0xa48 <LCD_Update>
     962:	2f ef       	ldi	r18, 0xFF	; 255
     964:	81 ee       	ldi	r24, 0xE1	; 225
     966:	94 e0       	ldi	r25, 0x04	; 4
     968:	21 50       	subi	r18, 0x01	; 1
     96a:	80 40       	sbci	r24, 0x00	; 0
     96c:	90 40       	sbci	r25, 0x00	; 0
     96e:	e1 f7       	brne	.-8      	; 0x968 <adc_display+0x88>
     970:	00 c0       	rjmp	.+0      	; 0x972 <adc_display+0x92>
     972:	00 00       	nop
     974:	d4 cf       	rjmp	.-88     	; 0x91e <adc_display+0x3e>

00000976 <main>:


int main(void)
{
	// set PA3-PA7 as input and activated internal Pull-Up
	DDRA &= ~((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     976:	81 b1       	in	r24, 0x01	; 1
     978:	87 70       	andi	r24, 0x07	; 7
     97a:	81 b9       	out	0x01, r24	; 1
	PORTA |= ((1<<PINA3)|(1<<PINA4)|(1<<PINA5)|(1<<PINA6)|(1<<PINA7));		// Required for DMM Board 2013
     97c:	82 b1       	in	r24, 0x02	; 2
     97e:	88 6f       	ori	r24, 0xF8	; 248
     980:	82 b9       	out	0x02, r24	; 2
	
	// set PB0-PB3 as output
	DDRB = 0x0F;
     982:	8f e0       	ldi	r24, 0x0F	; 15
     984:	84 b9       	out	0x04, r24	; 4
	// set PB0-PB3 on high-level
	PORTB |= 0x0F;		// Required for DMM Board DMM Board 2013
     986:	85 b1       	in	r24, 0x05	; 5
     988:	8f 60       	ori	r24, 0x0F	; 15
     98a:	85 b9       	out	0x05, r24	; 5
	
	LCD_Init();
     98c:	3d d1       	rcall	.+634    	; 0xc08 <LCD_Init>
    UART_Init();
     98e:	15 d2       	rcall	.+1066   	; 0xdba <UART_Init>
	start ();
     990:	d9 de       	rcall	.-590    	; 0x744 <start>
	
	AD9850_setup();
     992:	03 df       	rcall	.-506    	; 0x79a <AD9850_setup>
	AD9850_reset();
     994:	09 df       	rcall	.-494    	; 0x7a8 <AD9850_reset>
	AD9850_Setfrequency(AD_freq);
     996:	60 91 00 01 	lds	r22, 0x0100
     99a:	70 91 01 01 	lds	r23, 0x0101
     99e:	80 91 02 01 	lds	r24, 0x0102
     9a2:	90 91 03 01 	lds	r25, 0x0103
     9a6:	34 d3       	rcall	.+1640   	; 0x1010 <__floatunsisf>
     9a8:	31 df       	rcall	.-414    	; 0x80c <AD9850_Setfrequency>
	
	adc_init();
     9aa:	7f df       	rcall	.-258    	; 0x8aa <adc_init>
	adc_display();	
     9ac:	99 df       	rcall	.-206    	; 0x8e0 <adc_display>

000009ae <dataflash_init>:
void
dataflash_init (void)
{
  // AT45DB081 doesn't actually need an intialization,
  // only the ChipSelect should be configured as an output.
  DDRB |= (1 << PB4);
     9ae:	24 9a       	sbi	0x04, 4	; 4
  DATAFLASH_Chip_Unselect;
     9b0:	2c 9a       	sbi	0x05, 4	; 5
  SPI_MasterInit();
     9b2:	5a c1       	rjmp	.+692    	; 0xc68 <SPI_MasterInit>
     9b4:	08 95       	ret

000009b6 <_fifo_get>:
uint8_t fifo_get_wait (fifo_t* f)
{
  while (!f->count);
  
  return _fifo_get(f);	
}
     9b6:	fc 01       	movw	r30, r24
     9b8:	a2 81       	ldd	r26, Z+2	; 0x02
     9ba:	b3 81       	ldd	r27, Z+3	; 0x03
     9bc:	9d 01       	movw	r18, r26
     9be:	2f 5f       	subi	r18, 0xFF	; 255
     9c0:	3f 4f       	sbci	r19, 0xFF	; 255
     9c2:	8c 91       	ld	r24, X
     9c4:	96 81       	ldd	r25, Z+6	; 0x06
     9c6:	91 50       	subi	r25, 0x01	; 1
     9c8:	19 f4       	brne	.+6      	; 0x9d0 <_fifo_get+0x1a>
     9ca:	91 81       	ldd	r25, Z+1	; 0x01
     9cc:	29 1b       	sub	r18, r25
     9ce:	31 09       	sbc	r19, r1
     9d0:	33 83       	std	Z+3, r19	; 0x03
     9d2:	22 83       	std	Z+2, r18	; 0x02
     9d4:	96 83       	std	Z+6, r25	; 0x06
     9d6:	2f b7       	in	r18, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	90 81       	ld	r25, Z
     9dc:	91 50       	subi	r25, 0x01	; 1
     9de:	90 83       	st	Z, r25
     9e0:	2f bf       	out	0x3f, r18	; 63
     9e2:	08 95       	ret

000009e4 <fifo_init>:
     9e4:	fc 01       	movw	r30, r24
     9e6:	10 82       	st	Z, r1
     9e8:	75 83       	std	Z+5, r23	; 0x05
     9ea:	64 83       	std	Z+4, r22	; 0x04
     9ec:	73 83       	std	Z+3, r23	; 0x03
     9ee:	62 83       	std	Z+2, r22	; 0x02
     9f0:	41 83       	std	Z+1, r20	; 0x01
     9f2:	47 83       	std	Z+7, r20	; 0x07
     9f4:	46 83       	std	Z+6, r20	; 0x06
     9f6:	08 95       	ret

000009f8 <fifo_get_nowait>:

int16_t fifo_get_nowait (fifo_t* f)
{
  if (!f->count)
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 81       	ld	r18, Z
     9fc:	22 23       	and	r18, r18
     9fe:	19 f0       	breq	.+6      	; 0xa06 <fifo_get_nowait+0xe>
    return -1;
    
  return (int)_fifo_get(f);	
     a00:	da df       	rcall	.-76     	; 0x9b6 <_fifo_get>
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	08 95       	ret
}

int16_t fifo_get_nowait (fifo_t* f)
{
  if (!f->count)
    return -1;
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	9f ef       	ldi	r25, 0xFF	; 255
    
  return (int)_fifo_get(f);	
}
     a0a:	08 95       	ret

00000a0c <fifo_put>:

uint8_t fifo_put (fifo_t* f, const uint8_t data)
{
     a0c:	fc 01       	movw	r30, r24
  if (f->count >= f->size)
     a0e:	90 81       	ld	r25, Z
     a10:	81 81       	ldd	r24, Z+1	; 0x01
     a12:	98 17       	cp	r25, r24
     a14:	b8 f4       	brcc	.+46     	; 0xa44 <fifo_put+0x38>
    return 0;
    
  uint8_t* pwrite = f->pwrite;
     a16:	a4 81       	ldd	r26, Z+4	; 0x04
     a18:	b5 81       	ldd	r27, Z+5	; 0x05
  
  *(pwrite++) = data;
     a1a:	9d 01       	movw	r18, r26
     a1c:	2f 5f       	subi	r18, 0xFF	; 255
     a1e:	3f 4f       	sbci	r19, 0xFF	; 255
     a20:	6c 93       	st	X, r22
  
  uint8_t write2end = f->write2end;
     a22:	87 81       	ldd	r24, Z+7	; 0x07
  
  if (--write2end == 0)
     a24:	81 50       	subi	r24, 0x01	; 1
     a26:	19 f4       	brne	.+6      	; 0xa2e <fifo_put+0x22>
    {
      write2end = f->size;
     a28:	81 81       	ldd	r24, Z+1	; 0x01
      pwrite -= write2end;
     a2a:	28 1b       	sub	r18, r24
     a2c:	31 09       	sbc	r19, r1
    }
  
  f->write2end = write2end;
     a2e:	87 83       	std	Z+7, r24	; 0x07
  f->pwrite = pwrite;
     a30:	35 83       	std	Z+5, r19	; 0x05
     a32:	24 83       	std	Z+4, r18	; 0x04

  uint8_t sreg = SREG;
     a34:	9f b7       	in	r25, 0x3f	; 63
  cli();
     a36:	f8 94       	cli
  f->count++;
     a38:	80 81       	ld	r24, Z
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	80 83       	st	Z, r24
  SREG = sreg;
     a3e:	9f bf       	out	0x3f, r25	; 63
  
  return 1;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	08 95       	ret
}

uint8_t fifo_put (fifo_t* f, const uint8_t data)
{
  if (f->count >= f->size)
    return 0;
     a44:	80 e0       	ldi	r24, 0x00	; 0
  cli();
  f->count++;
  SREG = sreg;
  
  return 1;
}
     a46:	08 95       	ret

00000a48 <LCD_Update>:
  unsigned char x;
  
  for (x = 0; x < 128; x++)
    lcd_framebuffer[line][x] = 0x00;
  
  lcd_frameupdate |= (1 << line);
     a48:	bf 92       	push	r11
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	bf b6       	in	r11, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	0a e0       	ldi	r16, 0x0A	; 10
     a60:	15 e0       	ldi	r17, 0x05	; 5
     a62:	0f 2e       	mov	r0, r31
     a64:	fa e0       	ldi	r31, 0x0A	; 10
     a66:	cf 2e       	mov	r12, r31
     a68:	f1 e0       	ldi	r31, 0x01	; 1
     a6a:	df 2e       	mov	r13, r31
     a6c:	f0 2d       	mov	r31, r0
     a6e:	0f 2e       	mov	r0, r31
     a70:	f7 e0       	ldi	r31, 0x07	; 7
     a72:	ef 2e       	mov	r14, r31
     a74:	f1 2c       	mov	r15, r1
     a76:	f0 2d       	mov	r31, r0
     a78:	80 91 06 01 	lds	r24, 0x0106
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 2c       	mov	r0, r14
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <LCD_Update+0x3e>
     a82:	95 95       	asr	r25
     a84:	87 95       	ror	r24
     a86:	0a 94       	dec	r0
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <LCD_Update+0x3a>
     a8a:	80 ff       	sbrs	r24, 0
     a8c:	13 c0       	rjmp	.+38     	; 0xab4 <LCD_Update+0x6c>
     a8e:	46 98       	cbi	0x08, 6	; 8
     a90:	47 98       	cbi	0x08, 7	; 8
     a92:	8e 2d       	mov	r24, r14
     a94:	80 6b       	ori	r24, 0xB0	; 176
     a96:	fa d0       	rcall	.+500    	; 0xc8c <SPI_MasterTransfer>
     a98:	80 e1       	ldi	r24, 0x10	; 16
     a9a:	f8 d0       	rcall	.+496    	; 0xc8c <SPI_MasterTransfer>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	f6 d0       	rcall	.+492    	; 0xc8c <SPI_MasterTransfer>
     aa0:	47 9a       	sbi	0x08, 7	; 8
     aa2:	e8 01       	movw	r28, r16
     aa4:	c0 58       	subi	r28, 0x80	; 128
     aa6:	d1 09       	sbc	r29, r1
     aa8:	89 91       	ld	r24, Y+
     aaa:	f0 d0       	rcall	.+480    	; 0xc8c <SPI_MasterTransfer>
     aac:	c0 17       	cp	r28, r16
     aae:	d1 07       	cpc	r29, r17
     ab0:	d9 f7       	brne	.-10     	; 0xaa8 <LCD_Update+0x60>
     ab2:	46 9a       	sbi	0x08, 6	; 8
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	e8 1a       	sub	r14, r24
     ab8:	f1 08       	sbc	r15, r1
     aba:	00 58       	subi	r16, 0x80	; 128
     abc:	11 09       	sbc	r17, r1
     abe:	0c 15       	cp	r16, r12
     ac0:	1d 05       	cpc	r17, r13
     ac2:	d1 f6       	brne	.-76     	; 0xa78 <LCD_Update+0x30>
     ac4:	10 92 06 01 	sts	0x0106, r1
     ac8:	bf be       	out	0x3f, r11	; 63
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	08 95       	ret

00000ade <LCD_Clear>:
     ade:	ea e0       	ldi	r30, 0x0A	; 10
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
     ae2:	2a e0       	ldi	r18, 0x0A	; 10
     ae4:	35 e0       	ldi	r19, 0x05	; 5
     ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <LCD_Clear+0x1a>
     ae8:	11 92       	st	Z+, r1
     aea:	e8 17       	cp	r30, r24
     aec:	f9 07       	cpc	r31, r25
     aee:	e1 f7       	brne	.-8      	; 0xae8 <LCD_Clear+0xa>
     af0:	fc 01       	movw	r30, r24
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	21 f0       	breq	.+8      	; 0xb00 <LCD_Clear+0x22>
     af8:	cf 01       	movw	r24, r30
     afa:	80 58       	subi	r24, 0x80	; 128
     afc:	9f 4f       	sbci	r25, 0xFF	; 255
     afe:	f4 cf       	rjmp	.-24     	; 0xae8 <LCD_Clear+0xa>
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	80 93 06 01 	sts	0x0106, r24
     b06:	a0 cf       	rjmp	.-192    	; 0xa48 <LCD_Update>
     b08:	08 95       	ret

00000b0a <LCD_PutChar>:
     b0a:	8a 30       	cpi	r24, 0x0A	; 10
     b0c:	29 f0       	breq	.+10     	; 0xb18 <LCD_PutChar+0xe>
     b0e:	8d 30       	cpi	r24, 0x0D	; 13
     b10:	61 f4       	brne	.+24     	; 0xb2a <LCD_PutChar+0x20>
     b12:	10 92 05 01 	sts	0x0105, r1
     b16:	08 95       	ret
     b18:	80 91 04 01 	lds	r24, 0x0104
     b1c:	87 30       	cpi	r24, 0x07	; 7
     b1e:	08 f0       	brcs	.+2      	; 0xb22 <LCD_PutChar+0x18>
     b20:	3d c0       	rjmp	.+122    	; 0xb9c <LCD_PutChar+0x92>
     b22:	8f 5f       	subi	r24, 0xFF	; 255
     b24:	80 93 04 01 	sts	0x0104, r24
     b28:	08 95       	ret
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	fc 01       	movw	r30, r24
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	e8 0f       	add	r30, r24
     b34:	f9 1f       	adc	r31, r25
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	e9 5f       	subi	r30, 0xF9	; 249
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	80 91 05 01 	lds	r24, 0x0105
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	dc 01       	movw	r26, r24
     b46:	aa 0f       	add	r26, r26
     b48:	bb 1f       	adc	r27, r27
     b4a:	a8 0f       	add	r26, r24
     b4c:	b9 1f       	adc	r27, r25
     b4e:	aa 0f       	add	r26, r26
     b50:	bb 1f       	adc	r27, r27
     b52:	80 91 04 01 	lds	r24, 0x0104
     b56:	90 e8       	ldi	r25, 0x80	; 128
     b58:	89 9f       	mul	r24, r25
     b5a:	a0 0d       	add	r26, r0
     b5c:	b1 1d       	adc	r27, r1
     b5e:	11 24       	eor	r1, r1
     b60:	a6 5f       	subi	r26, 0xF6	; 246
     b62:	be 4f       	sbci	r27, 0xFE	; 254
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	94 91       	lpm	r25, Z
     b68:	9d 93       	st	X+, r25
     b6a:	8f 5f       	subi	r24, 0xFF	; 255
     b6c:	31 96       	adiw	r30, 0x01	; 1
     b6e:	86 30       	cpi	r24, 0x06	; 6
     b70:	d1 f7       	brne	.-12     	; 0xb66 <LCD_PutChar+0x5c>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	00 90 04 01 	lds	r0, 0x0104
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <LCD_PutChar+0x76>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <LCD_PutChar+0x72>
     b84:	90 91 06 01 	lds	r25, 0x0106
     b88:	89 2b       	or	r24, r25
     b8a:	80 93 06 01 	sts	0x0106, r24
     b8e:	80 91 05 01 	lds	r24, 0x0105
     b92:	84 31       	cpi	r24, 0x14	; 20
     b94:	18 f4       	brcc	.+6      	; 0xb9c <LCD_PutChar+0x92>
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	80 93 05 01 	sts	0x0105, r24
     b9c:	08 95       	ret

00000b9e <LCD_PutString>:
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	ec 01       	movw	r28, r24
     ba4:	88 81       	ld	r24, Y
     ba6:	88 23       	and	r24, r24
     ba8:	29 f0       	breq	.+10     	; 0xbb4 <LCD_PutString+0x16>
     baa:	89 91       	ld	r24, Y+
     bac:	ae df       	rcall	.-164    	; 0xb0a <LCD_PutChar>
     bae:	88 81       	ld	r24, Y
     bb0:	81 11       	cpse	r24, r1
     bb2:	fb cf       	rjmp	.-10     	; 0xbaa <LCD_PutString+0xc>
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <LCD_PutString_P>:
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	fc 01       	movw	r30, r24
     bc0:	84 91       	lpm	r24, Z
     bc2:	ef 01       	movw	r28, r30
     bc4:	21 96       	adiw	r28, 0x01	; 1
     bc6:	88 23       	and	r24, r24
     bc8:	31 f0       	breq	.+12     	; 0xbd6 <LCD_PutString_P+0x1c>
     bca:	9f df       	rcall	.-194    	; 0xb0a <LCD_PutChar>
     bcc:	fe 01       	movw	r30, r28
     bce:	84 91       	lpm	r24, Z
     bd0:	21 96       	adiw	r28, 0x01	; 1
     bd2:	81 11       	cpse	r24, r1
     bd4:	fa cf       	rjmp	.-12     	; 0xbca <LCD_PutString_P+0x10>
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <LCD_GotoXY>:
     bdc:	80 93 05 01 	sts	0x0105, r24
     be0:	60 93 04 01 	sts	0x0104, r22
     be4:	08 95       	ret

00000be6 <Backlight_Off>:
}

void
Backlight_Off (void)
{
  TWI_Start();
     be6:	6b d0       	rcall	.+214    	; 0xcbe <TWI_Start>
  TWI_Address_RW(0xc4);
     be8:	84 ec       	ldi	r24, 0xC4	; 196
     bea:	84 d0       	rcall	.+264    	; 0xcf4 <TWI_Address_RW>
  TWI_Write(0x11);
     bec:	81 e1       	ldi	r24, 0x11	; 17
     bee:	9f d0       	rcall	.+318    	; 0xd2e <TWI_Write>
  TWI_Write(0x00);
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	9d d0       	rcall	.+314    	; 0xd2e <TWI_Write>
  TWI_Write(0x00);
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	9b d0       	rcall	.+310    	; 0xd2e <TWI_Write>
  TWI_Write(0x00);
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	99 d0       	rcall	.+306    	; 0xd2e <TWI_Write>
  TWI_Write(0x00);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	97 d0       	rcall	.+302    	; 0xd2e <TWI_Write>
  TWI_Write(0x00);
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	95 d0       	rcall	.+298    	; 0xd2e <TWI_Write>
  TWI_Stop();
     c04:	b1 c0       	rjmp	.+354    	; 0xd68 <TWI_Stop>
     c06:	08 95       	ret

00000c08 <LCD_Init>:
  SPI_MasterTransfer(data);
}

void
LCD_Init (void)
{
     c08:	cf 93       	push	r28
  SPI_MasterInit();
     c0a:	2e d0       	rcall	.+92     	; 0xc68 <SPI_MasterInit>

  /* Set Register Select and Chip Select as Output */
  DDRC |= (1<<PC7)|(1<<PC6);
     c0c:	87 b1       	in	r24, 0x07	; 7
     c0e:	80 6c       	ori	r24, 0xC0	; 192
     c10:	87 b9       	out	0x07, r24	; 7
  
  /* Backup Status Register and disable Interrupts */
  uint8_t sreg = SREG;
     c12:	cf b7       	in	r28, 0x3f	; 63
  cli();
     c14:	f8 94       	cli
  
  /* Starting Init Command Sequence */
  LCD_Command_Mode;
     c16:	47 98       	cbi	0x08, 7	; 8
  LCD_Chip_Select;
     c18:	46 98       	cbi	0x08, 6	; 8
uint8_t lcd_texty = 0;

void
LCD_Send (uint8_t data)
{
  SPI_MasterTransfer(data);
     c1a:	82 ee       	ldi	r24, 0xE2	; 226
     c1c:	37 d0       	rcall	.+110    	; 0xc8c <SPI_MasterTransfer>
     c1e:	83 ea       	ldi	r24, 0xA3	; 163
     c20:	35 d0       	rcall	.+106    	; 0xc8c <SPI_MasterTransfer>
     c22:	81 e8       	ldi	r24, 0x81	; 129
     c24:	33 d0       	rcall	.+102    	; 0xc8c <SPI_MasterTransfer>
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	31 d0       	rcall	.+98     	; 0xc8c <SPI_MasterTransfer>
     c2a:	80 ea       	ldi	r24, 0xA0	; 160
     c2c:	2f d0       	rcall	.+94     	; 0xc8c <SPI_MasterTransfer>
     c2e:	88 ec       	ldi	r24, 0xC8	; 200
     c30:	2d d0       	rcall	.+90     	; 0xc8c <SPI_MasterTransfer>
     c32:	85 e2       	ldi	r24, 0x25	; 37
     c34:	2b d0       	rcall	.+86     	; 0xc8c <SPI_MasterTransfer>
     c36:	8f e2       	ldi	r24, 0x2F	; 47
     c38:	29 d0       	rcall	.+82     	; 0xc8c <SPI_MasterTransfer>
     c3a:	8f ea       	ldi	r24, 0xAF	; 175
     c3c:	27 d0       	rcall	.+78     	; 0xc8c <SPI_MasterTransfer>
  LCD_Send(LCD_COMMON_OUTPUT_MODE_REVERSE);
  LCD_Send(LCD_V5_VOLTAGE_REGULATOR | 0x05);
  LCD_Send(LCD_POWER_CONTROLLER_SET | 0x07);
  LCD_Send(LCD_DISPLAY_ON);
  
  LCD_Chip_Unselect;
     c3e:	46 9a       	sbi	0x08, 6	; 8
  LCD_Data_Mode;
     c40:	47 9a       	sbi	0x08, 7	; 8
  
  LCD_Clear();
     c42:	4d df       	rcall	.-358    	; 0xade <LCD_Clear>
  
  /* Restore Status Register */
  SREG = sreg;
     c44:	cf bf       	out	0x3f, r28	; 63
  
  // Initialize TWI for Backlight Control
  TWI_Init();
     c46:	27 d0       	rcall	.+78     	; 0xc96 <TWI_Init>
  Backlight_Off();
     c48:	ce df       	rcall	.-100    	; 0xbe6 <Backlight_Off>
  
  // Initialize Dataflash
  dataflash_init();
     c4a:	b1 de       	rcall	.-670    	; 0x9ae <dataflash_init>
}
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <Backlight_LED>:
  TWI_Stop();
}

void
Backlight_LED (uint8_t led_selector)
{
     c50:	cf 93       	push	r28
     c52:	c8 2f       	mov	r28, r24
  TWI_Start();
     c54:	34 d0       	rcall	.+104    	; 0xcbe <TWI_Start>
  TWI_Address_RW(0xc4);
     c56:	84 ec       	ldi	r24, 0xC4	; 196
     c58:	4d d0       	rcall	.+154    	; 0xcf4 <TWI_Address_RW>
  TWI_Write(0x15);
     c5a:	85 e1       	ldi	r24, 0x15	; 21
     c5c:	68 d0       	rcall	.+208    	; 0xd2e <TWI_Write>
  TWI_Write(led_selector);
     c5e:	8c 2f       	mov	r24, r28
     c60:	66 d0       	rcall	.+204    	; 0xd2e <TWI_Write>
  TWI_Stop();
     c62:	82 d0       	rcall	.+260    	; 0xd68 <TWI_Stop>
}
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <SPI_MasterInit>:

void
SPI_MasterInit (void)
{
  /* Check if already initialized */
  if (!(SPI_flag & 1))
     c68:	80 91 07 01 	lds	r24, 0x0107
     c6c:	80 fd       	sbrc	r24, 0
     c6e:	0d c0       	rjmp	.+26     	; 0xc8a <SPI_MasterInit+0x22>
    {
      /* Set MOSI and SCK output */
      DDRB |= (1<<PB5)|(1<<PB7);
     c70:	84 b1       	in	r24, 0x04	; 4
     c72:	80 6a       	ori	r24, 0xA0	; 160
     c74:	84 b9       	out	0x04, r24	; 4
      
      /* Enable SPI, Master */
      SPCR = (1<<SPE)|(1<<MSTR);
     c76:	80 e5       	ldi	r24, 0x50	; 80
     c78:	8c bd       	out	0x2c, r24	; 44
      
      /* Set Double SPI Speed Bit, SPI clock will be fck/2 */
      SPSR = (1<<SPI2X);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	8d bd       	out	0x2d, r24	; 45
      
      /* Set SPI Init Flag */
      SPI_flag = 1;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	90 93 08 01 	sts	0x0108, r25
     c86:	80 93 07 01 	sts	0x0107, r24
     c8a:	08 95       	ret

00000c8c <SPI_MasterTransfer>:

void
SPI_MasterTransfer (unsigned char c)
{
  /* Start transmission */
  SPDR = c;
     c8c:	8e bd       	out	0x2e, r24	; 46
  
  /* Wait for transmission complete */
  while (!(SPSR & (1<<SPIF)));
     c8e:	0d b4       	in	r0, 0x2d	; 45
     c90:	07 fe       	sbrs	r0, 7
     c92:	fd cf       	rjmp	.-6      	; 0xc8e <SPI_MasterTransfer+0x2>
}
     c94:	08 95       	ret

00000c96 <TWI_Init>:

void
TWI_Init (void)
{
  // Port Setup
  DDRC &= ~((1 << PC0)|(1 << PC1));
     c96:	87 b1       	in	r24, 0x07	; 7
     c98:	8c 7f       	andi	r24, 0xFC	; 252
     c9a:	87 b9       	out	0x07, r24	; 7
  PORTC |= (1 << PC0)|(1 << PC1);
     c9c:	88 b1       	in	r24, 0x08	; 8
     c9e:	83 60       	ori	r24, 0x03	; 3
     ca0:	88 b9       	out	0x08, r24	; 8
  
  // Setup TWI Speed to 400kHZ (TWPS = 1)
  TWBR = 3;
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	80 93 b8 00 	sts	0x00B8, r24
  
  // Using TIMER2 to detect timeout
  TCCR2B = (7 << CS20);
     ca8:	87 e0       	ldi	r24, 0x07	; 7
     caa:	80 93 b1 00 	sts	0x00B1, r24
  TIMSK2 = (1 << OCIE2A);
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	80 93 70 00 	sts	0x0070, r24
  
  OCR2A = 125;
     cb4:	8d e7       	ldi	r24, 0x7D	; 125
     cb6:	80 93 b3 00 	sts	0x00B3, r24
  
  // Interrupts REQUIRED!
  sei();
     cba:	78 94       	sei
     cbc:	08 95       	ret

00000cbe <TWI_Start>:
}

int16_t
TWI_Start (void)
{
  twi_timeout = 10;
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	80 93 09 01 	sts	0x0109, r24
  
  TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
     cc4:	84 ea       	ldi	r24, 0xA4	; 164
     cc6:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     cca:	ec eb       	ldi	r30, 0xBC	; 188
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 91 09 01 	lds	r24, 0x0109
     cd2:	88 23       	and	r24, r24
     cd4:	19 f0       	breq	.+6      	; 0xcdc <TWI_Start+0x1e>
     cd6:	80 81       	ld	r24, Z
     cd8:	88 23       	and	r24, r24
     cda:	cc f7       	brge	.-14     	; 0xcce <TWI_Start+0x10>
  
  if (twi_timeout)
     cdc:	80 91 09 01 	lds	r24, 0x0109
     ce0:	88 23       	and	r24, r24
     ce2:	29 f0       	breq	.+10     	; 0xcee <TWI_Start+0x30>
    return (int16_t) (TWSR & 0xf8);
     ce4:	80 91 b9 00 	lds	r24, 0x00B9
     ce8:	88 7f       	andi	r24, 0xF8	; 248
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	08 95       	ret
  else
    return -1;
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
}
     cf2:	08 95       	ret

00000cf4 <TWI_Address_RW>:

int16_t
TWI_Address_RW (uint8_t address)
{
  twi_timeout = 10;
     cf4:	9a e0       	ldi	r25, 0x0A	; 10
     cf6:	90 93 09 01 	sts	0x0109, r25
  
  TWDR = address;
     cfa:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
     cfe:	84 e8       	ldi	r24, 0x84	; 132
     d00:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     d04:	ec eb       	ldi	r30, 0xBC	; 188
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 91 09 01 	lds	r24, 0x0109
     d0c:	88 23       	and	r24, r24
     d0e:	19 f0       	breq	.+6      	; 0xd16 <TWI_Address_RW+0x22>
     d10:	80 81       	ld	r24, Z
     d12:	88 23       	and	r24, r24
     d14:	cc f7       	brge	.-14     	; 0xd08 <TWI_Address_RW+0x14>
  
  if (twi_timeout)
     d16:	80 91 09 01 	lds	r24, 0x0109
     d1a:	88 23       	and	r24, r24
     d1c:	29 f0       	breq	.+10     	; 0xd28 <TWI_Address_RW+0x34>
    return (int16_t) (TWSR & 0xf8);
     d1e:	80 91 b9 00 	lds	r24, 0x00B9
     d22:	88 7f       	andi	r24, 0xF8	; 248
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	08 95       	ret
  else
    return -1;
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	9f ef       	ldi	r25, 0xFF	; 255
}
     d2c:	08 95       	ret

00000d2e <TWI_Write>:

int16_t
TWI_Write (uint8_t data)
{
  twi_timeout = 10;
     d2e:	9a e0       	ldi	r25, 0x0A	; 10
     d30:	90 93 09 01 	sts	0x0109, r25
  
  TWDR = data;
     d34:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = (1 << TWINT)|(1 << TWEN);
     d38:	84 e8       	ldi	r24, 0x84	; 132
     d3a:	80 93 bc 00 	sts	0x00BC, r24
  while ((twi_timeout) && (!(TWCR & (1 << TWINT))));
     d3e:	ec eb       	ldi	r30, 0xBC	; 188
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 91 09 01 	lds	r24, 0x0109
     d46:	88 23       	and	r24, r24
     d48:	19 f0       	breq	.+6      	; 0xd50 <TWI_Write+0x22>
     d4a:	80 81       	ld	r24, Z
     d4c:	88 23       	and	r24, r24
     d4e:	cc f7       	brge	.-14     	; 0xd42 <TWI_Write+0x14>
  
  if (twi_timeout)
     d50:	80 91 09 01 	lds	r24, 0x0109
     d54:	88 23       	and	r24, r24
     d56:	29 f0       	breq	.+10     	; 0xd62 <TWI_Write+0x34>
    return (int16_t) (TWSR & 0xf8);
     d58:	80 91 b9 00 	lds	r24, 0x00B9
     d5c:	88 7f       	andi	r24, 0xF8	; 248
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	08 95       	ret
  else
    return -1;
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	9f ef       	ldi	r25, 0xFF	; 255
}
     d66:	08 95       	ret

00000d68 <TWI_Stop>:

void
TWI_Stop (void)
{
  twi_timeout = 10;
     d68:	8a e0       	ldi	r24, 0x0A	; 10
     d6a:	80 93 09 01 	sts	0x0109, r24
  
  TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);
     d6e:	84 e9       	ldi	r24, 0x94	; 148
     d70:	80 93 bc 00 	sts	0x00BC, r24
     d74:	08 95       	ret

00000d76 <__vector_9>:
}

// ISR will be called every 8ms to decrease twi_timeout if > 0
ISR (TIMER2_COMPA_vect)
{
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	0b b6       	in	r0, 0x3b	; 59
     d82:	0f 92       	push	r0
     d84:	8f 93       	push	r24
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
  OCR2A += 125;
     d8a:	e3 eb       	ldi	r30, 0xB3	; 179
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	83 58       	subi	r24, 0x83	; 131
     d92:	80 83       	st	Z, r24

  if (twi_timeout)
     d94:	80 91 09 01 	lds	r24, 0x0109
     d98:	88 23       	and	r24, r24
     d9a:	29 f0       	breq	.+10     	; 0xda6 <__vector_9+0x30>
    twi_timeout--;
     d9c:	80 91 09 01 	lds	r24, 0x0109
     da0:	81 50       	subi	r24, 0x01	; 1
     da2:	80 93 09 01 	sts	0x0109, r24
}
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	8f 91       	pop	r24
     dac:	0f 90       	pop	r0
     dae:	0b be       	out	0x3b, r0	; 59
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <UART_Init>:

uint8_t
UART_GetChar_Wait (void)
{
  return fifo_get_wait(&uart_infifo);
}
     dba:	8f b7       	in	r24, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	27 e6       	ldi	r18, 0x67	; 103
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	30 93 c5 00 	sts	0x00C5, r19
     dc6:	20 93 c4 00 	sts	0x00C4, r18
     dca:	98 e9       	ldi	r25, 0x98	; 152
     dcc:	90 93 c1 00 	sts	0x00C1, r25
     dd0:	90 ec       	ldi	r25, 0xC0	; 192
     dd2:	90 93 c0 00 	sts	0x00C0, r25
     dd6:	8f bf       	out	0x3f, r24	; 63
     dd8:	40 e1       	ldi	r20, 0x10	; 16
     dda:	6a e5       	ldi	r22, 0x5A	; 90
     ddc:	75 e0       	ldi	r23, 0x05	; 5
     dde:	82 e5       	ldi	r24, 0x52	; 82
     de0:	95 e0       	ldi	r25, 0x05	; 5
     de2:	00 de       	rcall	.-1024   	; 0x9e4 <fifo_init>
     de4:	40 e4       	ldi	r20, 0x40	; 64
     de6:	62 e1       	ldi	r22, 0x12	; 18
     de8:	75 e0       	ldi	r23, 0x05	; 5
     dea:	8a e0       	ldi	r24, 0x0A	; 10
     dec:	95 e0       	ldi	r25, 0x05	; 5
     dee:	fa cd       	rjmp	.-1036   	; 0x9e4 <fifo_init>
     df0:	08 95       	ret

00000df2 <UART_PutChar>:
     df2:	68 2f       	mov	r22, r24
     df4:	8a e0       	ldi	r24, 0x0A	; 10
     df6:	95 e0       	ldi	r25, 0x05	; 5
     df8:	09 de       	rcall	.-1006   	; 0xa0c <fifo_put>
     dfa:	e1 ec       	ldi	r30, 0xC1	; 193
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	90 81       	ld	r25, Z
     e00:	90 62       	ori	r25, 0x20	; 32
     e02:	90 83       	st	Z, r25
     e04:	08 95       	ret

00000e06 <__vector_20>:
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	11 24       	eor	r1, r1
     e10:	0b b6       	in	r0, 0x3b	; 59
     e12:	0f 92       	push	r0
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	60 91 c6 00 	lds	r22, 0x00C6
     e30:	82 e5       	ldi	r24, 0x52	; 82
     e32:	95 e0       	ldi	r25, 0x05	; 5
     e34:	eb dd       	rcall	.-1066   	; 0xa0c <fifo_put>
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0b be       	out	0x3b, r0	; 59
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_21>:
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	0b b6       	in	r0, 0x3b	; 59
     e68:	0f 92       	push	r0
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
     e82:	80 91 0a 05 	lds	r24, 0x050A
     e86:	88 23       	and	r24, r24
     e88:	31 f0       	breq	.+12     	; 0xe96 <__vector_21+0x3a>
     e8a:	8a e0       	ldi	r24, 0x0A	; 10
     e8c:	95 e0       	ldi	r25, 0x05	; 5
     e8e:	b4 dd       	rcall	.-1176   	; 0x9f8 <fifo_get_nowait>
     e90:	80 93 c6 00 	sts	0x00C6, r24
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <__vector_21+0x44>
     e96:	e1 ec       	ldi	r30, 0xC1	; 193
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 7d       	andi	r24, 0xDF	; 223
     e9e:	80 83       	st	Z, r24
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0b be       	out	0x3b, r0	; 59
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <UART_PutString>:

void
UART_PutString (const char *s)
{
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ec 01       	movw	r28, r24
     ed0:	8e 01       	movw	r16, r28
  do
    {
      UART_PutChar(*s);
     ed2:	89 91       	ld	r24, Y+
     ed4:	8e df       	rcall	.-228    	; 0xdf2 <UART_PutChar>
    }
  while (*(s++));
     ed6:	f8 01       	movw	r30, r16
     ed8:	80 81       	ld	r24, Z
     eda:	81 11       	cpse	r24, r1
     edc:	f9 cf       	rjmp	.-14     	; 0xed0 <UART_PutString+0xa>
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	08 95       	ret

00000ee8 <__divsf3>:
     ee8:	0c d0       	rcall	.+24     	; 0xf02 <__divsf3x>
     eea:	e6 c0       	rjmp	.+460    	; 0x10b8 <__fp_round>
     eec:	de d0       	rcall	.+444    	; 0x10aa <__fp_pscB>
     eee:	40 f0       	brcs	.+16     	; 0xf00 <__divsf3+0x18>
     ef0:	d5 d0       	rcall	.+426    	; 0x109c <__fp_pscA>
     ef2:	30 f0       	brcs	.+12     	; 0xf00 <__divsf3+0x18>
     ef4:	21 f4       	brne	.+8      	; 0xefe <__divsf3+0x16>
     ef6:	5f 3f       	cpi	r21, 0xFF	; 255
     ef8:	19 f0       	breq	.+6      	; 0xf00 <__divsf3+0x18>
     efa:	c7 c0       	rjmp	.+398    	; 0x108a <__fp_inf>
     efc:	51 11       	cpse	r21, r1
     efe:	10 c1       	rjmp	.+544    	; 0x1120 <__fp_szero>
     f00:	ca c0       	rjmp	.+404    	; 0x1096 <__fp_nan>

00000f02 <__divsf3x>:
     f02:	eb d0       	rcall	.+470    	; 0x10da <__fp_split3>
     f04:	98 f3       	brcs	.-26     	; 0xeec <__divsf3+0x4>

00000f06 <__divsf3_pse>:
     f06:	99 23       	and	r25, r25
     f08:	c9 f3       	breq	.-14     	; 0xefc <__divsf3+0x14>
     f0a:	55 23       	and	r21, r21
     f0c:	b1 f3       	breq	.-20     	; 0xefa <__divsf3+0x12>
     f0e:	95 1b       	sub	r25, r21
     f10:	55 0b       	sbc	r21, r21
     f12:	bb 27       	eor	r27, r27
     f14:	aa 27       	eor	r26, r26
     f16:	62 17       	cp	r22, r18
     f18:	73 07       	cpc	r23, r19
     f1a:	84 07       	cpc	r24, r20
     f1c:	38 f0       	brcs	.+14     	; 0xf2c <__divsf3_pse+0x26>
     f1e:	9f 5f       	subi	r25, 0xFF	; 255
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	44 1f       	adc	r20, r20
     f28:	aa 1f       	adc	r26, r26
     f2a:	a9 f3       	breq	.-22     	; 0xf16 <__divsf3_pse+0x10>
     f2c:	33 d0       	rcall	.+102    	; 0xf94 <__divsf3_pse+0x8e>
     f2e:	0e 2e       	mov	r0, r30
     f30:	3a f0       	brmi	.+14     	; 0xf40 <__divsf3_pse+0x3a>
     f32:	e0 e8       	ldi	r30, 0x80	; 128
     f34:	30 d0       	rcall	.+96     	; 0xf96 <__divsf3_pse+0x90>
     f36:	91 50       	subi	r25, 0x01	; 1
     f38:	50 40       	sbci	r21, 0x00	; 0
     f3a:	e6 95       	lsr	r30
     f3c:	00 1c       	adc	r0, r0
     f3e:	ca f7       	brpl	.-14     	; 0xf32 <__divsf3_pse+0x2c>
     f40:	29 d0       	rcall	.+82     	; 0xf94 <__divsf3_pse+0x8e>
     f42:	fe 2f       	mov	r31, r30
     f44:	27 d0       	rcall	.+78     	; 0xf94 <__divsf3_pse+0x8e>
     f46:	66 0f       	add	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	88 1f       	adc	r24, r24
     f4c:	bb 1f       	adc	r27, r27
     f4e:	26 17       	cp	r18, r22
     f50:	37 07       	cpc	r19, r23
     f52:	48 07       	cpc	r20, r24
     f54:	ab 07       	cpc	r26, r27
     f56:	b0 e8       	ldi	r27, 0x80	; 128
     f58:	09 f0       	breq	.+2      	; 0xf5c <__divsf3_pse+0x56>
     f5a:	bb 0b       	sbc	r27, r27
     f5c:	80 2d       	mov	r24, r0
     f5e:	bf 01       	movw	r22, r30
     f60:	ff 27       	eor	r31, r31
     f62:	93 58       	subi	r25, 0x83	; 131
     f64:	5f 4f       	sbci	r21, 0xFF	; 255
     f66:	2a f0       	brmi	.+10     	; 0xf72 <__divsf3_pse+0x6c>
     f68:	9e 3f       	cpi	r25, 0xFE	; 254
     f6a:	51 05       	cpc	r21, r1
     f6c:	68 f0       	brcs	.+26     	; 0xf88 <__divsf3_pse+0x82>
     f6e:	8d c0       	rjmp	.+282    	; 0x108a <__fp_inf>
     f70:	d7 c0       	rjmp	.+430    	; 0x1120 <__fp_szero>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	ec f3       	brlt	.-6      	; 0xf70 <__divsf3_pse+0x6a>
     f76:	98 3e       	cpi	r25, 0xE8	; 232
     f78:	dc f3       	brlt	.-10     	; 0xf70 <__divsf3_pse+0x6a>
     f7a:	86 95       	lsr	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	b7 95       	ror	r27
     f82:	f7 95       	ror	r31
     f84:	9f 5f       	subi	r25, 0xFF	; 255
     f86:	c9 f7       	brne	.-14     	; 0xf7a <__divsf3_pse+0x74>
     f88:	88 0f       	add	r24, r24
     f8a:	91 1d       	adc	r25, r1
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret
     f94:	e1 e0       	ldi	r30, 0x01	; 1
     f96:	66 0f       	add	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	88 1f       	adc	r24, r24
     f9c:	bb 1f       	adc	r27, r27
     f9e:	62 17       	cp	r22, r18
     fa0:	73 07       	cpc	r23, r19
     fa2:	84 07       	cpc	r24, r20
     fa4:	ba 07       	cpc	r27, r26
     fa6:	20 f0       	brcs	.+8      	; 0xfb0 <__divsf3_pse+0xaa>
     fa8:	62 1b       	sub	r22, r18
     faa:	73 0b       	sbc	r23, r19
     fac:	84 0b       	sbc	r24, r20
     fae:	ba 0b       	sbc	r27, r26
     fb0:	ee 1f       	adc	r30, r30
     fb2:	88 f7       	brcc	.-30     	; 0xf96 <__divsf3_pse+0x90>
     fb4:	e0 95       	com	r30
     fb6:	08 95       	ret

00000fb8 <__fixunssfsi>:
     fb8:	98 d0       	rcall	.+304    	; 0x10ea <__fp_splitA>
     fba:	88 f0       	brcs	.+34     	; 0xfde <__fixunssfsi+0x26>
     fbc:	9f 57       	subi	r25, 0x7F	; 127
     fbe:	90 f0       	brcs	.+36     	; 0xfe4 <__fixunssfsi+0x2c>
     fc0:	b9 2f       	mov	r27, r25
     fc2:	99 27       	eor	r25, r25
     fc4:	b7 51       	subi	r27, 0x17	; 23
     fc6:	a0 f0       	brcs	.+40     	; 0xff0 <__fixunssfsi+0x38>
     fc8:	d1 f0       	breq	.+52     	; 0xffe <__fixunssfsi+0x46>
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	1a f0       	brmi	.+6      	; 0xfda <__fixunssfsi+0x22>
     fd4:	ba 95       	dec	r27
     fd6:	c9 f7       	brne	.-14     	; 0xfca <__fixunssfsi+0x12>
     fd8:	12 c0       	rjmp	.+36     	; 0xffe <__fixunssfsi+0x46>
     fda:	b1 30       	cpi	r27, 0x01	; 1
     fdc:	81 f0       	breq	.+32     	; 0xffe <__fixunssfsi+0x46>
     fde:	9f d0       	rcall	.+318    	; 0x111e <__fp_zero>
     fe0:	b1 e0       	ldi	r27, 0x01	; 1
     fe2:	08 95       	ret
     fe4:	9c c0       	rjmp	.+312    	; 0x111e <__fp_zero>
     fe6:	67 2f       	mov	r22, r23
     fe8:	78 2f       	mov	r23, r24
     fea:	88 27       	eor	r24, r24
     fec:	b8 5f       	subi	r27, 0xF8	; 248
     fee:	39 f0       	breq	.+14     	; 0xffe <__fixunssfsi+0x46>
     ff0:	b9 3f       	cpi	r27, 0xF9	; 249
     ff2:	cc f3       	brlt	.-14     	; 0xfe6 <__fixunssfsi+0x2e>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b3 95       	inc	r27
     ffc:	d9 f7       	brne	.-10     	; 0xff4 <__fixunssfsi+0x3c>
     ffe:	3e f4       	brtc	.+14     	; 0x100e <__fixunssfsi+0x56>
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__floatunsisf>:
    1010:	e8 94       	clt
    1012:	09 c0       	rjmp	.+18     	; 0x1026 <__floatsisf+0x12>

00001014 <__floatsisf>:
    1014:	97 fb       	bst	r25, 7
    1016:	3e f4       	brtc	.+14     	; 0x1026 <__floatsisf+0x12>
    1018:	90 95       	com	r25
    101a:	80 95       	com	r24
    101c:	70 95       	com	r23
    101e:	61 95       	neg	r22
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	8f 4f       	sbci	r24, 0xFF	; 255
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	99 23       	and	r25, r25
    1028:	a9 f0       	breq	.+42     	; 0x1054 <__floatsisf+0x40>
    102a:	f9 2f       	mov	r31, r25
    102c:	96 e9       	ldi	r25, 0x96	; 150
    102e:	bb 27       	eor	r27, r27
    1030:	93 95       	inc	r25
    1032:	f6 95       	lsr	r31
    1034:	87 95       	ror	r24
    1036:	77 95       	ror	r23
    1038:	67 95       	ror	r22
    103a:	b7 95       	ror	r27
    103c:	f1 11       	cpse	r31, r1
    103e:	f8 cf       	rjmp	.-16     	; 0x1030 <__floatsisf+0x1c>
    1040:	fa f4       	brpl	.+62     	; 0x1080 <__floatsisf+0x6c>
    1042:	bb 0f       	add	r27, r27
    1044:	11 f4       	brne	.+4      	; 0x104a <__floatsisf+0x36>
    1046:	60 ff       	sbrs	r22, 0
    1048:	1b c0       	rjmp	.+54     	; 0x1080 <__floatsisf+0x6c>
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	8f 4f       	sbci	r24, 0xFF	; 255
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	16 c0       	rjmp	.+44     	; 0x1080 <__floatsisf+0x6c>
    1054:	88 23       	and	r24, r24
    1056:	11 f0       	breq	.+4      	; 0x105c <__floatsisf+0x48>
    1058:	96 e9       	ldi	r25, 0x96	; 150
    105a:	11 c0       	rjmp	.+34     	; 0x107e <__floatsisf+0x6a>
    105c:	77 23       	and	r23, r23
    105e:	21 f0       	breq	.+8      	; 0x1068 <__floatsisf+0x54>
    1060:	9e e8       	ldi	r25, 0x8E	; 142
    1062:	87 2f       	mov	r24, r23
    1064:	76 2f       	mov	r23, r22
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <__floatsisf+0x5e>
    1068:	66 23       	and	r22, r22
    106a:	71 f0       	breq	.+28     	; 0x1088 <__floatsisf+0x74>
    106c:	96 e8       	ldi	r25, 0x86	; 134
    106e:	86 2f       	mov	r24, r22
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	2a f0       	brmi	.+10     	; 0x1080 <__floatsisf+0x6c>
    1076:	9a 95       	dec	r25
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	da f7       	brpl	.-10     	; 0x1076 <__floatsisf+0x62>
    1080:	88 0f       	add	r24, r24
    1082:	96 95       	lsr	r25
    1084:	87 95       	ror	r24
    1086:	97 f9       	bld	r25, 7
    1088:	08 95       	ret

0000108a <__fp_inf>:
    108a:	97 f9       	bld	r25, 7
    108c:	9f 67       	ori	r25, 0x7F	; 127
    108e:	80 e8       	ldi	r24, 0x80	; 128
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	08 95       	ret

00001096 <__fp_nan>:
    1096:	9f ef       	ldi	r25, 0xFF	; 255
    1098:	80 ec       	ldi	r24, 0xC0	; 192
    109a:	08 95       	ret

0000109c <__fp_pscA>:
    109c:	00 24       	eor	r0, r0
    109e:	0a 94       	dec	r0
    10a0:	16 16       	cp	r1, r22
    10a2:	17 06       	cpc	r1, r23
    10a4:	18 06       	cpc	r1, r24
    10a6:	09 06       	cpc	r0, r25
    10a8:	08 95       	ret

000010aa <__fp_pscB>:
    10aa:	00 24       	eor	r0, r0
    10ac:	0a 94       	dec	r0
    10ae:	12 16       	cp	r1, r18
    10b0:	13 06       	cpc	r1, r19
    10b2:	14 06       	cpc	r1, r20
    10b4:	05 06       	cpc	r0, r21
    10b6:	08 95       	ret

000010b8 <__fp_round>:
    10b8:	09 2e       	mov	r0, r25
    10ba:	03 94       	inc	r0
    10bc:	00 0c       	add	r0, r0
    10be:	11 f4       	brne	.+4      	; 0x10c4 <__fp_round+0xc>
    10c0:	88 23       	and	r24, r24
    10c2:	52 f0       	brmi	.+20     	; 0x10d8 <__fp_round+0x20>
    10c4:	bb 0f       	add	r27, r27
    10c6:	40 f4       	brcc	.+16     	; 0x10d8 <__fp_round+0x20>
    10c8:	bf 2b       	or	r27, r31
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <__fp_round+0x18>
    10cc:	60 ff       	sbrs	r22, 0
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <__fp_round+0x20>
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	8f 4f       	sbci	r24, 0xFF	; 255
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	08 95       	ret

000010da <__fp_split3>:
    10da:	57 fd       	sbrc	r21, 7
    10dc:	90 58       	subi	r25, 0x80	; 128
    10de:	44 0f       	add	r20, r20
    10e0:	55 1f       	adc	r21, r21
    10e2:	59 f0       	breq	.+22     	; 0x10fa <__fp_splitA+0x10>
    10e4:	5f 3f       	cpi	r21, 0xFF	; 255
    10e6:	71 f0       	breq	.+28     	; 0x1104 <__fp_splitA+0x1a>
    10e8:	47 95       	ror	r20

000010ea <__fp_splitA>:
    10ea:	88 0f       	add	r24, r24
    10ec:	97 fb       	bst	r25, 7
    10ee:	99 1f       	adc	r25, r25
    10f0:	61 f0       	breq	.+24     	; 0x110a <__fp_splitA+0x20>
    10f2:	9f 3f       	cpi	r25, 0xFF	; 255
    10f4:	79 f0       	breq	.+30     	; 0x1114 <__fp_splitA+0x2a>
    10f6:	87 95       	ror	r24
    10f8:	08 95       	ret
    10fa:	12 16       	cp	r1, r18
    10fc:	13 06       	cpc	r1, r19
    10fe:	14 06       	cpc	r1, r20
    1100:	55 1f       	adc	r21, r21
    1102:	f2 cf       	rjmp	.-28     	; 0x10e8 <__fp_split3+0xe>
    1104:	46 95       	lsr	r20
    1106:	f1 df       	rcall	.-30     	; 0x10ea <__fp_splitA>
    1108:	08 c0       	rjmp	.+16     	; 0x111a <__fp_splitA+0x30>
    110a:	16 16       	cp	r1, r22
    110c:	17 06       	cpc	r1, r23
    110e:	18 06       	cpc	r1, r24
    1110:	99 1f       	adc	r25, r25
    1112:	f1 cf       	rjmp	.-30     	; 0x10f6 <__fp_splitA+0xc>
    1114:	86 95       	lsr	r24
    1116:	71 05       	cpc	r23, r1
    1118:	61 05       	cpc	r22, r1
    111a:	08 94       	sec
    111c:	08 95       	ret

0000111e <__fp_zero>:
    111e:	e8 94       	clt

00001120 <__fp_szero>:
    1120:	bb 27       	eor	r27, r27
    1122:	66 27       	eor	r22, r22
    1124:	77 27       	eor	r23, r23
    1126:	cb 01       	movw	r24, r22
    1128:	97 f9       	bld	r25, 7
    112a:	08 95       	ret

0000112c <__mulsf3>:
    112c:	0b d0       	rcall	.+22     	; 0x1144 <__mulsf3x>
    112e:	c4 cf       	rjmp	.-120    	; 0x10b8 <__fp_round>
    1130:	b5 df       	rcall	.-150    	; 0x109c <__fp_pscA>
    1132:	28 f0       	brcs	.+10     	; 0x113e <__mulsf3+0x12>
    1134:	ba df       	rcall	.-140    	; 0x10aa <__fp_pscB>
    1136:	18 f0       	brcs	.+6      	; 0x113e <__mulsf3+0x12>
    1138:	95 23       	and	r25, r21
    113a:	09 f0       	breq	.+2      	; 0x113e <__mulsf3+0x12>
    113c:	a6 cf       	rjmp	.-180    	; 0x108a <__fp_inf>
    113e:	ab cf       	rjmp	.-170    	; 0x1096 <__fp_nan>
    1140:	11 24       	eor	r1, r1
    1142:	ee cf       	rjmp	.-36     	; 0x1120 <__fp_szero>

00001144 <__mulsf3x>:
    1144:	ca df       	rcall	.-108    	; 0x10da <__fp_split3>
    1146:	a0 f3       	brcs	.-24     	; 0x1130 <__mulsf3+0x4>

00001148 <__mulsf3_pse>:
    1148:	95 9f       	mul	r25, r21
    114a:	d1 f3       	breq	.-12     	; 0x1140 <__mulsf3+0x14>
    114c:	95 0f       	add	r25, r21
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	55 1f       	adc	r21, r21
    1152:	62 9f       	mul	r22, r18
    1154:	f0 01       	movw	r30, r0
    1156:	72 9f       	mul	r23, r18
    1158:	bb 27       	eor	r27, r27
    115a:	f0 0d       	add	r31, r0
    115c:	b1 1d       	adc	r27, r1
    115e:	63 9f       	mul	r22, r19
    1160:	aa 27       	eor	r26, r26
    1162:	f0 0d       	add	r31, r0
    1164:	b1 1d       	adc	r27, r1
    1166:	aa 1f       	adc	r26, r26
    1168:	64 9f       	mul	r22, r20
    116a:	66 27       	eor	r22, r22
    116c:	b0 0d       	add	r27, r0
    116e:	a1 1d       	adc	r26, r1
    1170:	66 1f       	adc	r22, r22
    1172:	82 9f       	mul	r24, r18
    1174:	22 27       	eor	r18, r18
    1176:	b0 0d       	add	r27, r0
    1178:	a1 1d       	adc	r26, r1
    117a:	62 1f       	adc	r22, r18
    117c:	73 9f       	mul	r23, r19
    117e:	b0 0d       	add	r27, r0
    1180:	a1 1d       	adc	r26, r1
    1182:	62 1f       	adc	r22, r18
    1184:	83 9f       	mul	r24, r19
    1186:	a0 0d       	add	r26, r0
    1188:	61 1d       	adc	r22, r1
    118a:	22 1f       	adc	r18, r18
    118c:	74 9f       	mul	r23, r20
    118e:	33 27       	eor	r19, r19
    1190:	a0 0d       	add	r26, r0
    1192:	61 1d       	adc	r22, r1
    1194:	23 1f       	adc	r18, r19
    1196:	84 9f       	mul	r24, r20
    1198:	60 0d       	add	r22, r0
    119a:	21 1d       	adc	r18, r1
    119c:	82 2f       	mov	r24, r18
    119e:	76 2f       	mov	r23, r22
    11a0:	6a 2f       	mov	r22, r26
    11a2:	11 24       	eor	r1, r1
    11a4:	9f 57       	subi	r25, 0x7F	; 127
    11a6:	50 40       	sbci	r21, 0x00	; 0
    11a8:	8a f0       	brmi	.+34     	; 0x11cc <__mulsf3_pse+0x84>
    11aa:	e1 f0       	breq	.+56     	; 0x11e4 <__mulsf3_pse+0x9c>
    11ac:	88 23       	and	r24, r24
    11ae:	4a f0       	brmi	.+18     	; 0x11c2 <__mulsf3_pse+0x7a>
    11b0:	ee 0f       	add	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	bb 1f       	adc	r27, r27
    11b6:	66 1f       	adc	r22, r22
    11b8:	77 1f       	adc	r23, r23
    11ba:	88 1f       	adc	r24, r24
    11bc:	91 50       	subi	r25, 0x01	; 1
    11be:	50 40       	sbci	r21, 0x00	; 0
    11c0:	a9 f7       	brne	.-22     	; 0x11ac <__mulsf3_pse+0x64>
    11c2:	9e 3f       	cpi	r25, 0xFE	; 254
    11c4:	51 05       	cpc	r21, r1
    11c6:	70 f0       	brcs	.+28     	; 0x11e4 <__mulsf3_pse+0x9c>
    11c8:	60 cf       	rjmp	.-320    	; 0x108a <__fp_inf>
    11ca:	aa cf       	rjmp	.-172    	; 0x1120 <__fp_szero>
    11cc:	5f 3f       	cpi	r21, 0xFF	; 255
    11ce:	ec f3       	brlt	.-6      	; 0x11ca <__mulsf3_pse+0x82>
    11d0:	98 3e       	cpi	r25, 0xE8	; 232
    11d2:	dc f3       	brlt	.-10     	; 0x11ca <__mulsf3_pse+0x82>
    11d4:	86 95       	lsr	r24
    11d6:	77 95       	ror	r23
    11d8:	67 95       	ror	r22
    11da:	b7 95       	ror	r27
    11dc:	f7 95       	ror	r31
    11de:	e7 95       	ror	r30
    11e0:	9f 5f       	subi	r25, 0xFF	; 255
    11e2:	c1 f7       	brne	.-16     	; 0x11d4 <__mulsf3_pse+0x8c>
    11e4:	fe 2b       	or	r31, r30
    11e6:	88 0f       	add	r24, r24
    11e8:	91 1d       	adc	r25, r1
    11ea:	96 95       	lsr	r25
    11ec:	87 95       	ror	r24
    11ee:	97 f9       	bld	r25, 7
    11f0:	08 95       	ret

000011f2 <__itoa_ncheck>:
    11f2:	bb 27       	eor	r27, r27
    11f4:	4a 30       	cpi	r20, 0x0A	; 10
    11f6:	31 f4       	brne	.+12     	; 0x1204 <__itoa_ncheck+0x12>
    11f8:	99 23       	and	r25, r25
    11fa:	22 f4       	brpl	.+8      	; 0x1204 <__itoa_ncheck+0x12>
    11fc:	bd e2       	ldi	r27, 0x2D	; 45
    11fe:	90 95       	com	r25
    1200:	81 95       	neg	r24
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <__utoa_common>

00001206 <__utoa_ncheck>:
    1206:	bb 27       	eor	r27, r27

00001208 <__utoa_common>:
    1208:	fb 01       	movw	r30, r22
    120a:	55 27       	eor	r21, r21
    120c:	aa 27       	eor	r26, r26
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	aa 1f       	adc	r26, r26
    1214:	a4 17       	cp	r26, r20
    1216:	10 f0       	brcs	.+4      	; 0x121c <__utoa_common+0x14>
    1218:	a4 1b       	sub	r26, r20
    121a:	83 95       	inc	r24
    121c:	50 51       	subi	r21, 0x10	; 16
    121e:	b9 f7       	brne	.-18     	; 0x120e <__utoa_common+0x6>
    1220:	a0 5d       	subi	r26, 0xD0	; 208
    1222:	aa 33       	cpi	r26, 0x3A	; 58
    1224:	08 f0       	brcs	.+2      	; 0x1228 <__utoa_common+0x20>
    1226:	a9 5d       	subi	r26, 0xD9	; 217
    1228:	a1 93       	st	Z+, r26
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	79 f7       	brne	.-34     	; 0x120c <__utoa_common+0x4>
    122e:	b1 11       	cpse	r27, r1
    1230:	b1 93       	st	Z+, r27
    1232:	11 92       	st	Z+, r1
    1234:	cb 01       	movw	r24, r22
    1236:	00 c0       	rjmp	.+0      	; 0x1238 <strrev>

00001238 <strrev>:
    1238:	dc 01       	movw	r26, r24
    123a:	fc 01       	movw	r30, r24
    123c:	67 2f       	mov	r22, r23
    123e:	71 91       	ld	r23, Z+
    1240:	77 23       	and	r23, r23
    1242:	e1 f7       	brne	.-8      	; 0x123c <strrev+0x4>
    1244:	32 97       	sbiw	r30, 0x02	; 2
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <strrev+0x18>
    1248:	7c 91       	ld	r23, X
    124a:	6d 93       	st	X+, r22
    124c:	70 83       	st	Z, r23
    124e:	62 91       	ld	r22, -Z
    1250:	ae 17       	cp	r26, r30
    1252:	bf 07       	cpc	r27, r31
    1254:	c8 f3       	brcs	.-14     	; 0x1248 <strrev+0x10>
    1256:	08 95       	ret

00001258 <_exit>:
    1258:	f8 94       	cli

0000125a <__stop_program>:
    125a:	ff cf       	rjmp	.-2      	; 0x125a <__stop_program>
